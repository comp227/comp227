{"componentChunkName":"component---src-templates-content-template-js","path":"/part1/a_more_complex_state_debugging_react_apps","result":{"data":{"markdownRemark":{"html":"<div class=\"content\">\n<h3>Complex state</h3>\n<p>In our previous example, the application state was simple as it was comprised of a single integer.\nWhat if our application requires a more complex state?</p>\n<p>In most cases, the easiest and best way to accomplish this is by *leveraging <code class=\"language-text\">useState</code> <strong>multiple times</strong> to create <strong>separate \"pieces\"</strong> of state*.</p>\n<p>In the following code, we create two pieces of state for the application named <code class=\"language-text\">left</code> and <code class=\"language-text\">right</code> that both get the initial value of <em><code class=\"language-text\">0</code></em>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>left<span class=\"token punctuation\">,</span> setLeft<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>right<span class=\"token punctuation\">,</span> setRight<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span>left<span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setLeft</span><span class=\"token punctuation\">(</span>left <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n        left\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setRight</span><span class=\"token punctuation\">(</span>right <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n        right\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span>right<span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The component gets access to the functions <code class=\"language-text\">setLeft</code> and <code class=\"language-text\">setRight</code> that it can use to update the two pieces of state.</p>\n<p>The component's state or a piece of its state can be of any type.\nWe could implement the same functionality by saving the click count of both the <code class=\"language-text\">left</code> and <code class=\"language-text\">right</code> buttons into a single object:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n  left<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n  right<span class=\"token operator\">:</span> <span class=\"token number\">0</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>In this case, the application would look like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>clicks<span class=\"token punctuation\">,</span> setClicks<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    left<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> right<span class=\"token operator\">:</span> <span class=\"token number\">0</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleLeftClick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> newClicks <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> \n      left<span class=\"token operator\">:</span> clicks<span class=\"token punctuation\">.</span>left <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> \n      right<span class=\"token operator\">:</span> clicks<span class=\"token punctuation\">.</span>right \n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">setClicks</span><span class=\"token punctuation\">(</span>newClicks<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleRightClick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> newClicks <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> \n      left<span class=\"token operator\">:</span> clicks<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">,</span> \n      right<span class=\"token operator\">:</span> clicks<span class=\"token punctuation\">.</span>right <span class=\"token operator\">+</span> <span class=\"token number\">1</span> \n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">setClicks</span><span class=\"token punctuation\">(</span>newClicks<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span>clicks<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>handleLeftClick<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>left<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>handleRightClick<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>right<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span>clicks<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Now the component only has a single piece of state and the event handlers have to take care of changing the <strong>entire application state</strong>.</p>\n<p>The event handler looks a bit messy.\nWhen the left button is clicked, the following function is called:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleLeftClick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> newClicks <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> \n    left<span class=\"token operator\">:</span> clicks<span class=\"token punctuation\">.</span>left <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> \n    right<span class=\"token operator\">:</span> clicks<span class=\"token punctuation\">.</span>right \n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">setClicks</span><span class=\"token punctuation\">(</span>newClicks<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The following object is set as the new state of the application:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n  left<span class=\"token operator\">:</span> clicks<span class=\"token punctuation\">.</span>left <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n  right<span class=\"token operator\">:</span> clicks<span class=\"token punctuation\">.</span>right\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The new value of the <code class=\"language-text\">left</code> property is now the same as the value of <code class=\"language-text\">left + 1</code> from the previous state,\nand the value of the <code class=\"language-text\">right</code> property is the same as the value of the <code class=\"language-text\">right</code> property from the previous state.</p>\n<blockquote>\n<p><strong>Pertinent</strong>: Some readers might be wondering why we didn't just update the state directly, like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleLeftClick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  clicks<span class=\"token punctuation\">.</span>left<span class=\"token operator\">++</span>\n  <span class=\"token function\">setClicks</span><span class=\"token punctuation\">(</span>clicks<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This direct updating of the state <em>appears to work</em>.\nHowever, <strong>it is forbidden in React to mutate state directly</strong>, since <a href=\"https://stackoverflow.com/a/40309023\">it can result in unexpected side effects</a>.\nChanging state has to always be done by setting the state to a new object.\nIf properties from the previous state object are not changed, they need to simply be copied,\nwhich is done by copying those properties into a new object and setting that as the new state.</p>\n</blockquote>\n<p>We can define the new state object a bit more neatly by using the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax\"><strong>object spread</strong></a>\nsyntax that was added to the language specification in the summer of 2018:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleLeftClick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> newClicks <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> \n    <span class=\"token operator\">...</span>clicks<span class=\"token punctuation\">,</span> \n    left<span class=\"token operator\">:</span> clicks<span class=\"token punctuation\">.</span>left <span class=\"token operator\">+</span> <span class=\"token number\">1</span> \n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">setClicks</span><span class=\"token punctuation\">(</span>newClicks<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleRightClick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> newClicks <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> \n    <span class=\"token operator\">...</span>clicks<span class=\"token punctuation\">,</span> \n    right<span class=\"token operator\">:</span> clicks<span class=\"token punctuation\">.</span>right <span class=\"token operator\">+</span> <span class=\"token number\">1</span> \n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">setClicks</span><span class=\"token punctuation\">(</span>newClicks<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The syntax may seem a bit strange at first.\nIn practice <code class=\"language-text\">{ ...obj }</code> duplicates the original <code class=\"language-text\">obj</code> object and its properties.\nWhen we also specify a particular property - e.g. <code class=\"language-text\">field</code> in <code class=\"language-text\">{ ...obj, field: x }</code>, the value of the <code class=\"language-text\">field</code> property in the duplicated object will be what <code class=\"language-text\">x</code> evaluates to.</p>\n<p>Applying this to the example above, with:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>clicks<span class=\"token punctuation\">,</span> right<span class=\"token operator\">:</span> clicks<span class=\"token punctuation\">.</span>right <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span></code></pre></div>\n<p>Javascript increments the <code class=\"language-text\">right</code> property by <em><code class=\"language-text\">1</code></em> in the duplicated object.</p>\n<p>we can simplify the functions like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleLeftClick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n  <span class=\"token function\">setClicks</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>clicks<span class=\"token punctuation\">,</span> left<span class=\"token operator\">:</span> clicks<span class=\"token punctuation\">.</span>left <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleRightClick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n  <span class=\"token function\">setClicks</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>clicks<span class=\"token punctuation\">,</span> right<span class=\"token operator\">:</span> clicks<span class=\"token punctuation\">.</span>right <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Since assigning the object to a variable in the event handlers (e.g. <code class=\"language-text\">newClicks</code>) is not necessary.</p>\n<p>While our code has now shrunken, having a single state object (like <code class=\"language-text\">clicks</code>) to store everything is not ideal for this particular application;\nthere's no apparent benefit and the resulting application is more complex.\nIn this case, storing the click counters into separate pieces of state is a far more suitable choice.</p>\n<p>There are situations where it can be beneficial to store a piece of application state in a more complex data structure.\n<a href=\"https://react.dev/learn/choosing-the-state-structure\">The official React documentation</a> contains some helpful guidance on the topic.</p>\n<h3>Handling arrays</h3>\n<p>Let's add a piece of state to our application containing an array <code class=\"language-text\">allClicks</code> that remembers every click that has occurred in the application.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>left<span class=\"token punctuation\">,</span> setLeft<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>right<span class=\"token punctuation\">,</span> setRight<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>allClicks<span class=\"token punctuation\">,</span> setAll<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleLeftClick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token function\">setAll</span><span class=\"token punctuation\">(</span>allClicks<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span><span class=\"token string\">'L'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token function\">setLeft</span><span class=\"token punctuation\">(</span>left <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleRightClick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token function\">setAll</span><span class=\"token punctuation\">(</span>allClicks<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span><span class=\"token string\">'R'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token function\">setRight</span><span class=\"token punctuation\">(</span>right <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span></span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span>left<span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>handleLeftClick<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>left<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>handleRightClick<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>right<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span>right<span class=\"token punctuation\">}</span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>allClicks<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span></span>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Every click is stored in a separate piece of state called <code class=\"language-text\">allClicks</code> that is initialized as an empty array:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>allClicks<span class=\"token punctuation\">,</span> setAll<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>When the <code class=\"language-text\">left</code> button is clicked, we add the letter <code class=\"language-text\">L</code> to the <code class=\"language-text\">allClicks</code> array:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleLeftClick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">setAll</span><span class=\"token punctuation\">(</span>allClicks<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span><span class=\"token string\">'L'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">setLeft</span><span class=\"token punctuation\">(</span>left <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The piece of state stored in <code class=\"language-text\">allClicks</code> is now set to be an array that contains all of the items of the previous state array plus the letter <code class=\"language-text\">L</code>.\nAdding the new item to the array is accomplished with the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/concat\"><code class=\"language-text\">concat</code> method</a>,\nwhich does not mutate the existing array but rather returns a <strong>new copy of the array</strong> with the item added to it.</p>\n<p>As mentioned previously, it's also possible in JavaScript to add items to an array with the\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/push\"><code class=\"language-text\">push</code> method</a>.\nIf we add the item by pushing it to the <code class=\"language-text\">allClicks</code> array and then updating the state, the application would still appear to work:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleLeftClick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  allClicks<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">'L'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">setAll</span><span class=\"token punctuation\">(</span>allClicks<span class=\"token punctuation\">)</span>\n  <span class=\"token function\">setLeft</span><span class=\"token punctuation\">(</span>left <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>However, <strong>don't use <code class=\"language-text\">push</code>, as it mutates <code class=\"language-text\">allClicks</code></strong>.\nRemember, the state of React components (like <code class=\"language-text\">allClicks</code>) must not be changed directly.\nEven if mutating the state appears to work in some cases, <em>it can lead to problems that are very hard to debug</em>.</p>\n<p>Let's take a closer look at how the clicking\nis rendered to the page:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span>left<span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>handleLeftClick<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>left<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>handleRightClick<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>right<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span>right<span class=\"token punctuation\">}</span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>allClicks<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span></span>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>We call the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/join\"><code class=\"language-text\">join</code> method</a>\non the <code class=\"language-text\">allClicks</code> array that joins all the items into a single string,\nseparated by the string passed as the function parameter, which in our case is a single space.</p>\n<h3>Update of the state is asynchronous</h3>\n<p>Let's expand the application so that it tracks the total number of button presses in the state <code class=\"language-text\">total</code>.\nEvery time the mouse is clicked, <code class=\"language-text\">total</code> will update:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>left<span class=\"token punctuation\">,</span> setLeft<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>right<span class=\"token punctuation\">,</span> setRight<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>allClicks<span class=\"token punctuation\">,</span> setAll<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>total<span class=\"token punctuation\">,</span> setTotal<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleLeftClick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setAll</span><span class=\"token punctuation\">(</span>allClicks<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span><span class=\"token string\">'L'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">setLeft</span><span class=\"token punctuation\">(</span>left <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token function\">setTotal</span><span class=\"token punctuation\">(</span>left <span class=\"token operator\">+</span> right<span class=\"token punctuation\">)</span></span>  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleRightClick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setAll</span><span class=\"token punctuation\">(</span>allClicks<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span><span class=\"token string\">'R'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">setRight</span><span class=\"token punctuation\">(</span>right <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token function\">setTotal</span><span class=\"token punctuation\">(</span>left <span class=\"token operator\">+</span> right<span class=\"token punctuation\">)</span></span>  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span>left<span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>handleLeftClick<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>left<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>handleRightClick<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>right<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span>right<span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>allClicks<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span>total <span class=\"token punctuation\">{</span>total<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span></span>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The solution does not quite work:</p>\n<picture><img src=\"/static/51cb1abea745b9dab291b98886ea36e2/5a190/33.png\" alt=\"browser showing 2 left|right 1, RLL total 2\" srcset=\"/static/51cb1abea745b9dab291b98886ea36e2/772e8/33.png 200w,\n/static/51cb1abea745b9dab291b98886ea36e2/e17e5/33.png 400w,\n/static/51cb1abea745b9dab291b98886ea36e2/5a190/33.png 800w,\n/static/51cb1abea745b9dab291b98886ea36e2/3f3b9/33.png 870w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>The total number of button presses is consistently one less than the actual amount of presses, for some reason.</p>\n<p>Let us add a couple of <code class=\"language-text\">console.log</code> statements to the event handler:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleLeftClick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setAll</span><span class=\"token punctuation\">(</span>allClicks<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span><span class=\"token string\">'L'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"gatsby-highlight-code-line\">    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'left before'</span><span class=\"token punctuation\">,</span> left<span class=\"token punctuation\">)</span></span>    <span class=\"token function\">setLeft</span><span class=\"token punctuation\">(</span>left <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"gatsby-highlight-code-line\">    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'left after'</span><span class=\"token punctuation\">,</span> left<span class=\"token punctuation\">)</span></span>    <span class=\"token function\">setTotal</span><span class=\"token punctuation\">(</span>left <span class=\"token operator\">+</span> right<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The console reveals the problem</p>\n<picture><img src=\"/static/2ae8507ef8fd503710ec0896dcfdc1e3/5a190/32.png\" alt=\"devtools console showing left before 4 and left after 4\" srcset=\"/static/2ae8507ef8fd503710ec0896dcfdc1e3/772e8/32.png 200w,\n/static/2ae8507ef8fd503710ec0896dcfdc1e3/e17e5/32.png 400w,\n/static/2ae8507ef8fd503710ec0896dcfdc1e3/5a190/32.png 800w,\n/static/2ae8507ef8fd503710ec0896dcfdc1e3/71ee9/32.png 1081w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Even though a new value for <code class=\"language-text\">left</code> was requested by calling <code class=\"language-text\">setLeft(left + 1)</code>, the <strong><em>old value remains in the <code class=\"language-text\">left</code> variable while this function still executes</em></strong>.\nAs a result, the attempt to count button presses uses the non-updated value for <code class=\"language-text\">left</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">setTotal</span><span class=\"token punctuation\">(</span>left <span class=\"token operator\">+</span> right<span class=\"token punctuation\">)</span> <span class=\"token comment\">// computer evaluates as '4 + 1'</span></code></pre></div>\n<p>The reason for this is that <em>a state update in React happens</em> <a href=\"https://react.dev/learn/queueing-a-series-of-state-updates\"><strong><em>asynchronously</em></strong></a>,\ni.e. not immediately but \"at some point\" before the component is rendered again.</p>\n<p>We can fix the app as follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleLeftClick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setAll</span><span class=\"token punctuation\">(</span>allClicks<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span><span class=\"token string\">'L'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">const</span> updatedLeft <span class=\"token operator\">=</span> left <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n    <span class=\"token function\">setLeft</span><span class=\"token punctuation\">(</span>updatedLeft<span class=\"token punctuation\">)</span>\n    <span class=\"token function\">setTotal</span><span class=\"token punctuation\">(</span>updatedLeft <span class=\"token operator\">+</span> right<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>So now the number of button presses is based on the correct number of left button presses.</p>\n<h3>Conditional rendering</h3>\n<p>Let's modify our application so that the rendering of the clicking history is handled by a new <code class=\"language-text\">History</code> component:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">History</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>allClicks<span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span></span><span class=\"gatsby-highlight-code-line\">        the app is used by pressing the buttons</span><span class=\"gatsby-highlight-code-line\">      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span></span><span class=\"gatsby-highlight-code-line\"></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span></span><span class=\"gatsby-highlight-code-line\">      button press history<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>allClicks<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span>left<span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>handleLeftClick<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>left<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>handleRightClick<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>right<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span>right<span class=\"token punctuation\">}</span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token operator\">&lt;</span>History allClicks<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>allClicks<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span></span>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Now the behavior of the component depends on whether or not any buttons have been clicked.\nIf not, meaning that the <code class=\"language-text\">allClicks</code> array is empty, the component renders a div element with some instructions instead:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>the app is used by pressing the buttons<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></code></pre></div>\n<p>In all other cases, the component renders the clicking history:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n  button press history<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>allClicks<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></code></pre></div>\n<p>The <code class=\"language-text\">History</code> component renders completely different React elements depending on the state of the application.\nThis is called <strong>conditional rendering</strong>.</p>\n<p>React also offers many other ways of doing <a href=\"https://react.dev/learn/conditional-rendering\">conditional rendering</a>.\nWe will take a closer look at this in <a href=\"/part2\">part 2</a>.</p>\n<p>Let's make one last modification to our application by refactoring it to use the <code class=\"language-text\">Button</code> component that we defined earlier:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">History</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>allClicks<span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n        the app is used by pressing the buttons\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      button press history<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>allClicks<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Button</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> handleClick<span class=\"token punctuation\">,</span> text <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>handleClick<span class=\"token punctuation\">}</span><span class=\"token operator\">></span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">{</span>text<span class=\"token punctuation\">}</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token punctuation\">)</span></span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>left<span class=\"token punctuation\">,</span> setLeft<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>right<span class=\"token punctuation\">,</span> setRight<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>allClicks<span class=\"token punctuation\">,</span> setAll<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleLeftClick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setAll</span><span class=\"token punctuation\">(</span>allClicks<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span><span class=\"token string\">'L'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">setLeft</span><span class=\"token punctuation\">(</span>left <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleRightClick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setAll</span><span class=\"token punctuation\">(</span>allClicks<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span><span class=\"token string\">'R'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">setRight</span><span class=\"token punctuation\">(</span>right <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span>left<span class=\"token punctuation\">}</span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token operator\">&lt;</span>Button handleClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>handleLeftClick<span class=\"token punctuation\">}</span> text<span class=\"token operator\">=</span><span class=\"token string\">'left'</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token operator\">&lt;</span>Button handleClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>handleRightClick<span class=\"token punctuation\">}</span> text<span class=\"token operator\">=</span><span class=\"token string\">'right'</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span></span>      <span class=\"token punctuation\">{</span>right<span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">&lt;</span>History allClicks<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>allClicks<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>Old React</h3>\n<p>In this course, we use the <a href=\"https://react.dev/learn/state-a-components-memory\">state hook</a> to add state to our React components,\nwhich is part of the newer versions of React and is available from version <a href=\"https://www.npmjs.com/package/react/v/16.8.0\">16.8.0</a> onwards.\nBefore the addition of hooks, there was no way to add state to functional components.\nComponents that required state had to be defined as <a href=\"https://react.dev/reference/react/Component\">class</a> components, using the JavaScript class syntax.</p>\n<p>In this course, we have made the slightly radical decision to use hooks exclusively from day one,\nto ensure that we are learning the current and future variations of React.\nEven though functional components are the future of React, it is still important to learn the class syntax,\nas there are billions of lines of legacy React code that you might end up maintaining someday.\nThe same applies to documentation and examples of React that you may stumble across on the internet.</p>\n<p>We will learn more about React class components later on in the course.</p>\n<h3>Debugging React applications</h3>\n<p>A large part of a typical developer's time is spent on debugging and reading existing code.\nOnce in a while, we do get to write a line or two of new code,\nbut a large part of our time is spent trying to figure out why something is broken or how something works.\nGood practices and tools for debugging are extremely important for this reason.</p>\n<p>Lucky for us, React is an extremely developer-friendly library when it comes to debugging.</p>\n<p>Before we move on, let us remind ourselves of one of the most important rules of web development.</p>\n<h4>The first rule of web development</h4>\n<blockquote>\n<p><strong>Keep the browser's developer console open at all times.</strong></p>\n<p>The <code class=\"language-text\">Console</code> tab in particular should always be open, unless there is a specific reason to view another tab.</p>\n</blockquote>\n<p>Keep both your code and the web page open together <strong>at the same time, all the time</strong>.</p>\n<p>If and when your code fails to compile and your browser lights up like a nightclub:</p>\n<picture><img src=\"/static/b38999bf74ac911bbc2e0e278926111e/5a190/6x.png\" alt=\"screenshot of code\" srcset=\"/static/b38999bf74ac911bbc2e0e278926111e/772e8/6x.png 200w,\n/static/b38999bf74ac911bbc2e0e278926111e/e17e5/6x.png 400w,\n/static/b38999bf74ac911bbc2e0e278926111e/5a190/6x.png 800w,\n/static/b38999bf74ac911bbc2e0e278926111e/c1b63/6x.png 1200w,\n/static/b38999bf74ac911bbc2e0e278926111e/2eb79/6x.png 1256w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>don't write more code but rather find and fix the problem <strong>immediately</strong>.\nCode will not miraculously start working after writing large amounts of additional code.</p>\n<h3>WebStorm IDE Debugger Introduction</h3>\n<p>Old-school, print-based debugging can at times be a good idea.\nI prefer using an IDE and its breakpoints though when possible.</p>\n<p>To use the debugger, we have to configure an additional setting that tells WebStorm what to do when you want to launch your program.</p>\n<p>First, near the play button at the top of the window, click on the <strong><em>Down arrow</em></strong> icon in between the <em>Current File</em> and the Play icon, and select <strong><em>Edit Configurations...</em></strong></p>\n<picture><img src=\"/static/c566a882577a5acbfb11d20931e0ef58/40040/webstorm_edit_config.png\" alt=\"status bar showing down arrow\" srcset=\"/static/c566a882577a5acbfb11d20931e0ef58/772e8/webstorm_edit_config.png 200w,\n/static/c566a882577a5acbfb11d20931e0ef58/e17e5/webstorm_edit_config.png 400w,\n/static/c566a882577a5acbfb11d20931e0ef58/40040/webstorm_edit_config.png 616w\" sizes=\"(max-width: 616px) 100vw, 616px\"></picture>\n<p>This brings up the following dialog box, where you'll choose the <em>plus icon</em> to <strong><em>Add new run configuration...</em></strong>, and then you can select <strong><em>JavaScript Debug</em></strong>.</p>\n<blockquote>\n<p>Notice there is an option to create a <em>Node.js</em> configuration, but that won't be necessary for a few more weeks, so leave it for now.</p>\n</blockquote>\n<picture><img src=\"/static/9088baa9f6aa3f9730bbe3003570698d/5a190/webstorm_add_run_config.png\" alt=\"WebStorm showing run/debug configurations menu\" srcset=\"/static/9088baa9f6aa3f9730bbe3003570698d/772e8/webstorm_add_run_config.png 200w,\n/static/9088baa9f6aa3f9730bbe3003570698d/e17e5/webstorm_add_run_config.png 400w,\n/static/9088baa9f6aa3f9730bbe3003570698d/5a190/webstorm_add_run_config.png 800w,\n/static/9088baa9f6aa3f9730bbe3003570698d/0d40b/webstorm_add_run_config.png 1175w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>The most important part here is to specify the URL, which will be <em><code class=\"language-text\">http://localhost:5173</code></em>.\nYou can name the Configuration so that it is easier to remember, for me, I just named it <code class=\"language-text\">localhost:5173</code>.\nThe configuation should look something like this:</p>\n<picture><img src=\"/static/aa233ab38d6e401307a111ce8b332f6b/5a190/webstorm_run_config.png\" alt=\"WebStorm&#x27;s run configuration options for localhost:5173\" srcset=\"/static/aa233ab38d6e401307a111ce8b332f6b/772e8/webstorm_run_config.png 200w,\n/static/aa233ab38d6e401307a111ce8b332f6b/e17e5/webstorm_run_config.png 400w,\n/static/aa233ab38d6e401307a111ce8b332f6b/5a190/webstorm_run_config.png 800w,\n/static/aa233ab38d6e401307a111ce8b332f6b/7321b/webstorm_run_config.png 1184w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Once everything is set, you can then click <strong>OK</strong>, and you'll now see that Current File has been replaced by <strong><em>localhost:5173</em></strong>!</p>\n<p>With the debugger configured, let's go review some theory and how we will utilize it in WebStorm.</p>\n<h3>Debugging in WebStorm</h3>\n<p>A <strong>breakpoint</strong> is a special IDE-based marker that tells your application to <strong><em>break</em></strong> (pause executing code) when it reaches a particular <strong><em>point</em></strong> (line of code).\nBreakpoints can be turned on or off by clicking on the line number to the left of a line:</p>\n<picture><img src=\"/static/2d416a0aca1b73fb37ba0f504da8d200/08115/no_breakpoint_yet.png\" alt=\"breakpoint line number\" srcset=\"/static/2d416a0aca1b73fb37ba0f504da8d200/772e8/no_breakpoint_yet.png 200w,\n/static/2d416a0aca1b73fb37ba0f504da8d200/e17e5/no_breakpoint_yet.png 400w,\n/static/2d416a0aca1b73fb37ba0f504da8d200/08115/no_breakpoint_yet.png 504w\" sizes=\"(max-width: 504px) 100vw, 504px\"></picture>\n<p>When a line number is clicked, it turns into a stop sign indicating the breakpoint is enabled for that line:</p>\n<picture><img src=\"/static/cd68ea46cb1e6e78dff4025ee77dcd44/87254/breakpoint_line_enabled.png\" alt=\"WebStorm showing debugging enabled\" srcset=\"/static/cd68ea46cb1e6e78dff4025ee77dcd44/772e8/breakpoint_line_enabled.png 200w,\n/static/cd68ea46cb1e6e78dff4025ee77dcd44/e17e5/breakpoint_line_enabled.png 400w,\n/static/cd68ea46cb1e6e78dff4025ee77dcd44/87254/breakpoint_line_enabled.png 604w\" sizes=\"(max-width: 604px) 100vw, 604px\"></picture>\n<p>The application will only break at that line when it reaches that point and you click on the debugger icon\n<picture><img src=\"/static/c8d30d0f5d4d2c0b5fdddd17c1241f6f/d6e3e/debugger_icon.png\" alt=\"Debugger Icon\" srcset=\"/static/c8d30d0f5d4d2c0b5fdddd17c1241f6f/d6e3e/debugger_icon.png 27w\" sizes=\"(max-width: 27px) 100vw, 27px\"></picture> in the upper right of the WebStorm IDE.</p>\n<p>Once you are at a breakpoint, you'll notice that the Browser will give you an indication that it is paused.\nIn WebStorm, you should notice that the Debug pane (<strong><em>Alt-6</em></strong>) is open, and there will also be an indication of the line that it is stopped at:</p>\n<picture><img src=\"/static/bf4a47eccc4dc991288d40a7f1a14191/b23ad/debugger_paused_line.png\" alt=\"WebStorm showing line currently paused on\" srcset=\"/static/bf4a47eccc4dc991288d40a7f1a14191/772e8/debugger_paused_line.png 200w,\n/static/bf4a47eccc4dc991288d40a7f1a14191/e17e5/debugger_paused_line.png 400w,\n/static/bf4a47eccc4dc991288d40a7f1a14191/b23ad/debugger_paused_line.png 519w\" sizes=\"(max-width: 519px) 100vw, 519px\"></picture>\n<p>The <strong><em>Threads &#x26; Variables</em></strong> tab is handy as it provides a wealth of information on the current state of variables that you can explore by clicking around.\nYou can see the state of all of the local and global variables as if you were to write <code class=\"language-text\">console.log</code> statements for all of your variables here.</p>\n<picture><img src=\"/static/8f3b0438edcf73162fa570c9945a46db/5a190/ide_variables_tab.png\" alt=\"WebStorm showing the variables tab\" srcset=\"/static/8f3b0438edcf73162fa570c9945a46db/772e8/ide_variables_tab.png 200w,\n/static/8f3b0438edcf73162fa570c9945a46db/e17e5/ide_variables_tab.png 400w,\n/static/8f3b0438edcf73162fa570c9945a46db/5a190/ide_variables_tab.png 800w,\n/static/8f3b0438edcf73162fa570c9945a46db/c1b63/ide_variables_tab.png 1200w,\n/static/8f3b0438edcf73162fa570c9945a46db/5bd27/ide_variables_tab.png 1432w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>If you don't want to wade through, you could also set up expressions for the computer to evaluate, which can also be done in the Console tab.\nWhat you would type in here is what you would normally put inside of <code class=\"language-text\">console.log</code> statements.\nThe <strong><em>Console</em></strong> tab also provides a history of what you have typed and can include some fairly complex expressions.</p>\n<picture><img src=\"/static/2693dfe6703827650ffade391da7a3a8/5a190/ide_console_tab.png\" alt=\"WebStorm console tab\" srcset=\"/static/2693dfe6703827650ffade391da7a3a8/772e8/ide_console_tab.png 200w,\n/static/2693dfe6703827650ffade391da7a3a8/e17e5/ide_console_tab.png 400w,\n/static/2693dfe6703827650ffade391da7a3a8/5a190/ide_console_tab.png 800w,\n/static/2693dfe6703827650ffade391da7a3a8/c1b63/ide_console_tab.png 1200w,\n/static/2693dfe6703827650ffade391da7a3a8/5bd27/ide_console_tab.png 1432w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>If you would like to continue executing the application, you can use the browser's resume button.</p>\n<picture><img src=\"/static/0d4538d30583ecc8ffa11fa939b4130c/9bb7a/browser_resume.png\" alt=\"browser resume button\" srcset=\"/static/0d4538d30583ecc8ffa11fa939b4130c/772e8/browser_resume.png 200w,\n/static/0d4538d30583ecc8ffa11fa939b4130c/e17e5/browser_resume.png 400w,\n/static/0d4538d30583ecc8ffa11fa939b4130c/9bb7a/browser_resume.png 676w\" sizes=\"(max-width: 676px) 100vw, 676px\"></picture>\n<p>Of course, it will continue until it reaches the next breakpoint.\nIn this case, because we have two buttons, pressing the button will feel <em>as if it did nothing</em>.\nHowever, if we examine the variables closely,\nthe local variable <code class=\"language-text\">text</code> should now have the property <code class=\"language-text\">right</code> (which WebStorm highlights in blue).</p>\n<picture><img src=\"/static/7d1fa43cfb2f3d0f96bc0f7e4b415fd1/5a190/ide_debugger_changes.png\" alt=\"WebStorm shows text in blue with the value &#x22;right&#x22;\" srcset=\"/static/7d1fa43cfb2f3d0f96bc0f7e4b415fd1/772e8/ide_debugger_changes.png 200w,\n/static/7d1fa43cfb2f3d0f96bc0f7e4b415fd1/e17e5/ide_debugger_changes.png 400w,\n/static/7d1fa43cfb2f3d0f96bc0f7e4b415fd1/5a190/ide_debugger_changes.png 800w,\n/static/7d1fa43cfb2f3d0f96bc0f7e4b415fd1/7388e/ide_debugger_changes.png 1104w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>If you click the resume button again, it will appear as though the application has left the debugging session.\nHowever, the IDE will still have icons that let you know it is still connected.</p>\n<picture><img src=\"/static/20de540cbcbad4e8a08c64cb5f96f9ff/74cfa/ide_in_debug.png\" alt=\"IDE showing it&#x27;s still in debug mode\" srcset=\"/static/20de540cbcbad4e8a08c64cb5f96f9ff/772e8/ide_in_debug.png 200w,\n/static/20de540cbcbad4e8a08c64cb5f96f9ff/e17e5/ide_in_debug.png 400w,\n/static/20de540cbcbad4e8a08c64cb5f96f9ff/74cfa/ide_in_debug.png 553w\" sizes=\"(max-width: 553px) 100vw, 553px\"></picture>\n<p>The application will run until it reaches another breakpoint.</p>\n<p>To get out of the Debugging Session, you can merely press the Red Stop button.\nPressing the Green Bug Button to the left will restart the debugging session and relaunch the webpage.</p>\n<h3>Finding a small error</h3>\n<p>Imagine that you have tried coding the application up.\nHowever, you notice that when you run the program, <strong><em>Nothing appears</em></strong>.\nWhile it's normal for us to think of what is not happening, we need to focus on what is going on.\nImagine we set a breakpoint on the same line again and we try to debug.  Then we notice that our <code class=\"language-text\">text</code> local variable is <em><code class=\"language-text\">undefined</code></em>, like this:</p>\n<picture><img src=\"/static/c07c6efece3f15e06650c3b2c0df1d37/5a190/ide_text_undefined.png\" alt=\"WebStorm showing issues\" srcset=\"/static/c07c6efece3f15e06650c3b2c0df1d37/772e8/ide_text_undefined.png 200w,\n/static/c07c6efece3f15e06650c3b2c0df1d37/e17e5/ide_text_undefined.png 400w,\n/static/c07c6efece3f15e06650c3b2c0df1d37/5a190/ide_text_undefined.png 800w,\n/static/c07c6efece3f15e06650c3b2c0df1d37/c1b63/ide_text_undefined.png 1200w,\n/static/c07c6efece3f15e06650c3b2c0df1d37/6c2de/ide_text_undefined.png 1334w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>If our component</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Button</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> handleClick<span class=\"token punctuation\">,</span> text <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>handleClick<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n    <span class=\"token punctuation\">{</span>text<span class=\"token punctuation\">}</span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>is not working as intended, it's useful to examine the <code class=\"language-text\">props</code> object more closely.\nTo do this effectively, we must stop debugging and transform our function into the less compact form\nand receive the entire props object without destructuring it immediately:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Button</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> \n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> handleClick<span class=\"token punctuation\">,</span> text <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> props\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>handleClick<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span>text<span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>If we then run the debugger again and place a breakpoint on the return line, we can examine the variables passed in much more closely.\nIn this case, we might be able to find what the issue may be.</p>\n<picture><img src=\"/static/e484fa30d8cee5a4322ce11c5265c454/5a190/ide_debug_puzzle.png\" alt=\"IDE Debug with props enabled showing variables\" srcset=\"/static/e484fa30d8cee5a4322ce11c5265c454/772e8/ide_debug_puzzle.png 200w,\n/static/e484fa30d8cee5a4322ce11c5265c454/e17e5/ide_debug_puzzle.png 400w,\n/static/e484fa30d8cee5a4322ce11c5265c454/5a190/ide_debug_puzzle.png 800w,\n/static/e484fa30d8cee5a4322ce11c5265c454/c1b63/ide_debug_puzzle.png 1200w,\n/static/e484fa30d8cee5a4322ce11c5265c454/68638/ide_debug_puzzle.png 1510w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p><strong><em>Study this picture and see if you can find the issue...I will ask you about it in the future!</em></strong></p>\n<h4>A quick aside about logging</h4>\n<blockquote>\n<p><strong>Pertinent</strong> Some of you have had much more experience merely printing things to the console instead of using the debugger.\nWhile printing things to the console is still helpful, I would also prefer for you to learn to use the debugger.\nNonetheless, when you the <strong><em>Console</em></strong> tab (or <code class=\"language-text\">console.log</code>) for debugging, <strong>don't combine objects</strong> in a Java-like fashion by using the plus operator.\nIf you write:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token string\">'props value is '</span> <span class=\"token operator\">+</span> props</code></pre></div>\n<p>You will end up with an unhelpful log message:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">props value is <span class=\"token punctuation\">[</span>object Object<span class=\"token punctuation\">]</span></code></pre></div>\n<p>To get actual values for variables, separate them in <code class=\"language-text\">console.log</code> with a comma:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token string\">'props value is'</span><span class=\"token punctuation\">,</span> props</code></pre></div>\n<p>Now, those separated items will be available in the browser console for further review.</p>\n</blockquote>\n<h3>Using the browser's debugging tools</h3>\n<p>Setting breakpoints or logging output to the console are not the only ways of debugging our applications.\nYou can also pause the execution of your application code in the Chrome developer console's <em>debugger</em>,\nby writing the command <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/debugger\"><code class=\"language-text\">debugger</code></a> anywhere in your code.</p>\n<p>The execution will pause once it arrives at a point where the <strong><em><code class=\"language-text\">debugger</code></em></strong> command gets executed:</p>\n<picture><img src=\"/static/09edd2ccb362c505d6fb6b2873a36d38/5a190/7a.png\" alt=\"debugger paused in dev tools\" srcset=\"/static/09edd2ccb362c505d6fb6b2873a36d38/772e8/7a.png 200w,\n/static/09edd2ccb362c505d6fb6b2873a36d38/e17e5/7a.png 400w,\n/static/09edd2ccb362c505d6fb6b2873a36d38/5a190/7a.png 800w,\n/static/09edd2ccb362c505d6fb6b2873a36d38/c1b63/7a.png 1200w,\n/static/09edd2ccb362c505d6fb6b2873a36d38/58354/7a.png 1396w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>By going to the <em>Console</em> tab, it is easy to inspect the current state of variables:</p>\n<picture><img src=\"/static/5cb699a765cba2171029eca9156e53d6/5a190/8a.png\" alt=\"console inspection screenshot\" srcset=\"/static/5cb699a765cba2171029eca9156e53d6/772e8/8a.png 200w,\n/static/5cb699a765cba2171029eca9156e53d6/e17e5/8a.png 400w,\n/static/5cb699a765cba2171029eca9156e53d6/5a190/8a.png 800w,\n/static/5cb699a765cba2171029eca9156e53d6/c1b63/8a.png 1200w,\n/static/5cb699a765cba2171029eca9156e53d6/229ad/8a.png 1356w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<blockquote>\n<p>You may notice that ESLint mentions the use of debugger <em><code class=\"language-text\">Unexpected &#39;debugger&#39; statement (no-debugger)</code></em>.\nESLint flags this as a problem because we would not want to keep a debugger line in production code.\n<em>Imagine being on a website only to have the application completely pause?</em>\nThis is why ESLint has this as a rule.<br>\nThere is a way to turn this off, but we will leave it on to remind us to take it out eventually.</p>\n</blockquote>\n<p>Once the cause of the bug is discovered you can remove the <strong><em><code class=\"language-text\">debugger</code></em></strong> command and refresh the page.</p>\n<p>The debugger, like WebStorm, enables us to execute our code line by line with the controls found on the right-hand side of the <strong><em>Sources</em></strong> tab.</p>\n<p>You can also access the debugger without the <strong><em>debugger</em></strong> command by adding breakpoints in the <strong><em>Sources</em></strong> tab.\nInspecting the values of the component's variables can be done in the <strong><em>Scope</em></strong> section:</p>\n<picture><img src=\"/static/c835d5f6d48cf8358cc2fc906775774b/5a190/9a.png\" alt=\"breakpoint example in devtools\" srcset=\"/static/c835d5f6d48cf8358cc2fc906775774b/772e8/9a.png 200w,\n/static/c835d5f6d48cf8358cc2fc906775774b/e17e5/9a.png 400w,\n/static/c835d5f6d48cf8358cc2fc906775774b/5a190/9a.png 800w,\n/static/c835d5f6d48cf8358cc2fc906775774b/c1b63/9a.png 1200w,\n/static/c835d5f6d48cf8358cc2fc906775774b/82c1e/9a.png 1398w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>It is highly recommended to add the <a href=\"https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi?hl=en\">React developer tools</a> extension to Chrome.\nIt adds a new <strong><em>Components</em></strong> tab to the developer tools.\nThe new developer tools tab can be used to inspect the different React elements in the application, along with their state and props:</p>\n<picture><img src=\"/static/abd63d265d40ff092042b15f007b5c03/5a190/10ea.png\" alt=\"screenshot react developer tools extension\" srcset=\"/static/abd63d265d40ff092042b15f007b5c03/772e8/10ea.png 200w,\n/static/abd63d265d40ff092042b15f007b5c03/e17e5/10ea.png 400w,\n/static/abd63d265d40ff092042b15f007b5c03/5a190/10ea.png 800w,\n/static/abd63d265d40ff092042b15f007b5c03/c1b63/10ea.png 1200w,\n/static/abd63d265d40ff092042b15f007b5c03/d7ceb/10ea.png 1446w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>The <code class=\"language-text\">App</code> component's state is defined like so:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>left<span class=\"token punctuation\">,</span> setLeft<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>right<span class=\"token punctuation\">,</span> setRight<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>allClicks<span class=\"token punctuation\">,</span> setAll<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Dev tools show the state of hooks in the order of their definition:</p>\n<picture><img src=\"/static/0739c0ca5fc25448cd190f59e37baf88/5a190/11ea.png\" alt=\"state of hooks in React&#x27;s dev tools\" srcset=\"/static/0739c0ca5fc25448cd190f59e37baf88/772e8/11ea.png 200w,\n/static/0739c0ca5fc25448cd190f59e37baf88/e17e5/11ea.png 400w,\n/static/0739c0ca5fc25448cd190f59e37baf88/5a190/11ea.png 800w,\n/static/0739c0ca5fc25448cd190f59e37baf88/c1b63/11ea.png 1200w,\n/static/0739c0ca5fc25448cd190f59e37baf88/ab3e6/11ea.png 1441w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>The first <em>State</em> contains the value of the <code class=\"language-text\">left</code> state,\nthe next contains the value of the <code class=\"language-text\">right</code> state and the last contains the value of the <code class=\"language-text\">allClicks</code> state.</p>\n<h3>Rules of Hooks</h3>\n<p>There are a few limitations and rules we have to follow to ensure that our application uses hooks-based state functions correctly.</p>\n<p><strong><em>Hooks should be called at the base level of React function components, before any <code class=\"language-text\">return</code> statements</em></strong></p>\n<p><strong><em>Do not call</em></strong> <code class=\"language-text\">useState</code> (or <code class=\"language-text\">useEffect</code>) from:</p>\n<ul>\n<li>⛔inside of a loop⛔</li>\n<li>⛔a conditional expression⛔</li>\n<li>⛔any place that is not a function defining a React component⛔.</li>\n</ul>\n<p>Why? We need to ensure that hooks are always called in the same order.\nIf we use loops, conditionals or other nested functions, the application can behave erratically.</p>\n<p>To recap, hooks may only be called from the inside of a function body that defines a React component:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// this is at the base level in a React function component</span>\n  <span class=\"token comment\">// You can typically tell a function component because it is capitalized (App)</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>age<span class=\"token punctuation\">,</span> setAge<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">,</span> setName<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">'CW Longbottom'</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> age <span class=\"token operator\">></span> <span class=\"token number\">10</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>foobar<span class=\"token punctuation\">,</span> setFoobar<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 🐞 - doesn't work</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> <span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> age<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>rightWay<span class=\"token punctuation\">,</span> setRightWay<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 🐞 - also no good</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">notGood</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">,</span> setX<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 🐞 also illegal</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token comment\">//...</span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>Event Handling Revisited</h3>\n<p>Event handling is tricky, so we will revisit the topic.</p>\n<p>Let's assume that we're developing this simple application with the following component <code class=\"language-text\">App</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>value<span class=\"token punctuation\">,</span> setValue<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span>value<span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">&lt;</span>button<span class=\"token operator\">></span>reset to zero<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>We want the clicking of the button to reset the state stored in the <code class=\"language-text\">value</code> variable.</p>\n<p>To make the button react to a click event, we have to add an <strong>event handler</strong> to it.</p>\n<p>Event handlers must always be a function or a reference to a function.\nThe button will not work if the event handler is set to a variable of any other type.</p>\n<p>If we were to define the event handler as a string:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token string\">\"crap...\"</span><span class=\"token operator\">></span>button<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span></code></pre></div>\n<p>React would warn us about this in the console:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">Warning<span class=\"token operator\">:</span> Expected <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">onClick</span><span class=\"token template-punctuation string\">`</span></span> listener to be a <span class=\"token keyword\">function</span><span class=\"token punctuation\">,</span> instead got a value <span class=\"token keyword\">of</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">string</span><span class=\"token template-punctuation string\">`</span></span> type<span class=\"token punctuation\">.</span>\n    <span class=\"token keyword\">in</span> button\n    <span class=\"token keyword\">in</span> div\n    <span class=\"token keyword\">in</span> App</code></pre></div>\n<p>The following attempt would also not work:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>value <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>button<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span></code></pre></div>\n<p>We have attempted to set the event handler to <code class=\"language-text\">value + 1</code> which simply returns the result of the operation.\nReact will kindly warn us about this in the console:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">Warning<span class=\"token operator\">:</span> Expected <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">onClick</span><span class=\"token template-punctuation string\">`</span></span> listener to be a <span class=\"token keyword\">function</span><span class=\"token punctuation\">,</span> instead got a value <span class=\"token keyword\">of</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">number</span><span class=\"token template-punctuation string\">`</span></span> type<span class=\"token punctuation\">.</span></code></pre></div>\n<p>This attempt would not work either:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>value <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>button<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span></code></pre></div>\n<p>The event handler is not a function but a variable assignment, and React will once again issue a warning to the console.\nThis attempt is also flawed in the sense that we must never mutate state directly in React.</p>\n<p>What about the following:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'clicked the button'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n  button\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span></code></pre></div>\n<p>The message gets printed to the console *once when the component is rendered <strong>but nothing happens when we click the button*</strong>.\nWhy does this not work even when our event handler contains a function <code class=\"language-text\">console.log</code>?</p>\n<p>The issue here is that *our event handler is defined as a <strong>function call*</strong>\nwhich means that the event handler is assigned the returned value from the function, which in the case of <code class=\"language-text\">console.log</code> is <code class=\"language-text\">undefined</code>.</p>\n<p>The <code class=\"language-text\">console.log</code> function call gets executed when the component is rendered and for this reason, it gets printed once to the console.</p>\n<p>The following attempt is flawed as well:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token function\">setValue</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>button<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span></code></pre></div>\n<p>We have once again tried to set a function call as the event handler.\nThis does not work.\nThis particular attempt also causes another problem.\nLet's follow these steps to explain:</p>\n<ol>\n<li><code class=\"language-text\">button</code> component gets rendered</li>\n<li><code class=\"language-text\">setValue(0)</code> gets executed (because we rendered the component)</li>\n<li><code class=\"language-text\">button</code> component gets re-rendered (because we changed the <strong><em>state</em></strong>).</li>\n<li><code class=\"language-text\">setValue(0)</code> gets executed (because we rendered the component)</li>\n<li>This continues indefinitely 🐞</li>\n</ol>\n<p>Instead, executing a specific function with <em><code class=\"language-text\">onClick</code></em> should be written like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'clicked the button'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n  button\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span></code></pre></div>\n<p>Now the event handler is a function defined with the arrow function syntax: <em><code class=\"language-text\">() =&gt; console.log(&#39;clicked the button&#39;)</code></em>.\nNow our setup looks like this:</p>\n<ol>\n<li><code class=\"language-text\">button</code> component gets rendered</li>\n<li>reference to the arrow function gets stored in the <code class=\"language-text\">onClick</code> handler</li>\n</ol>\n<p>Now no function gets immediately called.\n<code class=\"language-text\">console.log</code> will only happen once the button is clicked.</p>\n<p>We can implement resetting the state in our application with this same technique:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setValue</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>button<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span></code></pre></div>\n<p>The event handler is now the function <em><code class=\"language-text\">() =&gt; setValue(0)</code></em>.</p>\n<p>Defining event handlers directly in the button is not ideal.</p>\n<p>You will often see event handlers defined in a separate place.\nBelow we set our arrow function to a variable <code class=\"language-text\">handleClick</code> that then gets assigned in the <code class=\"language-text\">onClick</code> handler.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>value<span class=\"token punctuation\">,</span> setValue<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleClick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'clicked the button'</span><span class=\"token punctuation\">)</span></span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span>value<span class=\"token punctuation\">}</span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>handleClick<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>button<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span></span>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Naturally, our event handler function can be composed of multiple commands.\nIn these cases, we use the longer curly brace syntax for arrow functions:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>value<span class=\"token punctuation\">,</span> setValue<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleClick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'clicked the button'</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token function\">setValue</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span></span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span>value<span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>handleClick<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>button<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>A function that returns a function</h3>\n<p>Another way to define an event handler is to use a <strong>function that returns a function</strong>.</p>\n<p>You probably won't need to use functions that return functions in any of the exercises in this course.\nIf the topic seems particularly confusing, you may jump to the <a href=\"#passing-event-handlers-to-child-components\">next section</a> and return to this later.</p>\n<p>Let's make the following changes to our code:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>value<span class=\"token punctuation\">,</span> setValue<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">hello</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handler</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello comp227'</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\"></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">return</span> handler</span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span></span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span>value<span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token function\">hello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>button<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The code functions correctly even though it looks complicated.</p>\n<p>The event handler is now set to a function call:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token function\">hello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>button<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span></code></pre></div>\n<p>Earlier on we stated that an event handler may not be a call to a function and that it has to be a function or a reference to a function.\n<strong><em>Why then does a function call work in this case?</em></strong></p>\n<p>When the component is rendered, the following function gets executed:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">hello</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handler</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello comp227'</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> handler\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The <em>return value</em> of the function is <strong>another function that is assigned to the <code class=\"language-text\">handler</code> variable</strong>.</p>\n<p>When React renders the line:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token function\">hello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>button<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span></code></pre></div>\n<p><em>It assigns the return value of <code class=\"language-text\">hello()</code> to the <code class=\"language-text\">onClick</code> attribute</em>.\nEssentially the line gets transformed into:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello comp227'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n  button\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span></code></pre></div>\n<p>Since the <code class=\"language-text\">hello</code> function returns a function, the event handler is now a function.</p>\n<p>😤 <strong><em>What's the point of this concept?</em></strong> 😤</p>\n<p>Let's change the code a tiny bit:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>value<span class=\"token punctuation\">,</span> setValue<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">hello</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">who</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handler</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">,</span> who<span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">}</span></span><span class=\"gatsby-highlight-code-line\"></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">return</span> handler</span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span></span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span>value<span class=\"token punctuation\">}</span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token function\">hello</span><span class=\"token punctuation\">(</span><span class=\"token string\">'comp227'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>button<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token function\">hello</span><span class=\"token punctuation\">(</span><span class=\"token string\">'you'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>button<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token function\">hello</span><span class=\"token punctuation\">(</span><span class=\"token string\">'function'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>button<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span></span>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Now the application has three buttons with event handlers defined by the <code class=\"language-text\">hello</code> function <em>that accepts a parameter</em>.</p>\n<p>The first button is defined as</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token function\">hello</span><span class=\"token punctuation\">(</span><span class=\"token string\">'comp227'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>button<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span></code></pre></div>\n<p>The event handler is created by <em>executing</em> the function call <code class=\"language-text\">hello(&#39;comp227&#39;)</code>.\nThe function call returns the function:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'comp227'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The second button is defined as:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token function\">hello</span><span class=\"token punctuation\">(</span><span class=\"token string\">'you'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>button<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span></code></pre></div>\n<p>The function call <code class=\"language-text\">hello(&#39;you&#39;)</code> that creates the event handler returns:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'you'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Both buttons get their individualized event handlers.</p>\n<p><strong>Functions returning functions can be utilized in defining generic functionality that can be customized with parameters.</strong>\nThe <code class=\"language-text\">hello</code> function that creates the event handlers can be thought of as a factory that produces customized event handlers meant for greeting users.</p>\n<p>Our current definition is slightly verbose:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">hello</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">who</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handler</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">,</span> who<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> handler\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Let's eliminate the helper variables and directly return the created function:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">hello</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">who</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">,</span> who<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Since our <code class=\"language-text\">hello</code> function is composed of a single return command, we can omit the curly braces and use the more compact syntax for arrow functions:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">hello</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">who</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n  <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">,</span> who<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>Lastly, let's write all of the arrows on the same line:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">hello</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">who</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">,</span> who<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>We can use the same trick to <strong><em>define event handlers that set the state of the component to a given value</em></strong>.\nLet's make the following changes to our code:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>value<span class=\"token punctuation\">,</span> setValue<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n  \n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">setToValue</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">newValue</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'value now'</span><span class=\"token punctuation\">,</span> newValue<span class=\"token punctuation\">)</span>  <span class=\"token comment\">// print the new value to console</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token function\">setValue</span><span class=\"token punctuation\">(</span>newValue<span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span></span>  \n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span>value<span class=\"token punctuation\">}</span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token function\">setToValue</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>thousand<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token function\">setToValue</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>reset<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token function\">setToValue</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>increment<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span></span>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>When the component is rendered, the <strong><em>thousand</em></strong> button is created:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token function\">setToValue</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>thousand<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span></code></pre></div>\n<p>The event handler is set to the return value of <code class=\"language-text\">setToValue(1000)</code> which is the following function:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'value now'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">setValue</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The increase button is declared as follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token function\">setToValue</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>increment<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span></code></pre></div>\n<p>The event handler is created by the function call <code class=\"language-text\">setToValue(value + 1)</code>\nwhich receives as its parameter the current value of the state variable <code class=\"language-text\">value</code> increased by one.\nIf the value of <code class=\"language-text\">value</code> was <em><code class=\"language-text\">10</code></em>, then the created event handler would be the function:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'value now'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">setValue</span><span class=\"token punctuation\">(</span><span class=\"token number\">11</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Using functions that return functions is not required to achieve this functionality.\nLet's return the <code class=\"language-text\">setToValue</code> function which is responsible for updating state into a normal function:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>value<span class=\"token punctuation\">,</span> setValue<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">setToValue</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">newValue</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'value now'</span><span class=\"token punctuation\">,</span> newValue<span class=\"token punctuation\">)</span>\n    <span class=\"token function\">setValue</span><span class=\"token punctuation\">(</span>newValue<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span>value<span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setToValue</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n        thousand\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setToValue</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n        reset\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setToValue</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n        increment\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>We can now define the event handler as a function that calls the <code class=\"language-text\">setToValue</code> function with an appropriate parameter.\nThe event handler for resetting the application state would be:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setToValue</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>reset<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span></code></pre></div>\n<p><em>Choosing between the two presented ways of defining your event handlers is mostly a matter of taste.</em></p>\n<h3>Passing Event Handlers to Child Components</h3>\n<p>Let's extract the button into its own component:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Button</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>handleClick<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n    <span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">}</span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>The component gets the event handler function from the <code class=\"language-text\">handleClick</code> prop and the text of the button from the <code class=\"language-text\">text</code> prop.\nLet's use the new component:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span>value<span class=\"token punctuation\">}</span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token operator\">&lt;</span>Button handleClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setToValue</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span> text<span class=\"token operator\">=</span><span class=\"token string\">\"thousand\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token operator\">&lt;</span>Button handleClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setToValue</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span> text<span class=\"token operator\">=</span><span class=\"token string\">\"reset\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token operator\">&lt;</span>Button handleClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setToValue</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span> text<span class=\"token operator\">=</span><span class=\"token string\">\"increment\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span></span>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Using the <code class=\"language-text\">Button</code> component is simple, although we have to make sure that we use the correct attribute names when passing props to the component.</p>\n<picture><img src=\"/static/7bad6c9559280534814bd3237f4f24e6/5a190/12e.png\" alt=\"using correct attribute names code screenshot\" srcset=\"/static/7bad6c9559280534814bd3237f4f24e6/772e8/12e.png 200w,\n/static/7bad6c9559280534814bd3237f4f24e6/e17e5/12e.png 400w,\n/static/7bad6c9559280534814bd3237f4f24e6/5a190/12e.png 800w,\n/static/7bad6c9559280534814bd3237f4f24e6/84bf8/12e.png 1162w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<h3>Do Not Define Components Within Components</h3>\n<p>Let's start displaying the value of the application in its <code class=\"language-text\">Display</code> component.</p>\n<p>We will change the application by defining a new component inside of the <code class=\"language-text\">App</code> component.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// This is the right place to define a component</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Button</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>handleClick<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n    <span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">}</span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>value<span class=\"token punctuation\">,</span> setValue<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">setToValue</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">newValue</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'value now'</span><span class=\"token punctuation\">,</span> newValue<span class=\"token punctuation\">)</span>\n    <span class=\"token function\">setValue</span><span class=\"token punctuation\">(</span>newValue<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// 🐞 Do not define components inside another component 🐞</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Display</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">props</span> <span class=\"token operator\">=></span> <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Display value<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>value<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Button handleClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setToValue</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span> text<span class=\"token operator\">=</span><span class=\"token string\">\"thousand\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Button handleClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setToValue</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span> text<span class=\"token operator\">=</span><span class=\"token string\">\"reset\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Button handleClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setToValue</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span> text<span class=\"token operator\">=</span><span class=\"token string\">\"increment\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The application still appears to work, but <strong>don't implement components like this!</strong> Never define components inside of other components.\nThe method provides no benefits and leads to many unpleasant problems.\nThe biggest problems are because React treats a component defined inside of another component as a new component in every render.\n<strong>This makes it impossible for React to optimize the component.</strong></p>\n<p>Let's instead move the <code class=\"language-text\">Display</code> component function to its correct place, which is <em>outside of the <code class=\"language-text\">App</code> component function</em>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Display</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">props</span> <span class=\"token operator\">=></span> <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Button</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>handleClick<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n    <span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">}</span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>value<span class=\"token punctuation\">,</span> setValue<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">setToValue</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">newValue</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'value now'</span><span class=\"token punctuation\">,</span> newValue<span class=\"token punctuation\">)</span>\n    <span class=\"token function\">setValue</span><span class=\"token punctuation\">(</span>newValue<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Display value<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>value<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Button handleClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setToValue</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span> text<span class=\"token operator\">=</span><span class=\"token string\">\"thousand\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Button handleClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setToValue</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span> text<span class=\"token operator\">=</span><span class=\"token string\">\"reset\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Button handleClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setToValue</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span> text<span class=\"token operator\">=</span><span class=\"token string\">\"increment\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>Useful Reading</h3>\n<p>The internet is full of React-related material.\nHowever, we use the new style of React for which a large majority of the material found online is outdated.</p>\n<p>You may find the following links useful:</p>\n<ul>\n<li>The <a href=\"https://react.dev/learn\">official React documentation</a> is worth checking out at some point,\nalthough most of it will become relevant only later on in the course.\nAlso, everything related to class-based components is irrelevant to us;</li>\n<li>\n<p>Some courses on <a href=\"https://egghead.io\">Egghead.io</a> like <a href=\"https://egghead.io/courses/start-learning-react\">Start Learning React</a> are of high quality,\nand the recently updated <a href=\"https://egghead.io/courses/the-beginner-s-guide-to-reactjs\">Beginner's Guide to React</a> is also relatively good;\nboth courses introduce concepts that will also be introduced later on in this course.</p>\n<ul>\n<li><strong>FYI</strong> The first one uses class components but the latter uses the new functional ones.</li>\n</ul>\n</li>\n</ul>\n<h3>Web developers pledge</h3>\n<p>As you are learning material, there are a lot of moving parts.\nWith this being mostly text, that means that getting examples and exercises to work can take a lot of time.\nBecause of this, we're going to introduce this <em>pledge</em> that you can take\nso that you make sure that you are on the correct path in your journey to becoming a better web developer.</p>\n<p>Here it is:</p>\n<blockquote>\n<p><em>Web Development is tricky, which is why I will use all the possible means to make it easier.</em></p>\n<p><em>I pledge to:</em></p>\n<ul>\n<li><em>Keep my browser's dev tools open all the time</em></li>\n<li>*Keep WebStorm's <strong>Problems</strong> tab open (<strong><code class=\"language-text\">Alt-6</code></strong>) and review it as well.</li>\n<li><em>Progress in tiny steps</em></li>\n<li><em>Use the debugger to help me better understand my code</em></li>\n<li><em>Stop adding features if my code is broken.</em></li>\n<li><em>Ensure that I do not have any files that are different colors in WebStorm for long</em></li>\n<li><em>Regularly push my code to GitHub and verify that it is uploaded</em></li>\n<li><em>Consider that I can rollback my changes when I go in small steps if I cannot find an issue.</em></li>\n<li><em>Formulate my questions on Discord <a href=\"/part0/general_info#how-to-ask-help-in-discord\">using this guide from part 0</a></em></li>\n</ul>\n</blockquote>\n</div>\n<div class=\"tasks\">\n<h3>Exercises 1.6-1.14</h3>\n<p>Submit your solutions to the exercises by first pushing your code to GitHub and then marking the completed exercises in Canvas.\nRegardless of your progress, <strong>you must push what code you at least every week as designated on Canvas</strong>.\nHowever, I would strongly recommend you <strong>push at the end of each working session you have.</strong>\nIf you know that you will be away for more than an hour, make it a habit to push your code.</p>\n<p>Once you have marked your submission as complete, <strong>you cannot submit more exercises</strong>.</p>\n<p><em>Some of the exercises work on the same application.\nIn these cases, because you have the file watcher you will commit regularly.</em>\nHowever, when you finish an exercise, you will amend your previous commit, which you can do in WebStorm or via the command line.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> commit -m <span class=\"token string\">\"Completed Exercise #XX.YY\"</span> --allow-empty</code></pre></div>\n<p>For those exercises that you feel end up being the completed exercise, you will write the name of the exercise and its number as the commit message.\nSo for example, if you finished Exercise 1.6, you would commit your empty message with the commit message to <code class=\"language-text\">Completed Exercise 1.6</code>.</p>\n<p>Any mistakes here will impact your grade.</p>\n<blockquote>\n<p><strong>Pertinent:</strong> ensure you are at the base folder of the correct repository\n<a href=\"/part1/introduction_to_react#starting-development\">when using <code class=\"language-text\">vite</code></a>\nto create the <em>studytracker</em> and <em>jokes</em> apps.</p>\n<p>In some situations you may also have to run the command below from the root of the project:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">rm</span> -rf node_modules/ <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">npm</span> i</code></pre></div>\n<blockquote>\n<p><strong>Also Remember:</strong> If and <em>when</em> you encounter an error message</p>\n<blockquote>\n<p><em><code class=\"language-text\">Objects are not valid as a React child</code></em></p>\n</blockquote>\n<p>Remember what was discussed <a href=\"/part1/introduction_to_react#do-not-render-objects\">in part 1 on how to fix it</a>.</p>\n</blockquote>\n</blockquote>\n<h4>1.6: studytracker Step 1</h4>\n<blockquote>\n<p><strong>Pertinent:</strong> Notice how this is labeled <em>studytracker</em>?\nThis means it should follow the rules as outlined in <a href=\"/part1/introduction_to_react#exercises-1-1-1-2\">part 1 related to folders</a></p>\n</blockquote>\n<p>Let's figure out a way to devise a web application that helps track your self-reported feelings on whether or not you had a good study day.\nThere are only three options: <strong><em>yeah</em></strong>, <strong><em>kinda</em></strong>, and <strong><em>nah</em></strong>.</p>\n<p>The application must display the total number of collected samples for each response.\nYour final application could look like this:</p>\n<picture><img src=\"/static/14ff6aba4f4527f9ac4b12bb6f883e80/5a190/13e.png\" alt=\"screenshot of study day options\" srcset=\"/static/14ff6aba4f4527f9ac4b12bb6f883e80/772e8/13e.png 200w,\n/static/14ff6aba4f4527f9ac4b12bb6f883e80/e17e5/13e.png 400w,\n/static/14ff6aba4f4527f9ac4b12bb6f883e80/5a190/13e.png 800w,\n/static/14ff6aba4f4527f9ac4b12bb6f883e80/bb2fd/13e.png 1058w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Notice that your application needs to work only during a single browser session.\nOnce you refresh the page, the collected data is allowed to disappear.</p>\n<p>It is advisable to use the same structure that is used in the material and previous exercise.\nFile <em>main.jsx</em> should have.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> ReactDOM <span class=\"token keyword\">from</span> <span class=\"token string\">'react-dom/client'</span>\n\n<span class=\"token keyword\">import</span> App <span class=\"token keyword\">from</span> <span class=\"token string\">'./App'</span>\n\nReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">createRoot</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>App <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>You can use the code below as a starting point for <em>App.jsx</em>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useState <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// save clicks of each button to its own state</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>yeah<span class=\"token punctuation\">,</span> setYeah<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>kinda<span class=\"token punctuation\">,</span> setKinda<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>nah<span class=\"token punctuation\">,</span> setNah<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      code here\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> App</code></pre></div>\n<blockquote>\n<p>Don't forget your empty commit with the message <code class=\"language-text\">Completed Exercise 1.6</code> once you feel you have completed this exercise!</p>\n</blockquote>\n<h4>1.7: studytracker Step 2</h4>\n<p>Expand your application so that it shows more statistics about the gathered data.\nThe application should show:</p>\n<ul>\n<li>the total number of days recorded (total number of times the buttons were pressed),</li>\n<li>the average score using this scoring system - (nah: -1, kinda: 0, yeah: 1)</li>\n<li>the percentage of days that the user clicked <strong><em>yeah</em></strong>.</li>\n</ul>\n<picture><img src=\"/static/b4b8dd31b4c36a986408d8b471138af9/5a190/14e.png\" alt=\"average and percentage good screenshot feedback\" srcset=\"/static/b4b8dd31b4c36a986408d8b471138af9/772e8/14e.png 200w,\n/static/b4b8dd31b4c36a986408d8b471138af9/e17e5/14e.png 400w,\n/static/b4b8dd31b4c36a986408d8b471138af9/5a190/14e.png 800w,\n/static/b4b8dd31b4c36a986408d8b471138af9/dd104/14e.png 1064w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<blockquote>\n<p>Don't forget your empty commit with the message <code class=\"language-text\">Completed Exercise 1.7</code> once you feel you have completed this exercise!</p>\n</blockquote>\n<h4>1.8: studytracker Step 3</h4>\n<p>Refactor your application so that displaying the statistics is extracted into its own <code class=\"language-text\">Statistics</code> component.\nThe state of the application should remain in the <code class=\"language-text\">App</code> root component.</p>\n<p>Remember that components should not be defined inside other components:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// a proper place to define a component</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Statistics</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>yeah<span class=\"token punctuation\">,</span> setYeah<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>kinda<span class=\"token punctuation\">,</span> setKinda<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>nah<span class=\"token punctuation\">,</span> setNah<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// do not define a component within another component</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Statistics</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<blockquote>\n<p>Don't forget your empty commit with the message <code class=\"language-text\">Completed Exercise 1.8</code> once you feel you have completed this exercise!\nI will not provide any further reminders</p>\n</blockquote>\n<h4>1.9: studytracker Step 4</h4>\n<p>Change your application to display the statistics only once a response has been gathered.</p>\n<picture><img src=\"/static/17218909a613a1540cdb64cfa5cd1751/5a190/15e.png\" alt=\"no answers recorded yet text screenshot\" srcset=\"/static/17218909a613a1540cdb64cfa5cd1751/772e8/15e.png 200w,\n/static/17218909a613a1540cdb64cfa5cd1751/e17e5/15e.png 400w,\n/static/17218909a613a1540cdb64cfa5cd1751/5a190/15e.png 800w,\n/static/17218909a613a1540cdb64cfa5cd1751/25c1c/15e.png 1047w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<h4>1.10: studytracker Step 5</h4>\n<p>Let's continue refactoring the application.\nExtract the following two components:</p>\n<ul>\n<li><code class=\"language-text\">Button</code> for defining the buttons used for submitting mood</li>\n<li><code class=\"language-text\">StatisticLine</code> for displaying a single statistic, e.g. the average score.</li>\n</ul>\n<p>To be clear: the <code class=\"language-text\">StatisticLine</code> component always displays a single statistic,\nmeaning that the application uses multiple components for rendering all of the statistics:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Statistics</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/// ...</span>\n  <span class=\"token keyword\">return</span><span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>StatisticLine text<span class=\"token operator\">=</span><span class=\"token string\">\"yeah\"</span> value <span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token operator\">...</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>StatisticLine text<span class=\"token operator\">=</span><span class=\"token string\">\"kinda\"</span> value <span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token operator\">...</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>StatisticLine text<span class=\"token operator\">=</span><span class=\"token string\">\"nah\"</span> value <span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token operator\">...</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token comment\">// ...</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The application's state should still be kept in the root <code class=\"language-text\">App</code> component.</p>\n<h4>1.11*: studytracker Step 6</h4>\n<blockquote>\n<p><em>Why is there a star/asterisk on the exercise? See <a href=\"/part0/general_info#taking-the-course\">here</a> for the explanation.</em></p>\n</blockquote>\n<p>Display the statistics in an HTML <a href=\"https://developer.mozilla.org/en-US/docs/Learn/HTML/Tables/Basics\">table</a>,\nso that your application looks roughly like this:</p>\n<picture><img src=\"/static/82090fe34cac976db600c953dbe7eebc/5a190/16e.png\" alt=\"screenshot of statistics table\" srcset=\"/static/82090fe34cac976db600c953dbe7eebc/772e8/16e.png 200w,\n/static/82090fe34cac976db600c953dbe7eebc/e17e5/16e.png 400w,\n/static/82090fe34cac976db600c953dbe7eebc/5a190/16e.png 800w,\n/static/82090fe34cac976db600c953dbe7eebc/77672/16e.png 1060w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Remember to keep your console open at all times.\nIf you see this warning in your console:</p>\n<picture><img src=\"/static/5b50b581ff9d74abb2714bc8c248486f/7fee5/17a.png\" alt=\"console warning\" srcset=\"/static/5b50b581ff9d74abb2714bc8c248486f/772e8/17a.png 200w,\n/static/5b50b581ff9d74abb2714bc8c248486f/e17e5/17a.png 400w,\n/static/5b50b581ff9d74abb2714bc8c248486f/7fee5/17a.png 781w\" sizes=\"(max-width: 781px) 100vw, 781px\"></picture>\n<p>Then perform the necessary actions to make the warning disappear.\nTry pasting the error message into a search engine if you get stuck.</p>\n<p><em>Typical source of an error <code class=\"language-text\">Unchecked runtime.lastError: Could not establish connection.\nReceiving end does not exist.</code> is a Chrome extension.\nTry going to <code class=\"language-text\">chrome://extensions/</code> and try disabling them one by one and refreshing React app page; the error should eventually disappear.</em></p>\n<p><strong>Make sure that from now on you don't see any warnings in your console!</strong></p>\n<h4>1.12*: jokes Step 1</h4>\n<p>The world of software engineering is filled with <a href=\"https://www.devtopics.com/best-programming-jokes/\">bad jokes</a>.</p>\n<p>Expand the following application by adding a button that can be clicked to display a <em>random</em> joke from the field of software engineering:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useState <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> jokes <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token string\">'How many programmers does it take to change a light bulb? None - That is a hardware problem'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'All programmers are playwrights, and all computers are lousy actors.'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'The generation of random numbers is too important to be left to chance.'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'I just saw my life flash before my eyes and all I could see was a close tag'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'The computer is mightier than the pen, the sword, and usually, the programmer.'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'A programmer had a problem. He thought to himself, \"I know, I’ll solve it with threads!\" has Now problems. two he'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'!false is funny because it is true'</span>\n  <span class=\"token punctuation\">]</span>\n   \n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>selected<span class=\"token punctuation\">,</span> setSelected<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span>jokes<span class=\"token punctuation\">[</span>selected<span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> App</code></pre></div>\n<p>The contents of <em>main.jsx</em> are the same as in previous exercises.</p>\n<p>Find out how to generate random numbers in JavaScript, eg.\nvia a search engine or on <a href=\"https://developer.mozilla.org\">Mozilla Developer Network</a>.\nRemember that you can test generating random numbers e.g. straight in the console of your browser.</p>\n<p>Your finished application could look something like this:</p>\n<picture><img src=\"/static/ce40e479ccccda037a5edf2f07dfab97/5a190/18a.png\" alt=\"random joke with the next joke button\" srcset=\"/static/ce40e479ccccda037a5edf2f07dfab97/772e8/18a.png 200w,\n/static/ce40e479ccccda037a5edf2f07dfab97/e17e5/18a.png 400w,\n/static/ce40e479ccccda037a5edf2f07dfab97/5a190/18a.png 800w,\n/static/ce40e479ccccda037a5edf2f07dfab97/97655/18a.png 819w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p><strong>WARNING</strong> Make sure that when you call <code class=\"language-text\">vite</code>, you are inside of your repo's base folder - not inside of your other folders (like <em>reading</em>!)!</p>\n<h4>1.13*: jokes Step 2</h4>\n<p>Expand your application so that you can vote for the displayed joke.</p>\n<picture><img src=\"/static/b6c4342ac255192d7ce03383f06db1ea/5a190/19a.png\" alt=\"joke app with the votes button added\" srcset=\"/static/b6c4342ac255192d7ce03383f06db1ea/772e8/19a.png 200w,\n/static/b6c4342ac255192d7ce03383f06db1ea/e17e5/19a.png 400w,\n/static/b6c4342ac255192d7ce03383f06db1ea/5a190/19a.png 800w,\n/static/b6c4342ac255192d7ce03383f06db1ea/97655/19a.png 819w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<blockquote>\n<p><strong>Pertinent:</strong> store the votes of each joke into an array or object in the component's state.\nRemember that the correct way of updating state stored in complex data structures like objects and arrays is to make a copy of the state.</p>\n<p>You can create a copy of an object like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> points <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token number\">0</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token operator\">:</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> copy <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>points <span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// increment the property 2 value by one</span>\ncopy<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>     </code></pre></div>\n<p>OR a copy of an array like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> points <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">const</span> copy <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>points<span class=\"token punctuation\">]</span>\n<span class=\"token comment\">// increment the value in position 2 by one</span>\ncopy<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>     </code></pre></div>\n<p>Using an array might be the simpler choice in this case.\nSearching the Internet will provide you with lots of hints on how to\n<a href=\"https://stackoverflow.com/questions/20222501/how-to-create-a-zero-filled-javascript-array-of-arbitrary-length/22209781\">create a zero-filled array of the desired length</a>.</p>\n</blockquote>\n<h4>1.14*: jokes Step 3</h4>\n<p>Now implement the final version of the application that displays the joke with the largest number of votes:</p>\n<picture><img src=\"/static/5e4eacb138854bff69dd2b905395cc5a/5a190/20a.png\" alt=\"joke with the largest number of votes\" srcset=\"/static/5e4eacb138854bff69dd2b905395cc5a/772e8/20a.png 200w,\n/static/5e4eacb138854bff69dd2b905395cc5a/e17e5/20a.png 400w,\n/static/5e4eacb138854bff69dd2b905395cc5a/5a190/20a.png 800w,\n/static/5e4eacb138854bff69dd2b905395cc5a/c1b63/20a.png 1200w,\n/static/5e4eacb138854bff69dd2b905395cc5a/0f529/20a.png 1259w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>If multiple jokes are tied for first place it is sufficient to just show one of them.</p>\n<p>This was the last exercise for this part of the course and it's time to push your code to GitHub if you haven't already and mark the exercises that were completed on Canvas.</p>\n</div>","frontmatter":{"mainImage":{"publicURL":"/static/83f1c8a7795e9e8eaffaec29b1ee79b1/part-1.svg"},"part":1,"letter":"d","lang":"en"}}},"pageContext":{"part":1,"letter":"d","lang":"en"}}}