{"componentChunkName":"component---src-templates-content-template-js","path":"/part1/introduction_to_react","result":{"data":{"markdownRemark":{"html":"<div class=\"content\">\n<p>We will now start getting familiar with probably the most important topic of this course, namely the <a href=\"https://react.dev/\">React</a> library.\nLet's start by making a simple React application as well as getting to know the core concepts of React.</p>\n<p>The easiest way to get started by far is by using a tool called\n<a href=\"https://vitejs.dev/\">Vite</a>.</p>\n<p>First, visit the classroom link: <a href=\"http://go.djosv.com/227lab1\">http://go.djosv.com/227lab1</a>\nand use the steps outlined <a href=\"/part0/configuring_your_machine_for_this_course\">in part 0c</a> to\n<a href=\"https://imgur.com/5Tv7mVM\">accept</a>, <a href=\"https://imgur.com/UDQXB6V\">download</a> and set up the repository from within WebStorm.\nThe only different step in our <a href=\"/part0/configuring_your_machine_for_this_course#8-connect-webstorm-with-github\">high-level checklist</a>\nis that in step 3 we need to do is say <strong><em>File->New Project from Version Control</em></strong> from within WebStorm to open the URL prompt.</p>\n<p>I would also make sure to check the option <strong>trust projects</strong> presented in the first window so that you don't have to keep doing so.\n<picture><img src=\"/static/6903de9eda70006b2862f3de840a4d93/9f21b/trust_projects.png\" alt=\"clicking trust projects\" srcset=\"/static/6903de9eda70006b2862f3de840a4d93/772e8/trust_projects.png 200w,\n/static/6903de9eda70006b2862f3de840a4d93/e17e5/trust_projects.png 400w,\n/static/6903de9eda70006b2862f3de840a4d93/9f21b/trust_projects.png 706w\" sizes=\"(max-width: 706px) 100vw, 706px\"></picture></p>\n<p>Lastly, I would choose the option <strong><em>New Window</em></strong> and check <strong><em>don't ask again</em></strong> in the next window.\nUsing a new window with the project will provide you with a new window for every project.\nHaving a new window is nice for having a separate area but not being confined to having only one project open at a time.\nI liked using attach, which puts all the repos in a single folder.\nHowever, this creates more issues in particular views like the git view as it shows you all the same files and you have to keep making sure you have the right path.\n<picture><img src=\"/static/573fa9bd5a794b9e78a8feaefdba5458/41d3b/attach_dont_ask.png\" alt=\"new window and don&#x27;t ask again\" srcset=\"/static/573fa9bd5a794b9e78a8feaefdba5458/772e8/attach_dont_ask.png 200w,\n/static/573fa9bd5a794b9e78a8feaefdba5458/e17e5/attach_dont_ask.png 400w,\n/static/573fa9bd5a794b9e78a8feaefdba5458/41d3b/attach_dont_ask.png 774w\" sizes=\"(max-width: 774px) 100vw, 774px\"></picture></p>\n<h4>Importing File Watcher Settings</h4>\n<p>One thing we'll need to remember to do is to import our file watcher settings that we created\n<a href=\"/part0/configuring_your_machine_for_this_course#9-additional-webstorm-setup\">when we were configuring our WebStorm</a></p>\n<ul>\n<li>Open up WebStorm's Settings again, then go to <em>Tools->File Watchers</em>, and click the <em>Import</em> icon.</li>\n<li>Select the watchers file that you had previously exported</li>\n<li>Once you locate the file, click <strong><em>OK</em></strong></li>\n<li>You should see <em>COMP 227 Git Watcher</em> appear enabled</li>\n<li>Click <strong><em>OK</em></strong> to close settings.</li>\n</ul>\n<p>Some of the images prepared for this class use the classic UI, which you can switch to with the settings icon near the close button.</p>\n<picture><img src=\"/static/56f74a37bc59c57714cb3108ec8b8106/267f6/classic_ui.png\" alt=\"Classic UI location in WebStorm\" srcset=\"/static/56f74a37bc59c57714cb3108ec8b8106/772e8/classic_ui.png 200w,\n/static/56f74a37bc59c57714cb3108ec8b8106/e17e5/classic_ui.png 400w,\n/static/56f74a37bc59c57714cb3108ec8b8106/267f6/classic_ui.png 513w\" sizes=\"(max-width: 513px) 100vw, 513px\"></picture>\n<p>You can click on the project bar in the upper right</p>\n<picture><img src=\"/static/792c9b951fb9976e401ad01003ed1a05/38cea/webstorm_project.png\" alt=\"project bar in the upper right\" srcset=\"/static/792c9b951fb9976e401ad01003ed1a05/772e8/webstorm_project.png 200w,\n/static/792c9b951fb9976e401ad01003ed1a05/e17e5/webstorm_project.png 400w,\n/static/792c9b951fb9976e401ad01003ed1a05/38cea/webstorm_project.png 678w\" sizes=\"(max-width: 678px) 100vw, 678px\"></picture>\n<p>This is what it looks like in the modern UI</p>\n<picture><img src=\"/static/245973e9af6bb01b15e9fa9366a33466/01267/webstorm_project_new_ui.png\" alt=\"project bar icon in modern WebStorm UI\" srcset=\"/static/245973e9af6bb01b15e9fa9366a33466/772e8/webstorm_project_new_ui.png 200w,\n/static/245973e9af6bb01b15e9fa9366a33466/e17e5/webstorm_project_new_ui.png 400w,\n/static/245973e9af6bb01b15e9fa9366a33466/01267/webstorm_project_new_ui.png 713w\" sizes=\"(max-width: 713px) 100vw, 713px\"></picture>\n<h3>Starting Development</h3>\n<p>to return to see that you should now have two sets of folders: <em>lab0</em> and <em>lab1</em>.</p>\n<p>You can now right-click on lab1 and select <strong>Open in->Terminal</strong>.\nIf you did not review <a href=\"/part0/configuring_your_machine_for_this_course#some-git-command-line-tools\">part 0d's coverage of git commands and the terminal</a>,\nit might make sense to do so now.</p>\n<p>With your terminal now open you can type the following:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> create vite@latest reading -- --template react\n\n<span class=\"token builtin class-name\">cd</span> reading\n<span class=\"token function\">npm</span> i</code></pre></div>\n<p>Say yes to any prompts that appear asking you to update or that ask you to allow access.</p>\n<p>Once you are in the reading directory, start our application by typing:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> run dev</code></pre></div>\n<p>The console says that the application has started on localhost port 5173, i.e. the address <a href=\"http://localhost:5173/\">http://localhost:5173/</a>.</p>\n<blockquote>\n<p>Vite uses the port 5173 <a href=\"https://vitejs.dev/config/server-options.html#server-port\">by default</a>.\nIf it's not available, Vite will use the next free port number.</p>\n</blockquote>\n<picture><img src=\"/static/badb58b55a9ccdb1ebb7a5b063fe9b73/5a190/1-vite1.png\" alt=\"terminal showing vite launched in 5173\" srcset=\"/static/badb58b55a9ccdb1ebb7a5b063fe9b73/772e8/1-vite1.png 200w,\n/static/badb58b55a9ccdb1ebb7a5b063fe9b73/e17e5/1-vite1.png 400w,\n/static/badb58b55a9ccdb1ebb7a5b063fe9b73/5a190/1-vite1.png 800w,\n/static/badb58b55a9ccdb1ebb7a5b063fe9b73/8cdda/1-vite1.png 1168w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Your default browser may have launched automatically.\nIf not, click on the localhost address in your terminal.\nOnce the browser opens, open the console (<strong><em>Ctrl-Shift-I</em></strong>) <strong>immediately</strong>.\nAlso, open a text editor so that you can view the code as well as the webpage at the same time on the screen:</p>\n<picture><img src=\"/static/76e3563219b0968cda36c98be14d6417/5a190/1-vite4.png\" alt=\"code and browser side-by-side\" srcset=\"/static/76e3563219b0968cda36c98be14d6417/772e8/1-vite4.png 200w,\n/static/76e3563219b0968cda36c98be14d6417/e17e5/1-vite4.png 400w,\n/static/76e3563219b0968cda36c98be14d6417/5a190/1-vite4.png 800w,\n/static/76e3563219b0968cda36c98be14d6417/c1b63/1-vite4.png 1200w,\n/static/76e3563219b0968cda36c98be14d6417/29007/1-vite4.png 1600w,\n/static/76e3563219b0968cda36c98be14d6417/e216b/1-vite4.png 1904w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>You can close <em>lab0</em> and close the <em>README.md</em> from that lab that we had from the previous folder.\nBecause we may be working on multiple projects, you'll need to make sure that you are editing the correct file, which you can check in the lower-left breadcrumb trail.\n<em>You'll also need to add the files to git for this reading, this will be part of the process to get credit for the course</em></p>\n<p>The code of the application resides in the <em>reading/src</em> folder.\nLet's simplify the default code such that the contents of <em>main.jsx</em> looks like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> ReactDOM <span class=\"token keyword\">from</span> <span class=\"token string\">'react-dom/client'</span>\n\n<span class=\"token keyword\">import</span> App <span class=\"token keyword\">from</span> <span class=\"token string\">'./App'</span>\n\nReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">createRoot</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>App <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>and <em>App.jsx</em> looks like this</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span>Hello <span class=\"token constant\">COMP</span> <span class=\"token number\">227</span><span class=\"token operator\">!</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> App</code></pre></div>\n<p>You may delete the files:</p>\n<ul>\n<li><em>src/App.css</em></li>\n<li><em>src/assets/react.svg</em></li>\n<li><em>src/index.css</em></li>\n</ul>\n<p>as they are not needed in our application right now.\nIf you use WebStorm's safe delete feature, you should not see any warnings about the files being used.</p>\n<p>If you do see warnings, then you may want to read <a href=\"/part1/a_more_complex_state_debugging_react_apps/#old-react\">this future section about react version differences</a>.</p>\n<h4>Test our file watcher workflow</h4>\n<p>Remember that as we mentioned before, the goal should not just be to read the material, but to follow along with the material and to perform the steps as you go.</p>\n<p>Remember how we used the File Watchers previously?\nWe're going to make sure that process is working,\nas any time that we add files or use <code class=\"language-text\">create@vite-latest</code> app,\nwe need to make sure that the files we created continue to change back to being white in WebStorm's Project Explorer Window.\nThis should happen automatically when we edit our code.</p>\n<p>Please open up <em>main.jsx</em>, if it's not open already, and ensure that all of the text is white and that you see a git repo in the upper left.</p>\n<blockquote>\n<p><em>If you see that all of the files have green or blue text in WebStorm, for a long time,\nThis means that our file watcher may be working correctly.\nDepending on your configuration, you may get warnings about the line endings.\nThis is safe to ignore.</em></p>\n</blockquote>\n<picture><img src=\"/static/216f25abd4ff696a4d3ad05133f395ca/5a190/git_add_green.png\" alt=\"WebStorm showing files added as green\" srcset=\"/static/216f25abd4ff696a4d3ad05133f395ca/772e8/git_add_green.png 200w,\n/static/216f25abd4ff696a4d3ad05133f395ca/e17e5/git_add_green.png 400w,\n/static/216f25abd4ff696a4d3ad05133f395ca/5a190/git_add_green.png 800w,\n/static/216f25abd4ff696a4d3ad05133f395ca/c1b63/git_add_green.png 1200w,\n/static/216f25abd4ff696a4d3ad05133f395ca/29007/git_add_green.png 1600w,\n/static/216f25abd4ff696a4d3ad05133f395ca/26c3a/git_add_green.png 1907w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>If the files do not change back to white and you feel as though your file watchers are working, if you type</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> status</code></pre></div>\n<p>If your file watcher is working correctly, you'll see that the files have turned white again.</p>\n<picture><img src=\"/static/10a8efcc9860d72b5bd3b3243dc07013/5a190/git_commit_white.png\" alt=\"WebStorm showing files added as white\" srcset=\"/static/10a8efcc9860d72b5bd3b3243dc07013/772e8/git_commit_white.png 200w,\n/static/10a8efcc9860d72b5bd3b3243dc07013/e17e5/git_commit_white.png 400w,\n/static/10a8efcc9860d72b5bd3b3243dc07013/5a190/git_commit_white.png 800w,\n/static/10a8efcc9860d72b5bd3b3243dc07013/c1b63/git_commit_white.png 1200w,\n/static/10a8efcc9860d72b5bd3b3243dc07013/29007/git_commit_white.png 1600w,\n/static/10a8efcc9860d72b5bd3b3243dc07013/26c3a/git_commit_white.png 1907w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>For this class, you should not ever really have files in Red, Green or any color in WebStorm for very long, since this will prevent our use of our Auto-Save feature and the File Watchers.\n<strong><em>To test that this is working, please go to *App.jsx</em> and change the word <em><code class=\"language-text\">Hello</code></em> to <em><code class=\"language-text\">Hola</code></em>.*</strong>\nWhen you do this, you may notice that <em>App.jsx</em> turns blue which means that there are changes that have yet to be committed.</p>\n<picture><img src=\"/static/70728633f19851324dc808741457794a/5a190/git_changed_blue.png\" alt=\"WebStorm showing files changed\" srcset=\"/static/70728633f19851324dc808741457794a/772e8/git_changed_blue.png 200w,\n/static/70728633f19851324dc808741457794a/e17e5/git_changed_blue.png 400w,\n/static/70728633f19851324dc808741457794a/5a190/git_changed_blue.png 800w,\n/static/70728633f19851324dc808741457794a/94829/git_changed_blue.png 878w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>However, the file will not stay blue for long, and our workflow automation will be triggered, which will cause the file to be white again.</p>\n<p>The last thing I wanted to point your attention to is to be aware of a green arrow near our main branch at the top.\nYou should not have one at this moment.\nIf you do, then you may not have setup file watchers correctly.\nYou can create that arrow by going to terminal, and creating an empty commit message, which I'll have you do everytime you complete the exercises.</p>\n<p>We'll use the empty commits to give us a non-standard way of leaving notes in our code.\nGo to terminal and write this line.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> commit --allow-empty -m <span class=\"token string\">\"Practicing an empty commit while reading part 1a\"</span></code></pre></div>\n<p>After typing that line, do not make any changes in your JSX file, and go back to webstorm, and if you type another git status, you should now see this green arrow appear.</p>\n<picture><img src=\"/static/fa52c6b18b53008ebe7f7c0341ecd493/5a190/git_commit_needs_push.png\" alt=\"WebStorm showing main needs to push changes\" srcset=\"/static/fa52c6b18b53008ebe7f7c0341ecd493/772e8/git_commit_needs_push.png 200w,\n/static/fa52c6b18b53008ebe7f7c0341ecd493/e17e5/git_commit_needs_push.png 400w,\n/static/fa52c6b18b53008ebe7f7c0341ecd493/5a190/git_commit_needs_push.png 800w,\n/static/fa52c6b18b53008ebe7f7c0341ecd493/f79fa/git_commit_needs_push.png 940w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Webstorm uses the arrows to let you know that your github repo and local computer are out of sync.\nThe green arrow can also happen if you add new files to your project.</p>\n<p>To make the arrow go away, we'll <strong>push</strong> the empty commit, which we can do via the terminal or WebStorm.\nIn Terminal, you can just type:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> push</code></pre></div>\n<p>Once you complete this command, you'll notice that the <em>main</em> branch no longer has the green arrow next to it.\nYou can also ensure that your changes are on GitHub (including your empty commit message)\nTo ensure that you are working through the material correctly, you will message me directly once you finish this to confirm that you are following the steps.</p>\n<blockquote>\n<p><strong><em>If you use more than one computer, you'll need to make sure that you pull at the beginning of the session and push at the end</em></strong>.\nNot following this process will most likely result in you needing to meet with me to fix things.\n<strong><em>Let's avoid having unnecessary meetings and promise to follow these instructions</em></strong>.</p>\n</blockquote>\n<h3>create-react-app</h3>\n<p>An alternative to Vite is the older generation tool <a href=\"https://github.com/facebookincubator/create-react-app\"><em>create-react-app</em></a>.\nThis tool was used in previous versions of the course.</p>\n<p>Here are some of the most notable differences</p>\n<table>\n<thead>\n<tr>\n<th>Difference</th>\n<th>Vite</th>\n<th>create-react-app (AKA <strong><em>CRA</em></strong>)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Application Startup filename</td>\n<td><em>main.jsx</em></td>\n<td><em>index.js</em></td>\n</tr>\n<tr>\n<td>Filename for <code class=\"language-text\">&lt;App /&gt;</code> component</td>\n<td><em>App.jsx</em></td>\n<td><em>App.js</em></td>\n</tr>\n<tr>\n<td>command to launch application</td>\n<td><code class=\"language-text\">npm run dev</code></td>\n<td><code class=\"language-text\">npm start</code></td>\n</tr>\n</tbody>\n</table>\n<p>This year the course has been updated to Vite,\nthough some parts may still use the application base created with <code class=\"language-text\">create-react-app</code>.</p>\n<h3>Component</h3>\n<p><em>App.jsx</em> now defines a <a href=\"https://react.dev/learn/your-first-component\">React component</a> with the name <code class=\"language-text\">App</code>.\nThe command on the final line of <em>main.jsx</em></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">createRoot</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>App <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>renders its contents into the file <em>public/index.html</em>, inside a <code class=\"language-text\">div</code> element that has the <code class=\"language-text\">id</code> value <code class=\"language-text\">&#39;root&#39;</code>.</p>\n<blockquote>\n<p><strong>FYI</strong>: By default, the file <em>public/index.html</em> doesn't contain any HTML markup that is visible to us in the browser.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token doctype\">&lt;!doctype html></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>en<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>UTF-8<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>icon<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>image/svg+xml<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>/vite.svg<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>viewport<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>width=device-width, initial-scale=1.0<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>Vite + React<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>root<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>module<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>/src/main.jsx<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>You can try adding some HTML to the file.\nHowever, when using React, all content that needs to be rendered is usually defined as React components.</p>\n</blockquote>\n<p>Let's take a closer look at the code defining the component:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span>Hola <span class=\"token constant\">COMP</span> <span class=\"token number\">227</span><span class=\"token operator\">!</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>As you probably guessed, the component will be rendered as a <code class=\"language-text\">div</code> tag, which wraps a <code class=\"language-text\">p</code> tag containing the text <code class=\"language-text\">Hola COMP 227!</code>.</p>\n<p>Technically the component is defined as a JavaScript function.\nThe following is a function (which does not receive any parameters):</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span>Hola <span class=\"token constant\">COMP</span> <span class=\"token number\">227</span><span class=\"token operator\">!</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>The function is then assigned to a constant variable <code class=\"language-text\">App</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> App <span class=\"token operator\">=</span> <span class=\"token operator\">...</span></code></pre></div>\n<p>There are a few ways to define functions in JavaScript.\nHere we will use <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions\"><em>arrow functions</em></a>,\nwhich are described in a newer version of JavaScript known as <a href=\"http://es6-features.org/#Constants\">ECMAScript 6</a>, also called ES6.</p>\n<p>Because the function consists of only a single expression we have used a shorthand, which represents this piece of code:</p>\n<table>\n<thead>\n<tr>\n<th>original shorthand</th>\n<th>long form</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><pre><code class=\"languagejs\">const App = () => (<br><br>  &#x3C;div><br>    &#x3C;p>Hola COMP 227!&#x3C;/p><br>  &#x3C;/div><br><br>)<br></td>\n<td><pre><code class=\"languagejs\">const App = () => {<br>  return (<br>    &#x3C;div><br>      &#x3C;p>Hola COMP 227!&#x3C;/p><br>    &#x3C;/div><br>  )<br>}</td>\n</tr>\n</tbody>\n</table>\n<p><strong>Notice the return and curly braces instead of parenthesis</strong>!\nIn other words, the function returns the value of the expression.</p>\n<p>The function defining the component may contain any kind of JavaScript code.\nModify your component to be as follows and observe what happens in the developer tool's console: (I'll refer to this as the <strong>console</strong> from here on out.)</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello from the App component'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span>Hola <span class=\"token constant\">COMP</span> <span class=\"token number\">227</span><span class=\"token operator\">!</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> App</code></pre></div>\n<p>and observe what happens in the browser console</p>\n<picture><img src=\"/static/27a6d72b2f595d11803ac66435d50290/5a190/30.png\" alt=\"code showing ide, browser and console dev tools\" srcset=\"/static/27a6d72b2f595d11803ac66435d50290/772e8/30.png 200w,\n/static/27a6d72b2f595d11803ac66435d50290/e17e5/30.png 400w,\n/static/27a6d72b2f595d11803ac66435d50290/5a190/30.png 800w,\n/static/27a6d72b2f595d11803ac66435d50290/c1b63/30.png 1200w,\n/static/27a6d72b2f595d11803ac66435d50290/29007/30.png 1600w,\n/static/27a6d72b2f595d11803ac66435d50290/fa60d/30.png 1792w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>The first rule of frontend web development:</p>\n<blockquote>\n<p><em>keep the console open all the time</em></p>\n</blockquote>\n<p>Let us repeat this together: <em>I promise to keep the console open all the time</em> when you are doing web development.</p>\n<p>It is also possible to render dynamic content inside of a component.</p>\n<p>Modify the component as follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> now <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> <span class=\"token number\">18</span>\n  <span class=\"token keyword\">const</span> b <span class=\"token operator\">=</span> <span class=\"token number\">24</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span>Hola <span class=\"token constant\">COMP</span> <span class=\"token number\">227</span><span class=\"token operator\">!</span> It is <span class=\"token punctuation\">{</span>now<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span>\n        <span class=\"token punctuation\">{</span>a<span class=\"token punctuation\">}</span> plus <span class=\"token punctuation\">{</span>b<span class=\"token punctuation\">}</span> is <span class=\"token punctuation\">{</span>a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Any JavaScript code within the curly braces is evaluated and that result is embedded into the HTML where the curly braces once were.</p>\n<p>Notice that you should not remove the line at the bottom of the component</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> App</code></pre></div>\n<p>The export is not shown in most of the examples of the course material.\nWithout the export, the application breaks.</p>\n<p>What was printed out in the console?\nDid you keep it open?</p>\n<h3>JSX</h3>\n<p>It seems like React components are returning HTML markup.\nHowever, this is not the case.\nThe layout of React components is mostly written using <a href=\"https://react.dev/learn/writing-markup-with-jsx\">JSX</a>.\nAlthough JSX looks like HTML, we are dealing with a way to write JavaScript.\nUnder the hood, JSX returned by React components is compiled into JavaScript.</p>\n<p>After compiling, our application looks like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> now <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> <span class=\"token number\">18</span>\n  <span class=\"token keyword\">const</span> b <span class=\"token operator\">=</span> <span class=\"token number\">24</span>\n  <span class=\"token keyword\">return</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span>\n    <span class=\"token string\">'div'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n    React<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span>\n      <span class=\"token string\">'p'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Hola COMP 227! It is '</span><span class=\"token punctuation\">,</span> now<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    React<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span>\n      <span class=\"token string\">'p'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">,</span> <span class=\"token string\">' plus '</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> <span class=\"token string\">' is '</span><span class=\"token punctuation\">,</span> a <span class=\"token operator\">+</span> b\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The compilation is handled by <a href=\"https://babeljs.io/repl/\">Babel</a>.\nProjects created with <em>vite</em> or <em>create-react-app</em> are configured to compile automatically.\nWe will learn more about this topic in <a href=\"/part7\">part 7</a> of this course.</p>\n<p>It is also possible to write React as \"pure JavaScript\" without using JSX.\nJust like it's possible to chisel one of your old programming projects onto a stone tablet.\nIn either case, I wouldn't recommend it.</p>\n<p>In practice, JSX is much like HTML with the distinction that with JSX you can easily embed dynamic content by writing appropriate JavaScript within curly braces.\nThe idea of JSX is quite similar to other templating languages, such as <a href=\"https://www.thymeleaf.org/\">Thymeleaf</a> and <a href=\"https://spring.io/\">Java Spring</a>, which are used on servers.</p>\n<p>JSX is \"<a href=\"https://developer.mozilla.org/en-US/docs/Web/XML/XML_introduction\">XML</a>-like\", which means that <em>every tag needs to be closed</em>.\nFor example, a newline is an empty element, which in HTML can be written as follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p><strong><em>Notice the absence of a closing tag with HTML.</em></strong>\nHowever, when <em>writing JSX</em>, <strong>the tag needs to be <em>closed</em> with a <code class=\"language-text\">/</code></strong>:</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span> <span class=\"token punctuation\">/></span></span></code></pre></div>\n<p>This is also referred to as a <strong>self-closing tag</strong>.</p>\n<h3>Multiple components</h3>\n<p>Let's modify <em>App.jsx</em> as follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Greet</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span>Hola <span class=\"token constant\">COMP</span> <span class=\"token number\">227</span><span class=\"token operator\">!</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span>Greetings<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token operator\">&lt;</span>Greet <span class=\"token operator\">/</span><span class=\"token operator\">></span></span>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<blockquote>\n<p>Pertinent: <code class=\"language-text\">export</code> at the bottom will be left out of any future examples.\nWe still need <strong><code class=\"language-text\">export</code> for the code to work.</strong></p>\n</blockquote>\n<p>We have defined a new component <code class=\"language-text\">Greet</code> and used it inside the component <code class=\"language-text\">App</code>.\nNaturally, a component can be used multiple times:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span>Greetings<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Greet <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token operator\">&lt;</span>Greet <span class=\"token operator\">/</span><span class=\"token operator\">></span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token operator\">&lt;</span>Greet <span class=\"token operator\">/</span><span class=\"token operator\">></span></span>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Writing components with React is easy, and by combining components, even a more complex application can be kept fairly maintainable.\nIndeed, a core philosophy of React is composing applications from many specialized reusable components.</p>\n<p>Another strong convention is the idea of a <strong>root component</strong> called <code class=\"language-text\">App</code> at the top of the component tree of the application.\nNevertheless, as we will learn in <a href=\"/part6\">part 6</a>,\nthere are situations where the component <code class=\"language-text\">App</code> is not exactly the root, but is wrapped within an appropriate utility component.</p>\n<h3>props: passing data to components</h3>\n<p>It is possible to pass data to components using so-called <a href=\"https://react.dev/learn/passing-props-to-a-component\"><strong>props</strong></a>.</p>\n<p>Let's modify the component <code class=\"language-text\">Greet</code> as follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Greet</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span>  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span>Hey <span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span><span class=\"token operator\">!</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span></span>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Now the function defining the component has the parameter <strong>props</strong>.\nAs an argument, the parameter receives an object, which has fields corresponding to all the \"props\" the user of the component defines.</p>\n<p>The props are defined as follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span>Greetings<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token operator\">&lt;</span>Greet name<span class=\"token operator\">=</span><span class=\"token string\">'Luna'</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token operator\">&lt;</span>Greet name<span class=\"token operator\">=</span><span class=\"token string\">'Jordan'</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span></span>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>Possible error message</h3>\n<p>If you have set everything up correctly you will receive the following error message at this point:</p>\n<picture><img src=\"/static/d4eb9e068347e099143a1f7a0510cf76/5a190/1-vite5.png\" alt=\"WebStorm showing name is missing in props validation\" srcset=\"/static/d4eb9e068347e099143a1f7a0510cf76/772e8/1-vite5.png 200w,\n/static/d4eb9e068347e099143a1f7a0510cf76/e17e5/1-vite5.png 400w,\n/static/d4eb9e068347e099143a1f7a0510cf76/5a190/1-vite5.png 800w,\n/static/d4eb9e068347e099143a1f7a0510cf76/c1b63/1-vite5.png 1200w,\n/static/d4eb9e068347e099143a1f7a0510cf76/b30aa/1-vite5.png 1405w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>It's not an actual error, but a warning caused by the <a href=\"https://eslint.org/\">ESLint</a> tool.\nYou can silence the warning <a href=\"https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/prop-types.md\"><code class=\"language-text\">react/prop-types</code></a>\nby adding to the file <em>.eslintrc.cjs</em> the next line</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n   root<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n   env<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> browser<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> es2020<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n   <span class=\"token keyword\">extends</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n     <span class=\"token string\">'eslint:recommended'</span><span class=\"token punctuation\">,</span>\n     <span class=\"token string\">'plugin:react/recommended'</span><span class=\"token punctuation\">,</span>\n     <span class=\"token string\">'plugin:react/jsx-runtime'</span><span class=\"token punctuation\">,</span>\n     <span class=\"token string\">'plugin:react-hooks/recommended'</span><span class=\"token punctuation\">,</span>\n   <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n   ignorePatterns<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'dist'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.eslintrc.cjs'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n   parserOptions<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> ecmaVersion<span class=\"token operator\">:</span> <span class=\"token string\">'latest'</span><span class=\"token punctuation\">,</span> sourceType<span class=\"token operator\">:</span> <span class=\"token string\">'module'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n   settings<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> react<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> version<span class=\"token operator\">:</span> <span class=\"token string\">'18.2'</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n   plugins<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'react-refresh'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n   rules<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token string\">'react-refresh/only-export-components'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n       <span class=\"token string\">'warn'</span><span class=\"token punctuation\">,</span>\n       <span class=\"token punctuation\">{</span> allowConstantExport<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n     <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"gatsby-highlight-code-line\">     <span class=\"token string\">'react/prop-types'</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span></span>   <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>We will get to know ESLint in more detail <a href=\"/part3/validation_and_es_lint#lint\">in part 3</a>.</p>\n<h3>Multiple props</h3>\n<p>There can be an arbitrary number of props and their values can be <em>hard-coded</em> strings or the results of JavaScript expressions.\nIf the value of the prop is achieved using JavaScript it must be wrapped with curly braces.</p>\n<p>Let's modify the code so that the component <code class=\"language-text\">Greet</code> uses two props:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Greet</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span>\n<span class=\"gatsby-highlight-code-line\">        Hey <span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> you are <span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">}</span> years old</span>      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> name <span class=\"token operator\">=</span> <span class=\"token string\">'Buddy'</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> age <span class=\"token operator\">=</span> <span class=\"token number\">10</span></span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span>Greetings<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token operator\">&lt;</span>Greet name<span class=\"token operator\">=</span><span class=\"token string\">'Bailey'</span> age<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">7</span> <span class=\"token operator\">+</span> <span class=\"token number\">14</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token operator\">&lt;</span>Greet name<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">}</span> age<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>age<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span></span>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The props sent by the component <code class=\"language-text\">App</code> are the values of the variables, the result of the evaluation of the sum expression and a regular string.</p>\n<h3>Some tips</h3>\n<p>React, ESLint, &#x26; WebStorm generate helpful error messages.\nDespite this, you should, at least in the beginning, advance in <strong>very small steps</strong> and make sure that every change works as desired.</p>\n<p><strong>The console should always be open</strong>.\nYou should also have the problems area view in WebStorm open as well (<strong><em>Alt-6</em></strong>).\nThe arrows in the image below also point you to line numbers, as those can be helpful as well.\nIf the browser reports errors, don't continue writing more code, hoping for miracles.\nInstead, try to understand the cause of the error and, for example, go back to the previous working state:</p>\n<picture><img src=\"/static/a254b4e14dee7356e8e147212b50b5cb/5a190/2a.png\" alt=\"screenshot of undefined prop error\" srcset=\"/static/a254b4e14dee7356e8e147212b50b5cb/772e8/2a.png 200w,\n/static/a254b4e14dee7356e8e147212b50b5cb/e17e5/2a.png 400w,\n/static/a254b4e14dee7356e8e147212b50b5cb/5a190/2a.png 800w,\n/static/a254b4e14dee7356e8e147212b50b5cb/c1b63/2a.png 1200w,\n/static/a254b4e14dee7356e8e147212b50b5cb/29007/2a.png 1600w,\n/static/a254b4e14dee7356e8e147212b50b5cb/ec09f/2a.png 1916w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>While using undo (<strong><em>Ctrl-Z</em></strong>) and redo (<strong><em>Ctrl-Y</em></strong>) is great,\nBecause we have the file watcher setup, looking at changes becomes even easier,\nas you can always look at the previously recorded changes on any line using the git log window. (<strong><em>Alt-9</em></strong>)</p>\n<picture><img src=\"/static/74e71a3e48f6b411e95f3fb6cff16017/5a190/git_log_history.png\" alt=\"screenshot of using the file watcher\" srcset=\"/static/74e71a3e48f6b411e95f3fb6cff16017/772e8/git_log_history.png 200w,\n/static/74e71a3e48f6b411e95f3fb6cff16017/e17e5/git_log_history.png 400w,\n/static/74e71a3e48f6b411e95f3fb6cff16017/5a190/git_log_history.png 800w,\n/static/74e71a3e48f6b411e95f3fb6cff16017/c1b63/git_log_history.png 1200w,\n/static/74e71a3e48f6b411e95f3fb6cff16017/29007/git_log_history.png 1600w,\n/static/74e71a3e48f6b411e95f3fb6cff16017/29114/git_log_history.png 1920w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>When you fix a component, you may notice that the page itself comes back to life, rendering what you expect.</p>\n<p>Also, keep in mind that <strong>React component names must be capitalized</strong>.\n<em>If you try defining a component</em> like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">footer</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      greeting app created by <span class=\"token operator\">&lt;</span>a href<span class=\"token operator\">=</span><span class=\"token string\">'https://github.com/onzfonz'</span><span class=\"token operator\">></span>onzfonz<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>a<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>and use it like this</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span>Greetings<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Greet name<span class=\"token operator\">=</span><span class=\"token string\">'Bailey'</span> age<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">7</span> <span class=\"token operator\">+</span> <span class=\"token number\">14</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token operator\">&lt;</span>footer <span class=\"token operator\">/</span><span class=\"token operator\">></span></span>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>the page is not going to display the content defined within the footer component,\nand instead React only creates an empty <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/footer\">footer</a> element,\ni.e. the built-in HTML element instead of the custom React element of the same name.\nIf you change the first letter of the component name to a capital letter,\nthen React creates a <code class=\"language-text\">div</code> element defined in the <code class=\"language-text\">Footer</code> component, which is rendered on the page.</p>\n<p>Notice that the content of a React component (usually) needs to contain <strong>one root element</strong>.\nIf we, for example, try to define the component <code class=\"language-text\">App</code> without the outermost <code class=\"language-text\">div</code> element (which is <em>the root element</em>):</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span>Greetings<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>Greet name<span class=\"token operator\">=</span><span class=\"token string\">'Bailey'</span> age<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">7</span> <span class=\"token operator\">+</span> <span class=\"token number\">14</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>Greet name<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">}</span> age<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>age<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>Footer <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>the result is an error message.</p>\n<picture><img src=\"/static/bc18ae43e9abda56416210c9c6392aa4/5a190/3c.png\" alt=\"multiple root elements error screenshot\" srcset=\"/static/bc18ae43e9abda56416210c9c6392aa4/772e8/3c.png 200w,\n/static/bc18ae43e9abda56416210c9c6392aa4/e17e5/3c.png 400w,\n/static/bc18ae43e9abda56416210c9c6392aa4/5a190/3c.png 800w,\n/static/bc18ae43e9abda56416210c9c6392aa4/c1b63/3c.png 1200w,\n/static/bc18ae43e9abda56416210c9c6392aa4/f02b9/3c.png 1554w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Using a root element (<em>like an outermost <code class=\"language-text\">&lt;div&gt;</code></em>) is not the only working option.\nAn <em>array</em> of components is also a valid solution:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span>Greetings<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n    <span class=\"token operator\">&lt;</span>Greet name<span class=\"token operator\">=</span><span class=\"token string\">'Bailey'</span> age<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">7</span> <span class=\"token operator\">+</span> <span class=\"token number\">14</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n    <span class=\"token operator\">&lt;</span>Greet name<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">}</span> age<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>age<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n    <span class=\"token operator\">&lt;</span>Footer <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>However, when defining the root component of the application this is not a particularly wise thing to do, and it makes the code look a bit ugly.</p>\n<p>Because the root element is stipulated, we have \"extra\" div elements in the DOM tree.\nThis can be avoided by using <a href=\"https://react.dev/reference/react/Fragment\">fragments</a>,\ni.e. by wrapping the elements to be returned by the component with <strong><em>an empty element <code class=\"language-text\">&lt;&gt;</code></em></strong>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> name <span class=\"token operator\">=</span> <span class=\"token string\">'Buddy'</span>\n  <span class=\"token keyword\">const</span> age <span class=\"token operator\">=</span> <span class=\"token number\">10</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span>Greetings<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Greet name<span class=\"token operator\">=</span><span class=\"token string\">'Bailey'</span> age<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">7</span> <span class=\"token operator\">+</span> <span class=\"token number\">14</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Greet name<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">}</span> age<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>age<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Footer <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>It now compiles successfully, and the DOM generated by React no longer contains the extra <code class=\"language-text\">div</code> element.</p>\n<h3>Do not render objects</h3>\n<p>Consider an application that prints the names and ages of some of our friends on the screen.\nImagine this is the code that you wrote:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> friends <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'Monica'</span><span class=\"token punctuation\">,</span> age<span class=\"token operator\">:</span> <span class=\"token number\">24</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'Joey'</span><span class=\"token punctuation\">,</span> age<span class=\"token operator\">:</span> <span class=\"token number\">25</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>friends<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>friends<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> App</code></pre></div>\n<p>However, once you try running the code, nothing appears on the screen.\nYou try to find a problem in the code for 15 minutes, but you can't figure out where the problem could be.</p>\n<p>All of a sudden, you remember the promise we made:</p>\n<blockquote>\n<p><em>I promise to keep the console open all the time during this course, and for the rest of my life when I'm doing web development</em></p>\n</blockquote>\n<p>The developer console throws a few errors.</p>\n<blockquote>\n<p><strong>Pertinent</strong>: At this point, your developer console may be filled with a load of errors.\nThis is because the console does not clear fixed errors automatically.\nTo have the console show the latest relevant errors, you need to <em>clear the console by clicking on the 🚫 icon in the developer tools</em>.\nThen <em>refresh the browser (<strong>F5</strong>)</em> so that the newest relevant errors re-appear</p>\n</blockquote>\n<picture><img src=\"/static/44831b2b44c74146dd62dd0f22f1e74d/5a190/34new.png\" alt=\"Devtools showing an error with a highlight around &#x22;Objects are not valid as a React child&#x22;\" srcset=\"/static/44831b2b44c74146dd62dd0f22f1e74d/772e8/34new.png 200w,\n/static/44831b2b44c74146dd62dd0f22f1e74d/e17e5/34new.png 400w,\n/static/44831b2b44c74146dd62dd0f22f1e74d/5a190/34new.png 800w,\n/static/44831b2b44c74146dd62dd0f22f1e74d/c1b63/34new.png 1200w,\n/static/44831b2b44c74146dd62dd0f22f1e74d/29007/34new.png 1600w,\n/static/44831b2b44c74146dd62dd0f22f1e74d/bfd4b/34new.png 1871w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>The core of the problem is <strong><em>Objects are not valid as a React child</em></strong>, i.e. the application tries to render <em>objects</em> and it fails again.</p>\n<p>The console also points to where the error occurred, which can be traced to this code:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>friends<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span></code></pre></div>\n<p>and this causes a problem because the item to be rendered in the braces is an object.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'Monica'</span><span class=\"token punctuation\">,</span> age<span class=\"token operator\">:</span> <span class=\"token number\">24</span> <span class=\"token punctuation\">}</span></code></pre></div>\n<p>In React, the <strong>individual items rendered in braces must be primitive values</strong>, such as numbers or strings.</p>\n<p>Here's the fix:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> friends <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'Monica'</span><span class=\"token punctuation\">,</span> age<span class=\"token operator\">:</span> <span class=\"token number\">24</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'Joey'</span><span class=\"token punctuation\">,</span> age<span class=\"token operator\">:</span> <span class=\"token number\">25</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>friends<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span> <span class=\"token punctuation\">{</span>friends<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>friends<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span> <span class=\"token punctuation\">{</span>friends<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span></span>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> App</code></pre></div>\n<p>So now our first friend's name is rendered separately inside the curly braces</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>friends<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span></code></pre></div>\n<p>as <em><code class=\"language-text\">Monica</code></em> and her age</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>friends<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">}</span></code></pre></div>\n<p>as <em><code class=\"language-text\">24</code></em>.</p>\n<blockquote>\n<p>React also allows arrays to be rendered <em>if</em> the array contains values ​​that are eligible for rendering (such as numbers or strings).\nSo the following program would work, although the result might not be what we want:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> friends <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">'Monica'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Joey'</span><span class=\"token punctuation\">]</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>friends<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</blockquote>\n<p>In this part, it is not even worth trying to use the direct rendering of the tables, we will come back to it in the next part.</p>\n</div>\n<div class=\"tasks\">\n<h3>Exercises 1.1-1.2</h3>\n<p>The exercises are submitted through GitHub and marking them as done on Canvas.</p>\n<p>To submit an exercise as completed in GitHub, you will need to manually write this command in your terminal.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> commit --allow-empty -m <span class=\"token string\">\"Completed Exercise X.Y\"</span></code></pre></div>\n<p>Because we are using file watchers, all changes are uploaded automatically.\nSo, any time that the reading says to <em>commit your changes</em>, <strong>you can use the <code class=\"language-text\">--allow-empty</code> flag to make an empty commit with the desired message</strong>.</p>\n<p>Where <em><code class=\"language-text\">X</code></em> and <em><code class=\"language-text\">Y</code></em> stand for the part number ane exercise number.\nYou will know that it is complete because it will parrot it back to you.\n<strong>Consider this part of the submission system</strong>.\nIf you want to be sure that it uploads, you should also do a <code class=\"language-text\">git push</code>, though if you edit your JSX files afterwards, they should be fine.</p>\n<p><em>This is something that should happen at all times and you are responsible for verifying your changes show up in github.</em></p>\n<p>You should submit the exercises in each part with the corresponding repo that is mentioned.\nIn this case, you will use the repo that was generated from <a href=\"http://go.djosv.com/227lab1\">http://go.djosv.com/227lab1</a>.</p>\n<p>We will use Vite in each of the exercises to create the following file structure for our submission repository,\n(<strong>do not do this now; you should already have a <em>reading</em> rolder from our previous exercises</strong>):</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">lab1\n  reading\n  arcadeinfo\n  studytracker\n  jokes</code></pre></div>\n<p>Each repo will need directories that will be used for an application that will be linked to a series of exercises, like \"studytracker\" for part 1.</p>\n<p>We have provided you with a fairly robust <em>.gitignore</em> file, which ignores things like the <em>node_modules</em> directory,\nso you should commit and add all of the files that you use in your directories.\n<strong><em>Make sure to remove any files you won't use before committing them!</em></strong></p>\n<p>Please make sure that you add all files initially, as that will be the way you show your work and progress through the course.\nPlease use an appropriate commit message when adding files to the repo.</p>\n<p>Remember that your files should all be white in color.</p>\n<p>Notice that in this part, there are more exercises besides those found below.</p>\n<h4>1.1: handheld arcade info, Step 1</h4>\n<p>This exercise will start the ongoing development of a small application that will be further developed in a few of the following exercises.\nPlease make sure to commit often and that you do not have any files in your project that are any color other than white.</p>\n<p><strong>Use <em>Vite</em> in the base folder of <em>lab1</em> to initialize a new application called <em>arcadeinfo</em></strong>.</p>\n<blockquote>\n<p><strong>FYI:</strong> If you don't know how to do this, then you need to <a href=\"#starting-development\">go back and re-read the initial portion where you first setup the reading folder</a>.\nThis is something that you will have to do from time to time in the course to get those necessary refreshers, and that's OK!</p>\n</blockquote>\n<p>Commit and add all of the files needed.\n<strong>Make sure that when you type <code class=\"language-text\">ls</code>, you see both the <em>reading</em> and <em>arcadeinfo</em> folders</strong>.\nNow, since you have your <em>reading</em> folder already,\nyou'll make changes in your reading folder, and for the exercises, you'll make changes in the named exercise folder (in this case, <em>arcadeinfo</em>)</p>\n<p>Modify <em>arcadeinfo/src/main.jsx</em> to match the following.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> ReactDOM <span class=\"token keyword\">from</span> <span class=\"token string\">'react-dom/client'</span>\n\n<span class=\"token keyword\">import</span> App <span class=\"token keyword\">from</span> <span class=\"token string\">'./App'</span>\n\nReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">createRoot</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>App <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>and <em>App.jsx</em> to match the following</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> company <span class=\"token operator\">=</span> <span class=\"token string\">'Nintendo'</span>\n  <span class=\"token keyword\">const</span> handheld1 <span class=\"token operator\">=</span> <span class=\"token string\">'Game Boy'</span>\n  <span class=\"token keyword\">const</span> games1 <span class=\"token operator\">=</span> <span class=\"token number\">1046</span>\n  <span class=\"token keyword\">const</span> handheld2 <span class=\"token operator\">=</span> <span class=\"token string\">'Game Boy Advance'</span>\n  <span class=\"token keyword\">const</span> games2 <span class=\"token operator\">=</span> <span class=\"token number\">1538</span>\n  <span class=\"token keyword\">const</span> handheld3 <span class=\"token operator\">=</span> <span class=\"token string\">'DS'</span>\n  <span class=\"token keyword\">const</span> games3 <span class=\"token operator\">=</span> <span class=\"token number\">1791</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>company<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span>\n        <span class=\"token punctuation\">{</span>handheld1<span class=\"token punctuation\">}</span> <span class=\"token punctuation\">{</span>games1<span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span>\n        <span class=\"token punctuation\">{</span>handheld2<span class=\"token punctuation\">}</span> <span class=\"token punctuation\">{</span>games2<span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span>\n        <span class=\"token punctuation\">{</span>handheld3<span class=\"token punctuation\">}</span> <span class=\"token punctuation\">{</span>games3<span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span>Number <span class=\"token keyword\">of</span> games <span class=\"token punctuation\">{</span>games1 <span class=\"token operator\">+</span> games2 <span class=\"token operator\">+</span> games3<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> App</code></pre></div>\n<p>and remove extra files (<em>App.css</em>, <em>index.css</em>, <em>logo.svg</em>)).</p>\n<p>Unfortunately, the entire application is in the same component.\nRefactor the code so that it consists of three new components: <code class=\"language-text\">Header</code>, <code class=\"language-text\">Content</code>, and <code class=\"language-text\">Total</code>.\nAll data still resides in the <code class=\"language-text\">App</code> component, which passes the necessary data to each component using <code class=\"language-text\">props</code>.\n<code class=\"language-text\">Header</code> takes care of rendering the name of the company,\n<code class=\"language-text\">Content</code> renders the handhelds and their number of games and <code class=\"language-text\">Total</code> renders the total number of games.</p>\n<p>Define the new components in <em>App.jsx</em>.</p>\n<p>The <code class=\"language-text\">App</code> component's body will approximately be as follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// const-definitions</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Header company<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>company<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Content <span class=\"token operator\">...</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Total <span class=\"token operator\">...</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<blockquote>\n<p><strong>WARNING</strong> Don't try to program all the components concurrently,\nbecause that will almost certainly break down the whole app.\nProceed in small steps, first make e.g. the component <em>Header</em> and only when it works for sure, you could proceed to the next component.</p>\n<p>Also, do not try to program all the components at the same time.\nYou need to go in small steps, like first make the component <em>Header</em> and when that works, <strong>commit</strong> the change and then <strong><em>then</em></strong> proceed to the next component.</p>\n</blockquote>\n<p><strong><em>Make sure to type <code class=\"language-text\">git commit --allow-empty -m &quot;Completed Exercise 1.1&quot;</code> in the terminal before moving onto 1.2</em></strong></p>\n<h4>1.2: handheld arcade info, Step 2</h4>\n<p>Refactor the <code class=\"language-text\">Content</code> component so that it does not render any names of handhelds or their number of games by itself.\nInstead, it only renders three <code class=\"language-text\">Handheld</code> components of which each renders the name and number of games of one handheld.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> Content <span class=\"token operator\">=</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Handheld <span class=\"token operator\">...</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Handheld <span class=\"token operator\">...</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Handheld <span class=\"token operator\">...</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Our application passes on information in quite a primitive way at the moment, since it is based on individual variables.</p>\n<p><strong><em>Make sure to type <code class=\"language-text\">git commit --allow-empty -m &quot;Completed Exercise 1.2&quot;</code> in the terminal before moving on.</em></strong>\nYou will not get anymore regular reminders to do this.</p>\n<p>We shall fix that in <a href=\"/part2\">part 2</a>.</p>\n</div>","frontmatter":{"mainImage":{"publicURL":"/static/83f1c8a7795e9e8eaffaec29b1ee79b1/part-1.svg"},"part":1,"letter":"a","lang":"en"}}},"pageContext":{"part":1,"letter":"a","lang":"en"}}}