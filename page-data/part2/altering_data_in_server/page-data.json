{"componentChunkName":"component---src-templates-content-template-js","path":"/part2/altering_data_in_server","result":{"data":{"markdownRemark":{"html":"<div class=\"content\">\n<p>When creating tasks in our application, we would naturally want to store them in some backend server.\nThe <a href=\"https://github.com/typicode/json-server\">json-server</a> package claims to be a so-called REST or RESTful API in its documentation:</p>\n<blockquote>\n<p><em>Get a full fake REST API with zero coding in less than 30 seconds (seriously)</em></p>\n</blockquote>\n<p>The json-server does not exactly match the description provided by the\n<a href=\"https://en.wikipedia.org/wiki/Representational_state_transfer\">textbook definition of a REST API</a>\n, but neither do most other APIs claiming to be RESTful.</p>\n<p>We will take a closer look at REST in the <a href=\"/part3\">next part</a> of the course.\nBut it's important to familiarize ourselves at this point with some of the\n<a href=\"https://en.wikipedia.org/wiki/Representational_state_transfer#Applied_to_web_services\">REST conventions</a>\nused by json-server and other APIs in general.\nIn particular, we will be taking a look at the conventional use of <a href=\"https://github.com/typicode/json-server#routes\"><strong>routes</strong></a>,\naka URLs and HTTP request types, in REST.</p>\n<h3>REST</h3>\n<p>In REST terminology, we refer to individual data objects, such as the tasks in our application, as <strong>resources</strong>.\n<strong>Every <em>resource</em> has a <em>URL</em> associated with it.</strong>\nResources are then fetched from the server with <strong>HTTP GET</strong> requests.\nFor instance, an HTTP GET request to the <strong><em>tasks</em></strong> URL would return a list of all tasks, as that would point to a resource containing all tasks.\nAccording to a general convention used by <em>json-server</em>,\nwe would be able to locate an individual task at the resource URL <strong><em>tasks/N</em></strong>, where <em><code class=\"language-text\">N</code></em> is the ID of the resource.\nSo a HTTP GET request to the URL endpoint <strong><em>tasks/3</em></strong> will return the task with ID number <em><code class=\"language-text\">3</code></em>.</p>\n<p>Creating a new resource for storing a task is done by making an HTTP POST request to the <strong><em>tasks</em></strong> URL according to the REST convention that the <em>json-server</em> adheres to.\nThe data for the new task resource is sent in the <code class=\"language-text\">body</code> of the request.</p>\n<p><em>json-server</em> requires all data to be sent in JSON format.\nWhat this means in practice is that the data must be a correctly formatted string\nand that the request must contain the <code class=\"language-text\">Content-Type</code> request header with the value <code class=\"language-text\">application/json</code>.</p>\n<h3>Sending Data to the Server</h3>\n<p>Let's make the following changes to the event handler responsible for creating a new task:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function-variable function\">addTask</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  event<span class=\"token punctuation\">.</span><span class=\"token function\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> taskObject <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    content<span class=\"token operator\">:</span> newTask<span class=\"token punctuation\">,</span>\n    date<span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toISOString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    important<span class=\"token operator\">:</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n\n<span class=\"gatsby-highlight-code-line\">  axios</span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http://localhost:3001/tasks'</span><span class=\"token punctuation\">,</span> taskObject<span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>We create a new object for the task but omit the <code class=\"language-text\">id</code> property since it's better to let the server generate IDs for our resources!</p>\n<p>The object is sent to the server using the axios <code class=\"language-text\">post</code> method.\nThe registered event handler logs the response that is sent back from the server to the console.</p>\n<p>When we try to create a new task, the following output pops up in the console:</p>\n<picture><img src=\"/static/445861f31966eb955c08d660cfb94d9b/5a190/20e.png\" alt=\"data json output in console\" srcset=\"/static/445861f31966eb955c08d660cfb94d9b/772e8/20e.png 200w,\n/static/445861f31966eb955c08d660cfb94d9b/e17e5/20e.png 400w,\n/static/445861f31966eb955c08d660cfb94d9b/5a190/20e.png 800w,\n/static/445861f31966eb955c08d660cfb94d9b/c1b63/20e.png 1200w,\n/static/445861f31966eb955c08d660cfb94d9b/4fa52/20e.png 1241w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>The newly created task resource is stored in the value of the <code class=\"language-text\">data</code> property of the <code class=\"language-text\">response</code> object.</p>\n<p>Sometimes it can be useful to inspect HTTP requests in the <strong><em>Network</em></strong> tab of Chrome developer tools,\nwhich was used heavily at the beginning of <a href=\"/part0/fundamentals_of_web_apps#http-get\">part 0</a>:</p>\n<picture><img src=\"/static/e2aac612f93f602250faacc7999fc11e/5a190/21e1.png\" alt=\"content-type data in dev tools\" srcset=\"/static/e2aac612f93f602250faacc7999fc11e/772e8/21e1.png 200w,\n/static/e2aac612f93f602250faacc7999fc11e/e17e5/21e1.png 400w,\n/static/e2aac612f93f602250faacc7999fc11e/5a190/21e1.png 800w,\n/static/e2aac612f93f602250faacc7999fc11e/c1b63/21e1.png 1200w,\n/static/e2aac612f93f602250faacc7999fc11e/2cefc/21e1.png 1400w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<picture><img src=\"/static/4e1ddb86a08a5e4550b08f7f8f4946b0/5a190/21e2.png\" alt=\"request payload in dev tools\" srcset=\"/static/4e1ddb86a08a5e4550b08f7f8f4946b0/772e8/21e2.png 200w,\n/static/4e1ddb86a08a5e4550b08f7f8f4946b0/e17e5/21e2.png 400w,\n/static/4e1ddb86a08a5e4550b08f7f8f4946b0/5a190/21e2.png 800w,\n/static/4e1ddb86a08a5e4550b08f7f8f4946b0/c1b63/21e2.png 1200w,\n/static/4e1ddb86a08a5e4550b08f7f8f4946b0/20785/21e2.png 1307w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Also, the <em>response</em> tab is useful, it shows what was the data the server responded with:</p>\n<picture><img src=\"/static/0de81a8d6b06d251fd304b771d30df8a/5a190/21e3.png\" alt=\"TODO - provide response tab screenshot here with tasks as response from server\" srcset=\"/static/0de81a8d6b06d251fd304b771d30df8a/772e8/21e3.png 200w,\n/static/0de81a8d6b06d251fd304b771d30df8a/e17e5/21e3.png 400w,\n/static/0de81a8d6b06d251fd304b771d30df8a/5a190/21e3.png 800w,\n/static/0de81a8d6b06d251fd304b771d30df8a/966a0/21e3.png 944w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>We can use the inspector to check that the headers sent in the POST request are what we expected them to be and that their values are correct.</p>\n<p>Since the data we sent in the POST request was a JavaScript object,\n<em>axios</em> automatically knew to set the appropriate <code class=\"language-text\">application/json</code> value for the <code class=\"language-text\">Content-Type</code> header.</p>\n<p>The new task is not rendered to the screen yet.\nThis is because <em>we did not update the state of the <code class=\"language-text\">App</code> component when we created the new task</em>.\nLet's fix this:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function-variable function\">addTask</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">event</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  event<span class=\"token punctuation\">.</span><span class=\"token function\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> taskObject <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    content<span class=\"token operator\">:</span> newTask<span class=\"token punctuation\">,</span>\n    date<span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toISOString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    important<span class=\"token operator\">:</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n\n  axios\n    <span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http://localhost:3001/tasks'</span><span class=\"token punctuation\">,</span> taskObject<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token function\">setTasks</span><span class=\"token punctuation\">(</span>tasks<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token function\">setNewTask</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span></span>    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The new task returned by the backend server is added to the list of tasks in our application's state\nin the customary way of using the <code class=\"language-text\">setTasks</code> function and then resetting the task creation form.</p>\n<blockquote>\n<p><strong>Remember</strong>: In part 1, we mentioned how the <code class=\"language-text\">concat</code> method does not change the component's original state,\nbut instead <a href=\"/part1/a_more_complex_state_debugging_react_apps#handling-arrays\">creates a new copy of the list</a>.</p>\n</blockquote>\n<p>Once the data returned by the server starts affecting the behavior of our web applications,\nwe are immediately faced with a whole new set of challenges arising from, for instance, the asynchronicity of communication.\nNew debugging strategies, console logging, and other means of debugging become increasingly important.\nWe must also develop a sufficient understanding of the principles of both the JavaScript runtime and React components.\nGuessing won't be enough.</p>\n<p>It's beneficial to inspect the state of the backend server, e.g. through the browser:</p>\n<picture><img src=\"/static/165d046991d7375ba80fb3927419157e/5a190/22e.png\" alt=\"JSON data output from backend\" srcset=\"/static/165d046991d7375ba80fb3927419157e/772e8/22e.png 200w,\n/static/165d046991d7375ba80fb3927419157e/e17e5/22e.png 400w,\n/static/165d046991d7375ba80fb3927419157e/5a190/22e.png 800w,\n/static/165d046991d7375ba80fb3927419157e/c1b63/22e.png 1200w,\n/static/165d046991d7375ba80fb3927419157e/2eb79/22e.png 1256w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>This makes it possible to verify that all the data we intended to send was actually received by the server.</p>\n<p>In the next part of the course, we will learn to implement our own logic in the backend.\nWe will then take a closer look at tools like <a href=\"https://www.postman.com/downloads/\">Postman</a> that helps us to debug our server applications.\nHowever, inspecting the state of the <em>json-server</em> through the browser is sufficient for our current needs.</p>\n<blockquote>\n<p><strong>Pertinent:</strong> In the current version of our application, the browser adds the creation date property to the task.\nSince the clock of the machine running the browser can be wrongly configured,\nit's much wiser to let the backend server generate this timestamp for us.\n<em>The next part of the course will demonstrate how to generate server timestamps</em>.</p>\n</blockquote>\n<p>The code for the current state of our application can be found in the  <em>part2-5</em> branch on <a href=\"https://github.com/comp227/part2-tasks/tree/part2-5\">GitHub</a>.</p>\n<h3>Changing the Importance of Tasks</h3>\n<p>Let's add a button to every task that can be used for toggling its importance.</p>\n<p>We make the following changes to the <code class=\"language-text\">Task</code> component:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Task</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> task<span class=\"token punctuation\">,</span> toggleImportance <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> label <span class=\"token operator\">=</span> task<span class=\"token punctuation\">.</span>important\n    <span class=\"token operator\">?</span> <span class=\"token string\">'make not important'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'make important'</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>li<span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span>task<span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">}</span> \n      <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>toggleImportance<span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token punctuation\">{</span>label<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>li<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>We add a button to the component and assign its event handler as the <code class=\"language-text\">toggleImportance</code> function passed in the component's props.</p>\n<p>The <code class=\"language-text\">App</code> component defines an initial version of the <code class=\"language-text\">toggleImportanceOf</code> event handler function and passes it to every <code class=\"language-text\">Task</code> component:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>tasks<span class=\"token punctuation\">,</span> setTasks<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> \n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>newTask<span class=\"token punctuation\">,</span> setNewTask<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>showAll<span class=\"token punctuation\">,</span> setShowAll<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// ...</span>\n\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">toggleImportanceOf</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">id</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'importance of '</span> <span class=\"token operator\">+</span> id <span class=\"token operator\">+</span> <span class=\"token string\">' needs to be toggled'</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span></span>\n  <span class=\"token comment\">// ...</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span>Tasks<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setShowAll</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>showAll<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n          show <span class=\"token punctuation\">{</span>showAll <span class=\"token operator\">?</span> <span class=\"token string\">'important'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'all'</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>      \n      <span class=\"token operator\">&lt;</span>ul<span class=\"token operator\">></span>\n        <span class=\"token punctuation\">{</span>tasksToShow<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">task</span> <span class=\"token operator\">=></span> \n          <span class=\"token operator\">&lt;</span>Task\n            key<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>task<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">}</span>\n            task<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>task<span class=\"token punctuation\">}</span> \n<span class=\"gatsby-highlight-code-line\">            toggleImportance<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">toggleImportanceOf</span><span class=\"token punctuation\">(</span>task<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span>          <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ul<span class=\"token operator\">></span>\n      <span class=\"token comment\">// ...</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Notice how every task receives its own <strong><em>unique</em></strong> event handler function since the <code class=\"language-text\">id</code> of every task is unique.</p>\n<p>E.g., if <code class=\"language-text\">task.id</code> is <em><code class=\"language-text\">3</code></em>, the event handler function returned by <code class=\"language-text\">toggleImportance(task.id)</code> will be:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'importance of 3 needs to be toggled'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span></code></pre></div>\n<blockquote>\n<p>A short reminder here.\nThe string printed by the event handler is defined in a Java-like manner by adding the strings:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'importance of '</span> <span class=\"token operator\">+</span> id <span class=\"token operator\">+</span> <span class=\"token string\">' needs to be toggled'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>The <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals\">template string</a> syntax added in ES6\ncan be used to write similar strings in a much nicer way:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">importance of </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>id<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> needs to be toggled</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>We can now use the \"dollar-bracket\"-syntax to add parts to the string that will evaluate JavaScript expressions, e.g. the value of a variable.\nNotice that we use backticks (`) in template strings instead of quotation marks (') used in regular JavaScript strings.</p>\n</blockquote>\n<p>Individual tasks stored in the <em>json-server</em> backend can be modified in two different ways by making HTTP requests to the task's unique URL.\nWe can either <strong><em>replace</em></strong> the entire task with an <strong>HTTP PUT</strong> request or only change some of the task's properties with an <strong>HTTP PATCH</strong> request.</p>\n<h4>the <code class=\"language-text\">toggleImportanceOf</code> code</h4>\n<p>The final form of the event handler function is the following:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">toggleImportanceOf</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">id</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> url <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">http://localhost:3001/tasks/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>id<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span>\n  <span class=\"token keyword\">const</span> task <span class=\"token operator\">=</span> tasks<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">t</span> <span class=\"token operator\">=></span> t<span class=\"token punctuation\">.</span>id <span class=\"token operator\">===</span> id<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> changedTask <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>task<span class=\"token punctuation\">,</span> important<span class=\"token operator\">:</span> <span class=\"token operator\">!</span>task<span class=\"token punctuation\">.</span>important <span class=\"token punctuation\">}</span>\n\n  axios<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> changedTask<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setTasks</span><span class=\"token punctuation\">(</span>tasks<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">t</span> <span class=\"token operator\">=></span> t<span class=\"token punctuation\">.</span>id <span class=\"token operator\">!==</span> id <span class=\"token operator\">?</span> t <span class=\"token operator\">:</span> response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Almost every line of code in the function body contains important details.\nThe first line defines the unique URL for each task resource based on its id.</p>\n<p>The array <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find\"><code class=\"language-text\">find</code> method</a>\nis used to find the task we want to modify, and we then assign it to the <code class=\"language-text\">task</code> variable.</p>\n<p>After this, we create a <strong>new object</strong> that is an exact copy of the old task, apart from the important property.</p>\n<p>The code for creating the new object uses the\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax\"><strong>object spread syntax</strong></a>,\nwhich may seem a bit strange at first:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> changedTask <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>task<span class=\"token punctuation\">,</span> important<span class=\"token operator\">:</span> <span class=\"token operator\">!</span>task<span class=\"token punctuation\">.</span>important <span class=\"token punctuation\">}</span></code></pre></div>\n<p>In practice, <code class=\"language-text\">{ ...task }</code> creates a new object with copies of all the properties from the <code class=\"language-text\">task</code> object.\nWhen we add properties inside the curly braces after the spread object,\ne.g. <code class=\"language-text\">{ ...task, important: true }</code>, then the value of the <code class=\"language-text\">important</code> property of the new object will be <code class=\"language-text\">true</code>.\nIn our example, the <code class=\"language-text\">important</code> property gets the negation of its previous value in the original object.</p>\n<blockquote>\n<p><strong>Pertinent:</strong> <em>Why did we make a copy of the task object we wanted to modify when the following code also appears to work?</em></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> task <span class=\"token operator\">=</span> tasks<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">t</span> <span class=\"token operator\">=></span> t<span class=\"token punctuation\">.</span>id <span class=\"token operator\">===</span> id<span class=\"token punctuation\">)</span> \ntask<span class=\"token punctuation\">.</span>important <span class=\"token operator\">=</span> <span class=\"token operator\">!</span>task<span class=\"token punctuation\">.</span>important <span class=\"token comment\">// ☣️</span>\n\naxios<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> task<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span></code></pre></div>\n<p>Modifying <code class=\"language-text\">task</code> is not recommended because <code class=\"language-text\">task</code> is a reference to an item in the <code class=\"language-text\">tasks</code> array in the component's state,\nand as we recall <strong><em>we must <a href=\"https://react.dev/learn/updating-objects-in-state#why-is-mutating-state-not-recommended-in-react\">never mutate state directly</a> in React</em></strong>.</p>\n</blockquote>\n<p>Be aware that the new object <code class=\"language-text\">changedTask</code> is a\n<a href=\"https://en.wikipedia.org/wiki/Object_copying#Shallow_copy\"><strong>shallow copy</strong></a>,\nmeaning that it does not recursively make copies of all nested objects.\nIf some values of the old object were objects themselves,\nthen the <strong><em>copied values in the new object would reference the same objects that were in the old object</em></strong>.</p>\n<p>The new task is then sent with a PUT request to the backend where it will replace the old object.</p>\n<p>The callback function sets the component's <code class=\"language-text\">tasks</code> state to a new array that contains all the items from the previous <code class=\"language-text\">tasks</code> array,\nexcept for the old task which is <em>replaced by the updated version</em> returned by the server:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">axios<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> changedTask<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">setTasks</span><span class=\"token punctuation\">(</span>tasks<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">task</span> <span class=\"token operator\">=></span> task<span class=\"token punctuation\">.</span>id <span class=\"token operator\">!==</span> id <span class=\"token operator\">?</span> task <span class=\"token operator\">:</span> response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>This update is accomplished with the <code class=\"language-text\">map</code> method:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">tasks<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">task</span> <span class=\"token operator\">=></span> task<span class=\"token punctuation\">.</span>id <span class=\"token operator\">!==</span> id <span class=\"token operator\">?</span> task <span class=\"token operator\">:</span> response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span></code></pre></div>\n<p>The <code class=\"language-text\">map</code> method creates a new array by <strong><em>mapping every item from the old array into an item in the new array</em></strong>.\nIn our example, the new array is created conditionally:</p>\n<ul>\n<li>if <code class=\"language-text\">task.id !== id</code> is <em><code class=\"language-text\">true</code></em>; we copy the original item</li>\n<li>if the condition is <em><code class=\"language-text\">false</code></em>, then the task object returned by the server is added to the array instead.</li>\n</ul>\n<p>This <code class=\"language-text\">map</code> trick may seem a bit strange at first, but it's <em>worth spending some time wrapping your head around it</em>.\nWe will be using this method many times throughout the course.</p>\n<h3>Extracting Communication with the Backend into a Separate Module</h3>\n<p>The <code class=\"language-text\">App</code> component has become bloated after adding the code for communicating with the backend server.\nIn the spirit of the <a href=\"https://en.wikipedia.org/wiki/Single_responsibility_principle\">single responsibility principle</a>,\nwe deem it wise to extract this communication into its own <a href=\"/part2/rendering_a_collection_modules#refactoring-modules\">module</a>.</p>\n<p>Let's create a <em>src/services</em> directory and add a file there called <em>tasks.js</em>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> axios <span class=\"token keyword\">from</span> <span class=\"token string\">'axios'</span>\n<span class=\"token keyword\">const</span> baseUrl <span class=\"token operator\">=</span> <span class=\"token string\">'http://localhost:3001/tasks'</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getAll</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> axios<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>baseUrl<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">create</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">newObject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> axios<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span>baseUrl<span class=\"token punctuation\">,</span> newObject<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">update</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">id<span class=\"token punctuation\">,</span> newObject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> axios<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>baseUrl<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>id<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> newObject<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{</span> \n  getAll<span class=\"token operator\">:</span> getAll<span class=\"token punctuation\">,</span> \n  create<span class=\"token operator\">:</span> create<span class=\"token punctuation\">,</span> \n  update<span class=\"token operator\">:</span> update \n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The module returns an object that has three functions (<code class=\"language-text\">getAll</code>, <code class=\"language-text\">create</code>, and <code class=\"language-text\">update</code>) as its properties that deal with tasks.\nThe functions directly return the promises returned by the axios methods.</p>\n<p>The <code class=\"language-text\">App</code> component uses <code class=\"language-text\">import</code> to get access to the module:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">import</span> taskService <span class=\"token keyword\">from</span> <span class=\"token string\">'./services/tasks'</span></span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></code></pre></div>\n<p>The functions of the module can be used directly with the imported variable <code class=\"language-text\">taskService</code> as follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    taskService</span><span class=\"gatsby-highlight-code-line\">      <span class=\"token punctuation\">.</span><span class=\"token function\">getAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">        <span class=\"token function\">setTasks</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span>  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">toggleImportanceOf</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">id</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> task <span class=\"token operator\">=</span> tasks<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">t</span> <span class=\"token operator\">=></span> t<span class=\"token punctuation\">.</span>id <span class=\"token operator\">===</span> id<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">const</span> changedTask <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>task<span class=\"token punctuation\">,</span> important<span class=\"token operator\">:</span> <span class=\"token operator\">!</span>task<span class=\"token punctuation\">.</span>important <span class=\"token punctuation\">}</span>\n\n<span class=\"gatsby-highlight-code-line\">    taskService</span><span class=\"gatsby-highlight-code-line\">      <span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span> changedTask<span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">        <span class=\"token function\">setTasks</span><span class=\"token punctuation\">(</span>tasks<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">task</span> <span class=\"token operator\">=></span> task<span class=\"token punctuation\">.</span>id <span class=\"token operator\">!==</span> id <span class=\"token operator\">?</span> task <span class=\"token operator\">:</span> response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span>  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">addTask</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    event<span class=\"token punctuation\">.</span><span class=\"token function\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">const</span> taskObject <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      content<span class=\"token operator\">:</span> newTask<span class=\"token punctuation\">,</span>\n      date<span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toISOString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      important<span class=\"token operator\">:</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0.5</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"gatsby-highlight-code-line\">    taskService</span><span class=\"gatsby-highlight-code-line\">      <span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>taskObject<span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">        <span class=\"token function\">setTasks</span><span class=\"token punctuation\">(</span>tasks<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">        <span class=\"token function\">setNewTask</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span>  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> App</code></pre></div>\n<p>Let's refactor this implementation further.\nWhen the <code class=\"language-text\">App</code> component uses the functions, it receives an object that contains the entire <code class=\"language-text\">response</code> for the HTTP request:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">taskService\n  <span class=\"token punctuation\">.</span><span class=\"token function\">getAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setTasks</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>The <code class=\"language-text\">App</code> component though only uses the <code class=\"language-text\">response.data</code> property of the response object.</p>\n<p>The module would be much nicer to use if, instead of the entire HTTP response, we would only get the response data.\nUsing the module would then look like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">taskService\n  <span class=\"token punctuation\">.</span><span class=\"token function\">getAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">initialTasks</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setTasks</span><span class=\"token punctuation\">(</span>initialTasks<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>We can achieve this by changing the code in the <em>tasks.js</em> module as follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> axios <span class=\"token keyword\">from</span> <span class=\"token string\">'axios'</span>\n<span class=\"token keyword\">const</span> baseUrl <span class=\"token operator\">=</span> <span class=\"token string\">'http://localhost:3001/tasks'</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getAll</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> request <span class=\"token operator\">=</span> axios<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>baseUrl<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span> <span class=\"token operator\">=></span> response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">create</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">newObject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> request <span class=\"token operator\">=</span> axios<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span>baseUrl<span class=\"token punctuation\">,</span> newObject<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span> <span class=\"token operator\">=></span> response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">update</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">id<span class=\"token punctuation\">,</span> newObject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> request <span class=\"token operator\">=</span> axios<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>baseUrl<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>id<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> newObject<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span> <span class=\"token operator\">=></span> response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{</span> \n  getAll<span class=\"token operator\">:</span> getAll<span class=\"token punctuation\">,</span> \n  create<span class=\"token operator\">:</span> create<span class=\"token punctuation\">,</span> \n  update<span class=\"token operator\">:</span> update \n<span class=\"token punctuation\">}</span></code></pre></div>\n<blockquote>\n<p><strong>FYI:</strong> the current code contains some duplicate code, but we will tolerate it for now:</p>\n</blockquote>\n<p>We no longer return the promise returned by <em>axios</em> directly.\nInstead, <strong><em>we assign the promise to the <code class=\"language-text\">request</code> variable and call its <code class=\"language-text\">then</code> method</em></strong>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getAll</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> request <span class=\"token operator\">=</span> axios<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>baseUrl<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span> <span class=\"token operator\">=></span> response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The last row in our function is simply a more compact expression of the same code as shown below:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getAll</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> request <span class=\"token operator\">=</span> axios<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>baseUrl<span class=\"token punctuation\">)</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">return</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">.</span>data</span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>The modified <code class=\"language-text\">getAll</code> function still returns a promise, as the <code class=\"language-text\">then</code> method of a promise also\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/then\">returns a promise</a>.</p>\n<p>After defining the parameter of the <code class=\"language-text\">then</code> method to directly return <code class=\"language-text\">response.data</code>, we have gotten the <code class=\"language-text\">getAll</code> function to work like we wanted it to.\nWhen the HTTP request is successful, the promise returns the data sent back in the response from the backend.</p>\n<p>We have to update the <code class=\"language-text\">App</code> component to work with the changes made to our module.\nWe have to fix the callback functions given as parameters to the <code class=\"language-text\">taskService</code> object's methods so that they <strong><em>use the directly returned data</em></strong> instead of <code class=\"language-text\">response.data</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    taskService\n      <span class=\"token punctuation\">.</span><span class=\"token function\">getAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">initialTasks</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">        <span class=\"token function\">setTasks</span><span class=\"token punctuation\">(</span>initialTasks<span class=\"token punctuation\">)</span></span>      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">toggleImportanceOf</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">id</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> task <span class=\"token operator\">=</span> tasks<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">t</span> <span class=\"token operator\">=></span> t<span class=\"token punctuation\">.</span>id <span class=\"token operator\">===</span> id<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">const</span> changedTask <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>task<span class=\"token punctuation\">,</span> important<span class=\"token operator\">:</span> <span class=\"token operator\">!</span>task<span class=\"token punctuation\">.</span>important <span class=\"token punctuation\">}</span>\n\n    taskService\n      <span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span> changedTask<span class=\"token punctuation\">)</span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">returnedTask</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">        <span class=\"token function\">setTasks</span><span class=\"token punctuation\">(</span>tasks<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">task</span> <span class=\"token operator\">=></span> task<span class=\"token punctuation\">.</span>id <span class=\"token operator\">!==</span> id <span class=\"token operator\">?</span> task <span class=\"token operator\">:</span> returnedTask<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span>      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">addTask</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    event<span class=\"token punctuation\">.</span><span class=\"token function\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">const</span> taskObject <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      content<span class=\"token operator\">:</span> newTask<span class=\"token punctuation\">,</span>\n      date<span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toISOString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      important<span class=\"token operator\">:</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0.5</span>\n    <span class=\"token punctuation\">}</span>\n\n    taskService\n      <span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>taskObject<span class=\"token punctuation\">)</span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">returnedTask</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">        <span class=\"token function\">setTasks</span><span class=\"token punctuation\">(</span>tasks<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>returnedTask<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span>        <span class=\"token function\">setNewTask</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This is all quite complicated and attempting to explain it may just make it harder to understand.\nThe internet is full of material discussing the topic, such as <a href=\"https://javascript.info/promise-chaining\">this one</a>.</p>\n<p>The <a href=\"https://github.com/getify/You-Dont-Know-JS/blob/1st-ed/async%20%26%20performance/ch3.md\">Promises Chapter</a> from the Async &#x26; Performance book of the\n<a href=\"https://github.com/getify/You-Dont-Know-JS/tree/2nd-ed\">You Don't Know JS</a> book series\nexplains the topic very thoroughly.</p>\n<p>Promises are central to modern JavaScript development and it is highly recommended to invest a reasonable amount of time into understanding them.</p>\n<h3>Cleaner Syntax for Defining Object Literals</h3>\n<p>The module defining task-related services currently exports an object\nwith the properties <code class=\"language-text\">getAll</code>, <code class=\"language-text\">create</code>, and <code class=\"language-text\">update</code> that are assigned to functions for handling tasks.</p>\n<blockquote>\n<p><strong>Reference:</strong> Here's he module's definition, from <em>src/services/tasks.js</em>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> axios <span class=\"token keyword\">from</span> <span class=\"token string\">'axios'</span>\n<span class=\"token keyword\">const</span> baseUrl <span class=\"token operator\">=</span> <span class=\"token string\">'http://localhost:3001/tasks'</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getAll</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> request <span class=\"token operator\">=</span> axios<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>baseUrl<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span> <span class=\"token operator\">=></span> response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">create</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">newObject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> request <span class=\"token operator\">=</span> axios<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span>baseUrl<span class=\"token punctuation\">,</span> newObject<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span> <span class=\"token operator\">=></span> response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">update</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">id<span class=\"token punctuation\">,</span> newObject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> request <span class=\"token operator\">=</span> axios<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>baseUrl<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>id<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> newObject<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span> <span class=\"token operator\">=></span> response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{</span> \n  getAll<span class=\"token operator\">:</span> getAll<span class=\"token punctuation\">,</span> \n  create<span class=\"token operator\">:</span> create<span class=\"token punctuation\">,</span> \n  update<span class=\"token operator\">:</span> update \n<span class=\"token punctuation\">}</span></code></pre></div>\n</blockquote>\n<p>The <em>tasks.js</em> module exports the following, rather peculiar looking, object:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span> \n  getAll<span class=\"token operator\">:</span> getAll<span class=\"token punctuation\">,</span> \n  create<span class=\"token operator\">:</span> create<span class=\"token punctuation\">,</span> \n  update<span class=\"token operator\">:</span> update \n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>It follows the <code class=\"language-text\">key:value</code> template for Javascript objects.\nThe labels to the left of the <code class=\"language-text\">:</code> are the <strong>keys</strong> of the object,\nwhereas the labels to the right are <strong>variables</strong> that are defined inside the module.</p>\n<p><em>Since the names of the keys and the assigned variables are the same, we can define the object using this shorthand:</em></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span> \n  getAll<span class=\"token punctuation\">,</span> \n  create<span class=\"token punctuation\">,</span> \n  update \n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>As a result, our <em>tasks.js</em> module definition's last portion gets simplified to:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// ...</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">update</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">id<span class=\"token punctuation\">,</span> newObject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ..</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{</span> getAll<span class=\"token punctuation\">,</span> create<span class=\"token punctuation\">,</span> update <span class=\"token punctuation\">}</span></span></code></pre></div>\n<p>In defining the object using this shorter notation, we make use of a\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Object_initializer#Property_definitions\">new feature</a>\nthat was introduced to JavaScript through ES6, enabling a slightly more compact way of defining objects using variables.</p>\n<p>To demonstrate this feature, let's consider a situation where we have the following values assigned to variables:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> name <span class=\"token operator\">=</span> <span class=\"token string\">'Paloma'</span>\n<span class=\"token keyword\">const</span> age <span class=\"token operator\">=</span> <span class=\"token number\">1</span></code></pre></div>\n<p>In older versions of JavaScript if we wanted to have an object with those properties, we had to define the object like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> person <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> name<span class=\"token punctuation\">,</span>\n  age<span class=\"token operator\">:</span> age\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>However, since both the property fields and the variable names in the object are the same, it's enough to simply write the following in ES6 JavaScript:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> person <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> name<span class=\"token punctuation\">,</span> age <span class=\"token punctuation\">}</span></code></pre></div>\n<p>The result is identical for both expressions.\nThey both create an object with a <code class=\"language-text\">name</code> property with the value <code class=\"language-text\">Paloma</code> and an <code class=\"language-text\">age</code> property with the value <code class=\"language-text\">1</code>.</p>\n<h3>Promises and Errors</h3>\n<p>If our application allowed users to delete tasks, we could end up in a situation where a user tries to change the importance of a task that has already been deleted from the system.</p>\n<p>Let's simulate this situation by making the <code class=\"language-text\">getAll</code> function of our task service (<em>tasks.js</em>) return *a <strong>hardcoded task</strong> that does not actually exist on the backend server*:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getAll</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> request <span class=\"token operator\">=</span> axios<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>baseUrl<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> nonExisting <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    id<span class=\"token operator\">:</span> <span class=\"token number\">10000</span><span class=\"token punctuation\">,</span>\n    content<span class=\"token operator\">:</span> <span class=\"token string\">'This task is non-existent on the server. It is misinformation.'</span><span class=\"token punctuation\">,</span>\n    date<span class=\"token operator\">:</span> <span class=\"token string\">'3127-01-15T17:30:31.098Z'</span><span class=\"token punctuation\">,</span>\n    important<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span> <span class=\"token operator\">=></span> response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>nonExisting<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>When we try to change the importance of the hardcoded task, we see the following error message in the console.\nThe error says that the backend server responded to our HTTP PUT request with a status code 404 <em>not found</em>.</p>\n<picture><img src=\"/static/0db563cc8eec854f9c93d25e3bb20060/5a190/23e.png\" alt=\"404 not found error in dev tools\" srcset=\"/static/0db563cc8eec854f9c93d25e3bb20060/772e8/23e.png 200w,\n/static/0db563cc8eec854f9c93d25e3bb20060/e17e5/23e.png 400w,\n/static/0db563cc8eec854f9c93d25e3bb20060/5a190/23e.png 800w,\n/static/0db563cc8eec854f9c93d25e3bb20060/7bf07/23e.png 1128w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p><strong><em>The application should be able to handle these types of error situations gracefully.</em></strong>\nUsers won't be able to tell that an error has occurred unless they happen to have their console open.\nThe only way the error can be seen in the application is that clicking the button does not affect the task's importance.</p>\n<p>We had <a href=\"/part2/getting_data_from_server#axios-and-promises\">previously mentioned</a> that a promise can be in one of three different states.\nWhen an HTTP request fails, the associated promise is <strong><em>rejected</em></strong>.\nOur current code does not handle this rejection in any way.</p>\n<p>The rejection of a promise is <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Using_promises\">handled</a>\nby providing the <code class=\"language-text\">then</code> method with a <strong><em>second callback function</em></strong>, which is called in the situation where the promise is rejected.</p>\n<p>The more common way of adding a handler for rejected promises is to use the\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/catch\"><code class=\"language-text\">catch</code> method</a>.</p>\n<p>In practice, the error handler for rejected promises is defined like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">axios\n  <span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http://example.com/probably_will_fail'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'success!'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fail'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>If the request fails, the event handler registered with the <code class=\"language-text\">catch</code> method gets called.</p>\n<p>The <code class=\"language-text\">catch</code> method is often utilized by placing it deeper within the promise chain.</p>\n<p>When our application makes an HTTP request, we are <strong>creating a <a href=\"https://javascript.info/promise-chaining\">promise chain</a></strong>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">axios\n  <span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>baseUrl<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>id<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> newObject<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span> <span class=\"token operator\">=></span> response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">changedTask</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>The <code class=\"language-text\">catch</code> method can be used to define a handler function at the end of a promise chain,\nwhich is <strong>called once any promise in the chain throws an error and the promise becomes <em>rejected</em>.</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">axios\n  <span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>baseUrl<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>id<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> newObject<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span> <span class=\"token operator\">=></span> response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">changedTask</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'promise rejected due to error'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Let's use this feature and register an error handler in the <code class=\"language-text\">App</code> component:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">toggleImportanceOf</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">id</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> task <span class=\"token operator\">=</span> tasks<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">t</span> <span class=\"token operator\">=></span> t<span class=\"token punctuation\">.</span>id <span class=\"token operator\">===</span> id<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> changedTask <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>task<span class=\"token punctuation\">,</span> important<span class=\"token operator\">:</span> <span class=\"token operator\">!</span>task<span class=\"token punctuation\">.</span>important <span class=\"token punctuation\">}</span>\n\n  taskService\n    <span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span> changedTask<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">returnedTask</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">setTasks</span><span class=\"token punctuation\">(</span>tasks<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">task</span> <span class=\"token operator\">=></span> task<span class=\"token punctuation\">.</span>id <span class=\"token operator\">!==</span> id <span class=\"token operator\">?</span> task <span class=\"token operator\">:</span> returnedTask<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span></span><span class=\"gatsby-highlight-code-line\">        <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">the task '</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>task<span class=\"token punctuation\">.</span>content<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">' was already deleted from server</span><span class=\"token template-punctuation string\">`</span></span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token function\">setTasks</span><span class=\"token punctuation\">(</span>tasks<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">t</span> <span class=\"token operator\">=></span> t<span class=\"token punctuation\">.</span>id <span class=\"token operator\">!==</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>The error message is displayed to the user with the trusty old\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window/alert\"><code class=\"language-text\">alert</code> dialog popu</a>,\nand the deleted task gets filtered out from the state.</p>\n<p>Removing an already deleted task from the application's state is done with the array\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter\"><code class=\"language-text\">filter</code> method</a>,\nwhich returns a new array containing only the items from the list for which the function that was passed as a parameter returns <em><code class=\"language-text\">true</code></em> for:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">tasks<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">t</span> <span class=\"token operator\">=></span> t<span class=\"token punctuation\">.</span>id <span class=\"token operator\">!==</span> id<span class=\"token punctuation\">)</span></code></pre></div>\n<p>It's probably not a good idea to use <code class=\"language-text\">alert</code> in more serious React applications.\nWe will soon learn a more advanced way of displaying messages and notifications to users.\nThere are situations, however, where a simple method like <code class=\"language-text\">alert</code> can function as a starting point.\nA more advanced method could always be added in later, given that there's time and energy for it.</p>\n<p>The code for the current state of our application can be found in the <em>part2-6</em> branch on <a href=\"https://github.com/comp227/part2-tasks/tree/part2-6\">GitHub</a>.</p>\n<h4>Web developers pledge v2</h4>\n<p>We will continue with\n<a href=\"/part1/a_more_complex_state_debugging_react_apps#web-developers-pledge\">our web developer pledge</a>\nbut will also add two more items:</p>\n<blockquote>\n<p>I pledge to:</p>\n<ul>\n<li><em>Use the network tab in the dev tools to ensure that the frontend and backend are communicating as expected</em></li>\n<li><em>Keep an eye on the state of the server to make sure that the data sent there by the frontend is handled as expected</em></li>\n</ul>\n</blockquote>\n</div>\n<div class=\"tasks\">\n<h3>Exercises 2.12-2.15</h3>\n<h4>2.12: Communities Step 7</h4>\n<p>Let's return to our communities application.</p>\n<p>Currently, any community that is added is not saved to a backend server.\nFix this situation.\nUse <strong><em><a href=\"http://localhost:3001/groups\">http://localhost:3001/groups</a></em></strong> as your backend URL.</p>\n<h4>2.13: Communities Step 8</h4>\n<p>Extract the code that handles the communication with the backend into its own module by following the example shown earlier in this part of the course material.</p>\n<h4>2.14: Communities Step 9</h4>\n<p>Make it possible for users to delete entries from the communities application.\nThe deletion can be done through a dedicated button for each community listed.\nYou can confirm the action from the user by using the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window/confirm\"><code class=\"language-text\">window.confirm</code> method</a>:</p>\n<picture><img src=\"/static/66b60748b506ed92ffc1dda2989bcaaa/96e92/24e.png\" alt=\"2.17 window confirm feature screenshot\" srcset=\"/static/66b60748b506ed92ffc1dda2989bcaaa/772e8/24e.png 200w,\n/static/66b60748b506ed92ffc1dda2989bcaaa/e17e5/24e.png 400w,\n/static/66b60748b506ed92ffc1dda2989bcaaa/96e92/24e.png 779w\" sizes=\"(max-width: 779px) 100vw, 779px\"></picture>\n<p>The associated resource for a group in the backend can be deleted by making an <strong>HTTP DELETE</strong> request to the resource's URL.\nIf we are deleting e.g. a group that has the <code class=\"language-text\">id</code> <em><code class=\"language-text\">2</code></em>, we would have to make an <strong>HTTP DELETE</strong> request to the URL <strong><em>localhost:3001/groups/2</em></strong>.\nNo data is sent with the request.</p>\n<p>You can make an HTTP DELETE request with the <a href=\"https://github.com/axios/axios\"><em>axios</em></a> library in the same way that we make all of the other requests.</p>\n<blockquote>\n<p><strong>Pertinent:</strong> You can't use the name <code class=\"language-text\">delete</code> for a variable because it's a reserved word in JavaScript.\nE.g. the following is not possible:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// use some other name for variable!</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">delete</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">id</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</blockquote>\n<h4>2.15*: Communities Step 10</h4>\n<p><em>Why is there a star on the exercise? See <a href=\"/part0/general_info#taking-the-course\">here</a> for the explanation.</em></p>\n<p>Change the functionality so that if a URL is added to an already existing community, the <strong>new URL will replace the old URL</strong>.\nIt's recommended to use the <strong>HTTP PUT</strong> method for updating the URL.</p>\n<p>If a community already exists, the application can confirm the action from the user:</p>\n<picture><img src=\"/static/7fafe418e7ba162e5bc96b1a50275483/108f8/16e.png\" alt=\"2.18 screenshot alert confirmation\" srcset=\"/static/7fafe418e7ba162e5bc96b1a50275483/772e8/16e.png 200w,\n/static/7fafe418e7ba162e5bc96b1a50275483/e17e5/16e.png 400w,\n/static/7fafe418e7ba162e5bc96b1a50275483/108f8/16e.png 777w\" sizes=\"(max-width: 777px) 100vw, 777px\"></picture>\n</div>","frontmatter":{"mainImage":{"publicURL":"/static/8869c2e065a6ae187c633a378e6fa6be/part-2.svg"},"part":2,"letter":"d","lang":"en"}}},"pageContext":{"part":2,"letter":"d","lang":"en"}}}