{"componentChunkName":"component---src-templates-content-template-js","path":"/part3/deploying_app_to_internet","result":{"data":{"markdownRemark":{"html":"<div class=\"content\">\n<p>Next, let's connect the frontend we made in <a href=\"/part2\">part 2</a> to our newly built backend.\n<strong><em>Start up both frontend and backend via different terminal windows</em></strong>.</p>\n<p>In the previous part, the frontend could ask for the list of tasks from the <em>json-server</em> we had as a backend, from the address <a href=\"http://localhost:3001/tasks\">http://localhost:3001/tasks</a>.\nOur backend has a slightly different URL structure now, as the tasks can be found at <a href=\"http://localhost:3001/api/tasks\">http://localhost:3001/api/tasks</a>.\nLet's change the attribute <code class=\"language-text\">baseUrl</code> <strong>in the frontend tasks app at <em>src/services/tasks.js</em></strong> like so:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> axios <span class=\"token keyword\">from</span> <span class=\"token string\">'axios'</span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> baseUrl <span class=\"token operator\">=</span> <span class=\"token string\">'http://localhost:3001/api/tasks'</span></span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getAll</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> request <span class=\"token operator\">=</span> axios<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>baseUrl<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span> <span class=\"token operator\">=></span> response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// ...</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{</span> getAll<span class=\"token punctuation\">,</span> create<span class=\"token punctuation\">,</span> update <span class=\"token punctuation\">}</span></code></pre></div>\n<p>Now frontend's GET request to <a href=\"http://localhost:3001/api/tasks\">http://localhost:3001/api/tasks</a> does not work for some reason:</p>\n<picture><img src=\"/static/69d32caa8ec582411de0891e000a1e11/5a190/3ae.png\" alt=\"Get request showing error in dev tools\" srcset=\"/static/69d32caa8ec582411de0891e000a1e11/772e8/3ae.png 200w,\n/static/69d32caa8ec582411de0891e000a1e11/e17e5/3ae.png 400w,\n/static/69d32caa8ec582411de0891e000a1e11/5a190/3ae.png 800w,\n/static/69d32caa8ec582411de0891e000a1e11/c1b63/3ae.png 1200w,\n/static/69d32caa8ec582411de0891e000a1e11/2d2d6/3ae.png 1205w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p><em>What's going on here?</em>\nWe can access that same backend URL from a browser and Postman without any problems! ðŸ˜¤</p>\n<h3>Same origin policy and CORS</h3>\n<p>The issue lies with a concept called: <strong>same origin policy</strong>.\nA URL's origin is defined by the combination of three things:</p>\n<ul>\n<li>protocol (AKA scheme)</li>\n<li>hostname</li>\n<li>port</li>\n</ul>\n<p>Take this example URL to see how it's broken down:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">URL: http://example.com:80/index.html\n  \nprotocol: http\nhost: example.com\nport: 80</code></pre></div>\n<p>When you visit a website (i.e <a href=\"https://homestarrunner.com/\">https://homestarrunner.com/</a>), the browser issues a <strong><em>request to the server</em></strong> on which the website (homestarrunner.com) is hosted.\nThe <em>response sent by the server</em> is an HTML file that may contain one or more references to external assets/resources hosted\neither on:</p>\n<ul>\n<li>the same server that <em><code class=\"language-text\">homestarrunner.com</code></em> is hosted on</li>\n<li>a different website.</li>\n</ul>\n<p>When the browser sees reference(s) to a URL in the source HTML, <em>it issues a request</em>.\nIf the request is issued <em>using the URL that the source HTML was fetched from</em>, then the browser processes the response without any issues. ðŸ˜Ž</p>\n<p>However, *if the resource is fetched <strong>using a URL that doesn't share the same origin(scheme, host, port)</strong> as the source HTML*,\nthe browser will have to <strong><em>check the <code class=\"language-text\">Access-Control-Allow-origin</code> response header</em></strong>. ðŸ˜”</p>\n<p>If it contains a <code class=\"language-text\">*</code> or the URL of the source HTML, the browser will process the response. ðŸ˜Ž</p>\n<p>Otherwise, the browser will refuse to process it and throw an error. ðŸ˜­</p>\n<p>The <strong>same-origin policy</strong> is a security mechanism implemented by browsers to prevent session hijacking among other security vulnerabilities.</p>\n<p>To enable legitimate cross-origin requests (requests to URLs that don't share the same origin),\nW3C came up with a mechanism called <strong>CORS</strong> (Cross-origin Resource Sharing).\nAccording to <a href=\"https://en.wikipedia.org/wiki/Cross-origin_resource_sharing\">Wikipedia</a>:</p>\n<blockquote>\n<p><em>Cross-origin resource sharing (CORS) is a mechanism that allows restricted resources (e.g. fonts)\non a web page to be requested from another domain outside the domain from which the first resource was served.\nA web page may freely embed cross-origin images, stylesheets, scripts, iframes, and videos.\nCertain \"cross-domain\" requests, notably Ajax requests, are forbidden by default by the same-origin security policy.</em></p>\n</blockquote>\n<p>The problem is that, by default, the <strong>JavaScript code in a browser application can only communicate with a server in the same\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy\">origin</a></strong>.\n*Because our server is in localhost port <code class=\"language-text\">3001</code>, while our frontend is in localhost port <code class=\"language-text\">5173</code>, <strong>they do not have the same origin*</strong>.</p>\n<p>Keep in mind, that <a href=\"https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy\">same-origin policy</a> and CORS are not specific to React or Node.\nThey are universal principles regarding the safe operation of web applications.</p>\n<p>We can allow requests from other <strong>origins</strong> by using Node's <a href=\"https://github.com/expressjs/cors\"><code class=\"language-text\">cors</code></a> middleware.</p>\n<p>In your <strong><em>backend</em></strong> repository, install <strong>cors</strong> with the command</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> i cors</code></pre></div>\n<p>Use the middleware in your backend's <em>index.js</em> to allow requests from all origins:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> cors <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'cors'</span><span class=\"token punctuation\">)</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token function\">cors</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>And the frontend works*!</p>\n<blockquote>\n<p><strong>*</strong> While we can now see the tasks on the frontend, changing the task's importance does not work, as we have yet to implement that on the backend.</p>\n</blockquote>\n<p>You can read more about CORS from <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS\">Mozilla's page</a>.</p>\n<p>The setup of our app looks now as follows:</p>\n<picture><img src=\"/static/03ecf9d5cd78522af1d902832fcaf5d9/664c8/100.png\" alt=\"diagram of react app and browser\" srcset=\"/static/03ecf9d5cd78522af1d902832fcaf5d9/772e8/100.png 200w,\n/static/03ecf9d5cd78522af1d902832fcaf5d9/e17e5/100.png 400w,\n/static/03ecf9d5cd78522af1d902832fcaf5d9/664c8/100.png 524w\" sizes=\"(max-width: 524px) 100vw, 524px\"></picture>\n<p>The react app running in the browser now fetches the data from node/express-server that runs in <a href=\"http://localhost:3001\">localhost:3001</a>.</p>\n<h3>Application to the Internet</h3>\n<p>Now that the whole stack communicates with one another, let's move our application to the Internet!\nBefore we can do that though, we'll need to set up a few things.</p>\n<h4>Some backstory</h4>\n<p>Imagine your business has a live website, and you want to develop a new feature with your co-workers.\nHowever, you need time to develop that feature and yet your existing site still needs to function.\nYour business, like most others, needs to be able to separate working on code from <strong>deploying</strong> those features to a live web server that serves your customers.\nFor us to have a separate place that is <em>\"live\"</em>,\nwe will need to create a separate <strong>deploy staging area</strong> between uploading changes to a shared repository that everyone can see.\nTo better illustrate this, let me present to you this dreadful drawing of what we have so far.</p>\n<picture><img src=\"/static/6611916f6980d80295423d04afbd0abb/2d7ab/fork_step_1.png\" alt=\"drawing of git diagram\" srcset=\"/static/6611916f6980d80295423d04afbd0abb/772e8/fork_step_1.png 200w,\n/static/6611916f6980d80295423d04afbd0abb/e17e5/fork_step_1.png 400w,\n/static/6611916f6980d80295423d04afbd0abb/2d7ab/fork_step_1.png 526w\" sizes=\"(max-width: 526px) 100vw, 526px\"></picture>\n<p>In this diagram, the term \"<code class=\"language-text\">You</code>\" represents the work that is on your computer in WebStorm,\nwhile <code class=\"language-text\">comp227/git</code> is your lab repo on GitHub that has your handle name.\nWhen you click <code class=\"language-text\">Sync changes</code>, in WebStorm, that causes your changes to be synced with this repository that is on comp 227.\nThat repo can be shared across different folks and devices.\nThink of a shared repository as something that ends up storing your work, like a google drive,\nbut with a way of better keeping track of different versions of your code.</p>\n<p>What we need then, is a way of uploading that code to an <strong><em>actual server that will serve web pages</em></strong>.\nSomething that is accessible by the rest of the internet, so that other folks can see the actual webpage,\nrather than just the assortment of files that are in your repo.\nSo what we need to figure out is something like this.</p>\n<picture><img src=\"/static/b53b9f5a2b4258eaeda58d5bfa539567/5a190/fork_step_2.png\" alt=\"diagram of the deployment server\" srcset=\"/static/b53b9f5a2b4258eaeda58d5bfa539567/772e8/fork_step_2.png 200w,\n/static/b53b9f5a2b4258eaeda58d5bfa539567/e17e5/fork_step_2.png 400w,\n/static/b53b9f5a2b4258eaeda58d5bfa539567/5a190/fork_step_2.png 800w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>While we could create something that auto-magically uploads our changes from git to the web server (which would be awesome),\nwe run into another small issue.\nHow do we differentiate between sharing code with folks (or even with ourselves as we are working on it)\nversus having something that we want to deploy to the outside world?</p>\n<picture><img src=\"/static/d1245e859cc2595c4040ca7afc1cdf91/5a190/fork_step_3.png\" alt=\"drawing with team members with git and a web server\" srcset=\"/static/d1245e859cc2595c4040ca7afc1cdf91/772e8/fork_step_3.png 200w,\n/static/d1245e859cc2595c4040ca7afc1cdf91/e17e5/fork_step_3.png 400w,\n/static/d1245e859cc2595c4040ca7afc1cdf91/5a190/fork_step_3.png 800w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>We can't just have an automatic link between the GitHub server and the web server,\n<em>since we may want to share something on the GitHub server with our team members but do not want to share it with the world just yet</em>.\nInstead, we'll need to have a separate <strong>deploy</strong> step that involves us deploying the code to the web.\nWhile there are many ways to separate these two systems,\nwe are going to follow a workflow that fits with our permissions and circumstances.\nWhat we are going to do is to have a <strong>fork</strong> of our comp227 repo that we will place into our personal account.\nThis fork will merely exist to connect to a web server.\n<strong>DO NOT push any code to your personal repo.</strong>\nWe will only use the personal fork for deployment.\nThat way, we can still share code and yet have a one-click way of deploying our code to the web.\nSo what our final diagram will look like is something like this.</p>\n<picture><img src=\"/static/97f299dc06d9ae9fb0103910bdba4022/5a190/fork_step_4.png\" alt=\"full drawing of a deployment pipeline with git and cloud\" srcset=\"/static/97f299dc06d9ae9fb0103910bdba4022/772e8/fork_step_4.png 200w,\n/static/97f299dc06d9ae9fb0103910bdba4022/e17e5/fork_step_4.png 400w,\n/static/97f299dc06d9ae9fb0103910bdba4022/5a190/fork_step_4.png 800w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>So that is what we are going to set up next.</p>\n<h2>Setting up the fork of our project</h2>\n<p>Here we are going to go to GitHub to set up a fork.\nRemember that the fork's job is merely to interact with the web server.\n<strong><em>We will never commit code directly to this personal fork.</em></strong>\nThe fork though can sync with your repo in 227 and when it does sync, the web server will be updated magically.\nUp until this point we have not talked about forks or your repos, as we want to make sure that you set up and commit code to the 227 repo from WebStorm.</p>\n<p>To set up a fork, visit the webpage for your comp227 repo on GitHub.\nThis can be accessed if you go to <em><code class=\"language-text\">github.com/comp227/lab3-yourusername</code></em></p>\n<p>Once there, you will see a fork button at the upper right, with a picture similar to this:\n<img src=\"https://i.imgur.com/1M86XYR.png\" alt=\"fork repo\"></p>\n<p>Once you click <strong>Fork</strong>, you'll be presented with another intermediate page.\nI would change the name of the repo so that it has the word <em><code class=\"language-text\">deploy</code></em> and confirm the fork will be in your personal account.\nOnce you're ready, click the <strong>Create fork</strong> button at the bottom.</p>\n<img src=\"https://i.imgur.com/ZYOJCHc.png\" alt=\"create fork options\">\n<p>Notice that your fork will be out of your own GitHub handle and not be from 227.\nRemember that when you make changes to your repo, if you'd like to deploy them,\nyou'll only ever <strong><em>visit your fork on GitHub and sync the changes</em></strong> once everything is connected.</p>\n<img src=\"https://i.imgur.com/xlnsalk.png\" alt=\"showing sync fork on GitHub\">\n<h3>Our rationale for using Render</h3>\n<p>There are an ever-growing number of services that can be used to host an app on the internet.\nThe developer-friendly services like PaaS (i.e. Platform as a Service) take care of installing the execution environment (e.g. Node.js)\nand could also provide various services such as databases.</p>\n<p>For a decade, <a href=\"http://heroku.com\">Heroku</a> was dominating the PaaS scene.\nUnfortunately, Heroku's free tier ended on 11/27/2022.\nThis is very unfortunate for many developers, especially students.\nThey do have <a href=\"https://www.heroku.com/students\">a student program</a> that provides some free credits, but I would advise against it.</p>\n<p>While there are replacements for Heroku that could work with this course like:</p>\n<ul>\n<li><a href=\"https://fly.io\">Fly.io</a></li>\n<li><a href=\"https://railway.app/\">Railway</a></li>\n<li><a href=\"https://www.cyclic.sh/\">Cyclic</a></li>\n<li><a href=\"https://replit.com\">Replit</a></li>\n<li><a href=\"https://codesandbox.io\">CodeSandBox</a></li>\n</ul>\n<p>We will be using <a href=\"https://render.com/\">Render</a> in this class, because:</p>\n<ul>\n<li>They have a free option</li>\n<li>They do not require a credit card</li>\n</ul>\n<p>One downside that we have with Render is that we'll need to create an extra step to make it work.</p>\n<p>So let's get ourselves started in using Render</p>\n<h3>Using Render</h3>\n<p>To start, go to the <a href=\"https://render.com/\">Render website</a> and create an account.\nWhen creating an account you can either connect it automatically to your GitHub or you can provide them with an email.\nConnecting an account that is linked to your GitHub profile removes one step later on about authenticating.\nFor now, I'll assume you are using an email - in that case you'll need to confirm your email address.</p>\n<p>Once you confirm and successfully create your account, go to <a href=\"http://dashboard.render.com\">http://dashboard.render.com</a>.</p>\n<p>From the dashboard, you'll create a <strong><em>New Web Service</em></strong>.</p>\n<picture><img src=\"/static/87489a02602421130c84612449b32208/5a190/render_dashboard.png\" alt=\"screenshot of the render dashboard and clicking on the new web service\" srcset=\"/static/87489a02602421130c84612449b32208/772e8/render_dashboard.png 200w,\n/static/87489a02602421130c84612449b32208/e17e5/render_dashboard.png 400w,\n/static/87489a02602421130c84612449b32208/5a190/render_dashboard.png 800w,\n/static/87489a02602421130c84612449b32208/c1b63/render_dashboard.png 1200w,\n/static/87489a02602421130c84612449b32208/afa26/render_dashboard.png 1258w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>If you created your account with an email, at this point, you'll select the option to <strong>connect a GitHub account</strong>.\nYou'll then go through a series of pages that prompt you to authorize Render to access your GitHub account, including entering your GitHub password.\nOnce you get back to Render, if you linked your account correctly, you should see your repos with a purple connect button alongside each one.</p>\n<picture><img src=\"/static/bf01ffd30a39e6804b946773163e5ae8/5a190/render_dashboard_connected.png\" alt=\"screenshot of connected render dashboard to GitHub\" srcset=\"/static/bf01ffd30a39e6804b946773163e5ae8/772e8/render_dashboard_connected.png 200w,\n/static/bf01ffd30a39e6804b946773163e5ae8/e17e5/render_dashboard_connected.png 400w,\n/static/bf01ffd30a39e6804b946773163e5ae8/5a190/render_dashboard_connected.png 800w,\n/static/bf01ffd30a39e6804b946773163e5ae8/c1b63/render_dashboard_connected.png 1200w,\n/static/bf01ffd30a39e6804b946773163e5ae8/8d68c/render_dashboard_connected.png 1234w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Click the connect button for your forked repo.\nYou'll then be taken to a page to place all of your options to deploy the page.\nHere's the changes I made, since the Branch should be <em><code class=\"language-text\">main</code></em>, and environment should be <em><code class=\"language-text\">node</code></em>.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">name<span class=\"token operator\">:</span> comp227<span class=\"token operator\">-</span>osvaldo<span class=\"token operator\">-</span>part3\n\nBuild Command<span class=\"token operator\">:</span> npm i\nStart Command<span class=\"token operator\">:</span> npm start</code></pre></div>\n<p>Then scroll all the way down to the bottom and click <strong><em>Create Web Service</em></strong>.\nAt that point, go take a walk outside and then come back.\nOnce it's deployed, you'll see your link for your live site.</p>\n<p>Render recently changed their pricing model, but has a limit on the number of build minutes,\nso it will be important not to keep deploying every time you make a change and to treat it like many web servers do (thoroughly checking and testing things)</p>\n<p>Also, you are given build minutes <strong><em>to have one web service up at a time</em></strong>.\nThere is an option to suspend a web service by clicking on it from the dashboard.</p>\n<p>For many PaaS services, we need to change the definition of the port our application uses at the bottom of the <em>index.js</em> file like so:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> <span class=\"token constant\">PORT</span> <span class=\"token operator\">=</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">PORT</span> <span class=\"token operator\">||</span> <span class=\"token number\">3001</span></span>app<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token constant\">PORT</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Server running on port </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token constant\">PORT</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Now we are using the port defined in the <a href=\"https://en.wikipedia.org/wiki/Environment_variable\">environment variable</a> <code class=\"language-text\">PORT</code> or port <em><code class=\"language-text\">3001</code></em> if the environment variable <code class=\"language-text\">PORT</code> is <em><code class=\"language-text\">undefined</code></em>.\nMany cloud services configure the application port based on that environment variable.</p>\n<p>If you run into problems with the first run through, you may have to select <strong><em>Manual Deploy</em></strong> and try it again.\nRealize that this part of the course is the most unstable at this point.\nPlease ask for help on Discord!</p>\n<p>If your build keeps failing due to unhealthy checks,\nmake sure that you have changed the bottom of the <em>index.js</em> file like so:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> <span class=\"token constant\">PORT</span> <span class=\"token operator\">=</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">PORT</span> <span class=\"token operator\">||</span> <span class=\"token number\">3001</span></span>app<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token constant\">PORT</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Server running on port </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token constant\">PORT</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Don't forget to add your <em>cors</em> package to <code class=\"language-text\">dependencies</code> in <em>package.json</em>\nand you might need to remove the <code class=\"language-text\">morgan</code> code from the server application.</p>\n<p>If everything went well, the application works:</p>\n<picture><img src=\"/static/c0bfaa4927a124fc7059695742a6fcdb/e9beb/25ea.png\" alt=\"live site screenshot of api/tasks showing JSON\" srcset=\"/static/c0bfaa4927a124fc7059695742a6fcdb/772e8/25ea.png 200w,\n/static/c0bfaa4927a124fc7059695742a6fcdb/e17e5/25ea.png 400w,\n/static/c0bfaa4927a124fc7059695742a6fcdb/e9beb/25ea.png 730w\" sizes=\"(max-width: 730px) 100vw, 730px\"></picture>\n<p>The frontend can also work with the backend on Render!</p>\n<p>You can check this by changing the backend's address on the frontend to be the backend's address in Render instead of <a href=\"http://localhost:3001\">localhost:3001</a>.</p>\n<p>The next question is, <strong><em>how do we deploy the frontend to the Internet?</em></strong>\nWe have multiple options.\nLet's go through one of them next.</p>\n<h3>Frontend production build</h3>\n<p>So far we have been running React code in <strong>development mode</strong>.\nIn development mode the application is configured to give clear error messages, immediately render code changes to the browser, and so on.</p>\n<p>When the application is deployed, we must create a <a href=\"https://vitejs.dev/guide/build.html\"><strong>production build</strong></a>\nor a version of the application which is optimized for production.</p>\n<p>A production build of applications created with <em>Vite</em> can be created with the command\n<a href=\"https://vitejs.dev/guide/build.html\"><code class=\"language-text\">npm run build</code></a>.</p>\n<p>Let's run this command from the <strong><em>base folder of the frontend project</em></strong> (<em><code class=\"language-text\">reading</code></em>) that we developed in <a href=\"/part2\">Part 2</a>.</p>\n<p>This creates a directory called <em>dist</em> (which contains the only HTML file of our application, <em>index.html</em> ) and the directory <em>assets</em>.\nThe <a href=\"https://en.wikipedia.org/wiki/Minification_(programming)\"><strong>minified</strong></a> version of our application's JavaScript code will be generated in the <em>dist</em> directory.\nEven though the application code is in multiple files, all of the JavaScript will be minified into one file.\nAll of the code from all of the application's dependencies will also be minified into this single file.</p>\n<p>The minified code is not very readable.\nHere's what part of the code looks like (<em>with a few line breaks added</em>):</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">Qf</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">return</span> <span class=\"token function\">ko</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>Cu<span class=\"token punctuation\">,</span>e<span class=\"token punctuation\">)</span><span class=\"token operator\">?</span><span class=\"token operator\">!</span><span class=\"token number\">0</span><span class=\"token operator\">:</span><span class=\"token function\">ko</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>xu<span class=\"token punctuation\">,</span>e<span class=\"token punctuation\">)</span><span class=\"token operator\">?</span><span class=\"token operator\">!</span><span class=\"token number\">1</span><span class=\"token operator\">:</span>Wf<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token operator\">?</span>Cu<span class=\"token punctuation\">[</span>e<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token operator\">!</span><span class=\"token number\">0</span><span class=\"token operator\">:</span><span class=\"token punctuation\">(</span>xu<span class=\"token punctuation\">[</span>e<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token operator\">!</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token operator\">!</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">Kf</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e<span class=\"token punctuation\">,</span>t<span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">,</span>r</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">!==</span><span class=\"token keyword\">null</span><span class=\"token operator\">&amp;&amp;</span>n<span class=\"token punctuation\">.</span>type<span class=\"token operator\">===</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">return</span><span class=\"token operator\">!</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">case</span><span class=\"token string\">\"function\"</span><span class=\"token operator\">:</span><span class=\"token keyword\">case</span><span class=\"token string\">\"symbol\"</span><span class=\"token operator\">:</span><span class=\"token keyword\">return</span><span class=\"token operator\">!</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">case</span><span class=\"token string\">\"boolean\"</span><span class=\"token operator\">:</span><span class=\"token keyword\">return</span> r<span class=\"token operator\">?</span><span class=\"token operator\">!</span><span class=\"token number\">1</span><span class=\"token operator\">:</span>n<span class=\"token operator\">!==</span><span class=\"token keyword\">null</span><span class=\"token operator\">?</span><span class=\"token operator\">!</span>n<span class=\"token punctuation\">.</span>acceptsBooleans<span class=\"token operator\">:</span><span class=\"token punctuation\">(</span>e<span class=\"token operator\">=</span>e<span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>e<span class=\"token operator\">!==</span><span class=\"token string\">\"data-\"</span><span class=\"token operator\">&amp;&amp;</span>e<span class=\"token operator\">!==</span><span class=\"token string\">\"aria-\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">default</span><span class=\"token operator\">:</span><span class=\"token keyword\">return</span><span class=\"token operator\">!</span><span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">Xf</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e<span class=\"token punctuation\">,</span>t<span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">,</span>r</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>t<span class=\"token operator\">===</span><span class=\"token keyword\">null</span><span class=\"token operator\">||</span><span class=\"token keyword\">typeof</span> t<span class=\"token operator\">></span><span class=\"token string\">\"u\"</span><span class=\"token operator\">||</span><span class=\"token function\">Kf</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">,</span>t<span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">,</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">return</span><span class=\"token operator\">!</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span><span class=\"token keyword\">return</span><span class=\"token operator\">!</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">!==</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">case</span> <span class=\"token number\">3</span><span class=\"token operator\">:</span><span class=\"token keyword\">return</span><span class=\"token operator\">!</span>t<span class=\"token punctuation\">;</span><span class=\"token keyword\">case</span> <span class=\"token number\">4</span><span class=\"token operator\">:</span><span class=\"token keyword\">return</span> t<span class=\"token operator\">===</span><span class=\"token operator\">!</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">case</span> <span class=\"token number\">5</span><span class=\"token operator\">:</span><span class=\"token keyword\">return</span> <span class=\"token function\">isNaN</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">case</span> <span class=\"token number\">6</span><span class=\"token operator\">:</span><span class=\"token keyword\">return</span> <span class=\"token function\">isNaN</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span><span class=\"token operator\">||</span><span class=\"token number\">1</span><span class=\"token operator\">></span>t<span class=\"token punctuation\">}</span><span class=\"token keyword\">return</span><span class=\"token operator\">!</span><span class=\"token number\">1</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">fe</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e<span class=\"token punctuation\">,</span>t<span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">,</span>r<span class=\"token punctuation\">,</span>l<span class=\"token punctuation\">,</span>o<span class=\"token punctuation\">,</span>i</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>acceptsBooleans<span class=\"token operator\">=</span>t<span class=\"token operator\">===</span><span class=\"token number\">2</span><span class=\"token operator\">||</span>t<span class=\"token operator\">===</span><span class=\"token number\">3</span><span class=\"token operator\">||</span>t<span class=\"token operator\">===</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>attributeName<span class=\"token operator\">=</span>r<span class=\"token punctuation\">,</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>attributeNamespace<span class=\"token operator\">=</span>l<span class=\"token punctuation\">,</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>mustUseProperty<span class=\"token operator\">=</span>n<span class=\"token punctuation\">,</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>propertyName<span class=\"token operator\">=</span>e<span class=\"token punctuation\">,</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>type<span class=\"token operator\">=</span>t<span class=\"token punctuation\">,</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>sanitizeURL<span class=\"token operator\">=</span>o<span class=\"token punctuation\">,</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>removeEmptyString<span class=\"token operator\">=</span>i<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>Serving static files from the backend</h3>\n<p>There are many options for deploying the frontend.\nNonetheless, we will:</p>\n<ol>\n<li>copy the production build (that <em>dist</em> directory) from frontend</li>\n<li>paste it in the root of the backend repository and</li>\n<li>configure the backend to show the frontend's <strong><em>main page</em></strong> (the file <em>dist/index.html</em>) as the <strong>backend's main page</strong>.</li>\n</ol>\n<p>We begin by copying the production build of the frontend to the root of the backend.\nThe copying can be done from the frontend directory by opening up the terminal in WebStorm from the frontend's project and then typing:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">cp</span> -r dist <span class=\"token punctuation\">..</span>/tasks-backend_OR_NAME_OF_YOUR_BACKEND_DIR</code></pre></div>\n<blockquote>\n<p>*Make sure you spam <strong><em>Tab</em></strong> as you are typing the folder path to ensure you have written it correctly!</p>\n</blockquote>\n<p>Otherwise, simply copy and paste.</p>\n<p>The backend directory should now look as follows:</p>\n<picture><img src=\"/static/14580b874be7ab2ae92e2d0e9d86e80c/5a190/27ea.png\" alt=\"bash screenshot of ls showing build directory\" srcset=\"/static/14580b874be7ab2ae92e2d0e9d86e80c/772e8/27ea.png 200w,\n/static/14580b874be7ab2ae92e2d0e9d86e80c/e17e5/27ea.png 400w,\n/static/14580b874be7ab2ae92e2d0e9d86e80c/5a190/27ea.png 800w,\n/static/14580b874be7ab2ae92e2d0e9d86e80c/1132d/27ea.png 1158w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>To make express show <strong>static content</strong>, the page <em>index.html</em> and the JavaScript, etc., it fetches,\nwe need a built-in middleware from express called <a href=\"http://expressjs.com/en/starter/static-files.html\"><strong><em>static</em></strong></a>.</p>\n<p>Then we add the following amidst the declarations of middleware in <em>index.js</em>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>express<span class=\"token punctuation\">.</span><span class=\"token function\">static</span><span class=\"token punctuation\">(</span><span class=\"token string\">'dist'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Whenever <em>express</em> gets an HTTP <em><code class=\"language-text\">GET</code></em> request it will first check if the <em>dist</em> directory contains a file corresponding to the request's address.\nIf a correct file is found, express will return it.</p>\n<p>Now HTTP <em><code class=\"language-text\">GET</code></em> requests to the address <strong><em><code class=\"language-text\">www.serversaddress.com/index.html</code></em></strong> or <strong><em><code class=\"language-text\">www.serversaddress.com</code></em></strong> will show the React frontend.\n<em><code class=\"language-text\">GET</code></em> requests to the address <strong><em><code class=\"language-text\">www.serversaddress.com/api/tasks</code></em></strong> will be handled by the backend's code.</p>\n<p>Because of our situation, both the frontend and the backend are at the same address,\nwe can declare <code class=\"language-text\">baseUrl</code> in the frontend's <em>services/tasks.js</em> as a <a href=\"https://www.w3.org/TR/WD-html40-970917/htmlweb.html#h-5.1.2\"><strong><em>relative URL</em></strong></a>.\nThis means we can leave out the part declaring the server.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> axios <span class=\"token keyword\">from</span> <span class=\"token string\">'axios'</span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> baseUrl <span class=\"token operator\">=</span> <span class=\"token string\">'/api/tasks'</span></span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getAll</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> request <span class=\"token operator\">=</span> axios<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>baseUrl<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span> <span class=\"token operator\">=></span> response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// ...</span></code></pre></div>\n<blockquote>\n<p><em>If you still have the non-existing error that we created previously, you can remove that and update your code to the <code class=\"language-text\">getAll</code> function from above</em></p>\n</blockquote>\n<p>After the change, we have to:</p>\n<ol>\n<li>*create a new production build of the <strong>frontend*</strong></li>\n<li>*copy it to the root of the <strong>backend</strong> repository*.</li>\n</ol>\n<p>The application can now be used from the <em>backend</em> address <a href=\"http://localhost:3001\">http://localhost:3001</a>:</p>\n<picture><img src=\"/static/3d72aefce370579ce469745b2ed977c7/5a190/28e.png\" alt=\"Tasks application screenshot\" srcset=\"/static/3d72aefce370579ce469745b2ed977c7/772e8/28e.png 200w,\n/static/3d72aefce370579ce469745b2ed977c7/e17e5/28e.png 400w,\n/static/3d72aefce370579ce469745b2ed977c7/5a190/28e.png 800w,\n/static/3d72aefce370579ce469745b2ed977c7/c1b63/28e.png 1200w,\n/static/3d72aefce370579ce469745b2ed977c7/4cdc7/28e.png 1327w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Our application now works exactly like the <a href=\"/part0/fundamentals_of_web_apps#single-page-app\">single-page app</a> example application we studied in part 0.</p>\n<p>When we use a browser to go to the address <a href=\"http://localhost:3001\">http://localhost:3001</a>, the server returns the <em>index.html</em> file from the <em>dist</em> directory.\nThe contents of the file are:</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token doctype\">&lt;!doctype html></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>en<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>UTF-8<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>icon<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>image/svg+xml<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>/vite.svg<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>viewport<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>width=device-width, initial-scale=1.0<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>Vite + React<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>module<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">crossorigin</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>/assets/index-HCaidufQ.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>stylesheet<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>/assets/index-0nvTxTIw.css<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>root<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    \n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>The file contains instructions to fetch a CSS stylesheet defining the styles of the application,\nand one <code class=\"language-text\">script</code> tag that instructs the browser to fetch the JavaScript code of the application - the actual React application.</p>\n<p>The React code fetches tasks from the server address <a href=\"http://localhost:3001/api/tasks\">http://localhost:3001/api/tasks</a> and renders them to the screen.\nThe communication between the server and the browser can be seen in the <strong><em>Network</em></strong> tab of the developer console:</p>\n<picture><img src=\"/static/bde31e7bf3d60fdd80a146bc7f81bc8c/5a190/29ea.png\" alt=\"Network tab of tasks application on the backend\" srcset=\"/static/bde31e7bf3d60fdd80a146bc7f81bc8c/772e8/29ea.png 200w,\n/static/bde31e7bf3d60fdd80a146bc7f81bc8c/e17e5/29ea.png 400w,\n/static/bde31e7bf3d60fdd80a146bc7f81bc8c/5a190/29ea.png 800w,\n/static/bde31e7bf3d60fdd80a146bc7f81bc8c/c1b63/29ea.png 1200w,\n/static/bde31e7bf3d60fdd80a146bc7f81bc8c/fe8a7/29ea.png 1223w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Below is a diagram of what the deployment-ready react app looks like:</p>\n<picture><img src=\"/static/9409770bee3d0da0d5456a7db9cedc6c/db910/101.png\" alt=\"diagram of deployment-ready react app\" srcset=\"/static/9409770bee3d0da0d5456a7db9cedc6c/772e8/101.png 200w,\n/static/9409770bee3d0da0d5456a7db9cedc6c/db910/101.png 396w\" sizes=\"(max-width: 396px) 100vw, 396px\"></picture>\n<p>Unlike when running the app in a development environment,\neverything is now in the same <em>node/express-backend</em> that runs in <a href=\"http://localhost:3001\">localhost:3001</a>.\nWhen the browser goes to the page, the file <em>index.html</em> is rendered.\nThat causes the browser to fetch the production version of the React app.\nOnce it starts to run, it fetches the JSON data from the address <a href=\"http://localhost:3001/api/tasks\">localhost:3001/api/tasks</a>.</p>\n<h3>The whole app to the internet</h3>\n<p>You are ready to deploy after ensuring:</p>\n<ul>\n<li>the production version of the application works locally</li>\n<li>the production build of the frontend has been added to the backend repository</li>\n<li>the repository has been pushed to the server</li>\n</ul>\n<p>To deploy, <em>visit your personal fork's code repository page</em>, and click the <strong><em>Sync Fork</em></strong> button.</p>\n<blockquote>\n<p><strong>Remember:</strong> if the automatic deployment does not work, you may need to select the <strong><em>Manual Deploy</em></strong> from the Render dashboard.</p>\n</blockquote>\n<p><a href=\"https://comp227-osvaldo-lab3.onrender.com/\">The application</a>, (<em>aside than being slow</em>), works perfectly,\nexcept we haven't added the functionality for changing the importance of a task to the backend yet.</p>\n<picture><img src=\"/static/297a9c1e7a698c6671bba357bd81f2f0/5a190/30ea.png\" alt=\"screenshot of tasks application\" srcset=\"/static/297a9c1e7a698c6671bba357bd81f2f0/772e8/30ea.png 200w,\n/static/297a9c1e7a698c6671bba357bd81f2f0/e17e5/30ea.png 400w,\n/static/297a9c1e7a698c6671bba357bd81f2f0/5a190/30ea.png 800w,\n/static/297a9c1e7a698c6671bba357bd81f2f0/c1b63/30ea.png 1200w,\n/static/297a9c1e7a698c6671bba357bd81f2f0/1628f/30ea.png 1232w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Our application saves the tasks to a variable.\nIf the application crashes or is restarted, <strong>all of the data will disappear</strong>.</p>\n<p>The application needs a database.\nBefore we introduce one, let's go through a few things.</p>\n<p>Study our updated diagram of our application:</p>\n<picture><img src=\"/static/bd1612e96992e7b72afb21a868860fb6/5a190/102.png\" alt=\"diagram of react app on render with a database\" srcset=\"/static/bd1612e96992e7b72afb21a868860fb6/772e8/102.png 200w,\n/static/bd1612e96992e7b72afb21a868860fb6/e17e5/102.png 400w,\n/static/bd1612e96992e7b72afb21a868860fb6/5a190/102.png 800w,\n/static/bd1612e96992e7b72afb21a868860fb6/66caf/102.png 853w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>The node/express-backend now resides in the Render server.\nWhen the root address that is of the form <a href=\"https://comp227-osvaldo-lab3.onrender.com/\">https://comp227-osvaldo-lab3.onrender.com/</a> is accessed,\nthe browser loads and executes the React app that fetches the JSON data from the Render server.</p>\n<h3>Streamlining deploying of the frontend</h3>\n<p>To create a new production build of the frontend without some of the extra manual work,\nlet's add some npm scripts to the <strong><em>backend's package.json</em></strong>.</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">//...</span>\n    <span class=\"token property\">\"build:ui\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"rm -rf dist &amp;&amp; cd ../reading/ &amp;&amp; npm run build &amp;&amp; cp -r dist ../backend-reading\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"deploy\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"npm run build:ui &amp;&amp; git add . &amp;&amp; git commit -m npm_generated_rebuild_of_the_UI &amp;&amp; git push\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<blockquote>\n<p><em>Note for Windows users</em></p>\n<p>Back in part 0, I mentioned that you should work exclusively using git bash as your terminal of choice.\nThis is because Windows most popular terminal options <em>Command Prompt</em> and <em>Powershell</em>, do not natively support Linux-like commands.\nThis means that standard shell commands in <code class=\"language-text\">build:ui</code> would not work in Powershell.\nTo get the script to work in Powershell, it would have to be rewritten as:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token property\">\"build:ui\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"@powershell Remove-Item -Recurse -Force build &amp;&amp; cd ../frontend &amp;&amp; npm run build &amp;&amp; @powershell Copy-Item build -Recurse ../backend\"</span><span class=\"token punctuation\">,</span></code></pre></div>\n<p>Let's not rewrite all our shell scripts and <strong><em>stick to using git bash</em></strong>.</p>\n</blockquote>\n<p>Re-examine the text above.\nMake sure to modify the names of your directories to match your repos.</p>\n<p>The script <code class=\"language-text\">npm run build:ui</code> builds the frontend and copies the production version under the backend repository.\n<code class=\"language-text\">npm run deploy</code> releases the current backend and pushes it to GitHub.\nYou'll just need the final step of syncing your personal fork with what is in COMP 227 to get it to upload to Render.</p>\n<p>Notice that the directory paths in the script <code class=\"language-text\">build:ui</code> depend on the location of repositories in the file system.</p>\n<h3>Proxy</h3>\n<p>Changes on the frontend have caused it to no longer work in development mode (when started with command <code class=\"language-text\">npm run dev</code>),\nas the connection to the backend does not work,\nwhich you'll also have to start as well.</p>\n<picture><img src=\"/static/a7c79eb01b7c7a67fea00eaf81fdad8e/5a190/32ea.png\" alt=\"Network dev tools showing a 404 on getting tasks\" srcset=\"/static/a7c79eb01b7c7a67fea00eaf81fdad8e/772e8/32ea.png 200w,\n/static/a7c79eb01b7c7a67fea00eaf81fdad8e/e17e5/32ea.png 400w,\n/static/a7c79eb01b7c7a67fea00eaf81fdad8e/5a190/32ea.png 800w,\n/static/a7c79eb01b7c7a67fea00eaf81fdad8e/c1b63/32ea.png 1200w,\n/static/a7c79eb01b7c7a67fea00eaf81fdad8e/d9b5d/32ea.png 1224w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>This is due to changing the backend address to a relative URL:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> baseUrl <span class=\"token operator\">=</span> <span class=\"token string\">'/api/tasks'</span></code></pre></div>\n<p>Because in development mode the frontend is at the address <a href=\"http://localhost:5173\">localhost:5173</a>,\nthe requests to the backend go to the wrong address <a href=\"http://localhost:5173/api/tasks\">localhost:5173/api/tasks</a>.\nThe backend is at <a href=\"http://localhost:3001\">localhost:3001</a>.</p>\n<p>If the project was created with Vite, this problem is easy to solve.\nIt is enough to add the following declaration to the <strong><em>frontend's</em></strong> <em>vite.config.js</em> file.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">import</span> <span class=\"token punctuation\">{</span> defineConfig <span class=\"token punctuation\">}</span> from <span class=\"token string\">'vite'</span>\n<span class=\"token function\">import</span> react from <span class=\"token string\">'@vitejs/plugin-react'</span>\n\n// https://vitejs.dev/config/\n<span class=\"token builtin class-name\">export</span> default defineConfig<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  plugins: <span class=\"token punctuation\">[</span>react<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>,\n<span class=\"gatsby-highlight-code-line\">  server: <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    proxy: <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token string\">'/api'</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">        target: <span class=\"token string\">'http://localhost:3001'</span>,</span><span class=\"gatsby-highlight-code-line\">        changeOrigin: true,</span><span class=\"gatsby-highlight-code-line\">      <span class=\"token punctuation\">}</span>,</span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">}</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span>,</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>After a restart, the React development environment will work as a <a href=\"https://vitejs.dev/config/server-options.html#server-proxy\">proxy</a>.\nIf the React code does an HTTP request to a server address at <em><a href=\"http://localhost:5173\">http://localhost:5173</a></em> not managed by the React application itself\n(i.e. when requests are not about fetching the CSS or JavaScript of the application),\nthe request will be redirected to the server at <em><a href=\"http://localhost:3001\">http://localhost:3001</a></em>.</p>\n<p>Note that with the vite configuration shown above, only requests that are made to paths starting with <strong><em>/api</em></strong> are redirected to the server.</p>\n<p>A negative aspect of our approach is how complicated it is to deploy the frontend.\nDeploying a new version requires generating a new production build of the frontend and copying it to the backend repository.\nThis makes creating an automated <a href=\"https://martinfowler.com/bliki/DeploymentPipeline.html\"><strong>deployment pipeline</strong></a> more difficult.\nA deployment pipeline is an automated and controlled way to move the code from the computer of the developer through different tests and quality checks to the production environment.</p>\n<p>There are multiple ways to achieve this - for example placing both backend and frontend code\n<a href=\"https://github.com/mars/heroku-cra-node\">in the same repository</a> - but we will not go into those now.</p>\n<p>In some situations, it may be sensible to deploy the frontend code as its own application.</p>\n<p>You can find the code for our current backend in the <a href=\"https://github.com/comp227/part3-tasks-backend/tree/part3-3\"><em>part3-3</em> branch of our backend repo</a>.\nThe changes in frontend code are in <em>part3-3</em> branch of the <a href=\"https://github.com/comp227/part2-tasks/tree/part3-3\">frontend repository</a>.</p>\n</div>\n<div class=\"tasks\">\n<h3>Exercises 3.9-3.11</h3>\n<p>The following exercises don't require many lines of code.\nThey can however be challenging, because you must understand exactly what is happening and where, and the configurations must be just right.</p>\n<h4>3.9 communities backend Step 9</h4>\n<p>Make the backend work with the communities frontend from the exercises of the previous part.\nDo not implement the functionality for making changes to the URLs yet, that will be implemented in exercise 3.17.</p>\n<p>You will probably have to do some small changes to the frontend, at least to the URLs for the backend.\nRemember to keep the developer console open in your browser.\nIf some HTTP requests fail, you should check from the <strong><em>Network</em></strong> tab what is going on.\nKeep an eye on the backend's console as well.\nIf you did not do the previous exercise, it is worth it to print the request data or <code class=\"language-text\">request.body</code> to the console in the event handler responsible for POST requests.</p>\n<h4>3.10 communities backend Step 10</h4>\n<p>Deploy the backend to the internet.\nYou shall NOT be deploying the frontend directly at any stage of this part.\nIt is just backend repository that is deployed throughout the whole part, nothing else.</p>\n<p>Test the deployed backend with a browser and Postman or REST client to ensure it works.</p>\n<blockquote>\n<p><strong>TIP:</strong> When you deploy your application to the cloud,\nit is worth it to at least in the beginning keep an eye on the logs in render.</p>\n<p>One such problem that you'll see arises is that npm will complain that it cannot find application dependency <em>express</em>:</p>\n<p>The reason would be that the <em>express</em> package has not been installed with the <code class=\"language-text\">npm i express</code> command,\nso information about the dependency was not saved to the file <em>package.json</em>.</p>\n<p>Another typical problem is that the application is not configured to use the port set to the environment variable <code class=\"language-text\">PORT</code>.</p>\n<p>Create a <em>README.md</em> at the root of your repository, and add a link to your online application to it.</p>\n<p>Also, make sure that the frontend still works locally (in development mode when started with command <code class=\"language-text\">npm run dev</code>).</p>\n<p>The last reason that I'll mention is forgetting to set the optional <em>Root Directory</em> for your repositories.\nI've included this mostly due to students mentioning this to me personally as causing them issues.\nYou may need to change your <em>Root Directory</em> in Render to <em>match your particular repository folder structure</em>, like this particular image shows:\n<picture><img src=\"/static/4cf1d0630105aa6884ec2ee8eae21b31/5a190/render_backend_communities.png\" alt=\"render image showing to change the community backend\" srcset=\"/static/4cf1d0630105aa6884ec2ee8eae21b31/772e8/render_backend_communities.png 200w,\n/static/4cf1d0630105aa6884ec2ee8eae21b31/e17e5/render_backend_communities.png 400w,\n/static/4cf1d0630105aa6884ec2ee8eae21b31/5a190/render_backend_communities.png 800w,\n/static/4cf1d0630105aa6884ec2ee8eae21b31/c1b63/render_backend_communities.png 1200w,\n/static/4cf1d0630105aa6884ec2ee8eae21b31/10ab7/render_backend_communities.png 1552w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture></p>\n<blockquote>\n<p><strong><em>Also Remember:</em></strong> Do not forget to create the commit and push!</p>\n</blockquote>\n</blockquote>\n<h4>3.11 Communities full stack</h4>\n<p>Generate a production build of your frontend, and add it to the internet application using the method introduced in this part.</p>\n<blockquote>\n<p><strong>Remember:</strong> Make sure the directory <em>dist</em> is not gitignored.\n<strong><em>You may need to remove the comment from line 83 of your <code class=\"language-text\">.gitignore</code> file so that the <code class=\"language-text\">dist</code> folder will be added to your project.</em></strong></p>\n</blockquote>\n<p>Also, make sure that the frontend still works locally (in development mode when started with command <code class=\"language-text\">npm start</code>).</p>\n<p>If you have problems getting the app working make sure that your directory structure matches\n<a href=\"https://github.com/comp227/part3-tasks-backend/tree/part3-3\">the example app</a>.</p>\n</div>","frontmatter":{"mainImage":{"publicURL":"/static/8ac7bc0fb2b7018a7853b00c454b2103/part-3.svg"},"part":3,"letter":"b","lang":"en"}}},"pageContext":{"part":3,"letter":"b","lang":"en"}}}