{"componentChunkName":"component---src-templates-content-template-js","path":"/part3/saving_data_to_mongo_db","result":{"data":{"markdownRemark":{"html":"<div class=\"content\">\n<p>Before we move into the main topic of persisting data in a database, we will take a look at a few different ways of debugging Node applications.</p>\n<h3>Debugging Node applications</h3>\n<p>Debugging Node applications is slightly more difficult than debugging JavaScript running in your browser.\nPrinting to the console is simple and works, and can be quickly elaborated via our live templates.\nSometimes though, using <code class=\"language-text\">console.log</code> everywhere just makes things messy.\nWhile some people disagree, I believe that <em>if you take the time to learn to use the debugger, it can greatly help your abilities as a software dev in the future</em>.</p>\n<h4>WebStorm</h4>\n<p>To use WebStorm to <strong><em>debug the backend</em></strong>, you'll need to tell WebStorm where <em>node</em> is.\nYou can start this by going to <strong><em>Run->Debug</em></strong> in the top menu.\nYou'll then see a tiny Debug window in the middle of the screen that looks like this:</p>\n<picture><img src=\"/static/1329cb8c4308e7bc9221643deaf3c128/3d64b/debug_option.png\" alt=\"debug window\" srcset=\"/static/1329cb8c4308e7bc9221643deaf3c128/3d64b/debug_option.png 199w\" sizes=\"(max-width: 199px) 100vw, 199px\"></picture>\n<p>Once you select, Edit configurations..., you'll then arrive at this window:</p>\n<picture><img src=\"/static/f540c70eba88d5fda5eac8b3af61cc28/5a190/35x.png\" alt=\"node configuration in WebStorm\" srcset=\"/static/f540c70eba88d5fda5eac8b3af61cc28/772e8/35x.png 200w,\n/static/f540c70eba88d5fda5eac8b3af61cc28/e17e5/35x.png 400w,\n/static/f540c70eba88d5fda5eac8b3af61cc28/5a190/35x.png 800w,\n/static/f540c70eba88d5fda5eac8b3af61cc28/1568e/35x.png 892w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>After clicking on npm, you'll see a variety of options.\nYou'll then:</p>\n<ol>\n<li>Select the <em>Command</em> dropdown and pick <strong><em>Start</em></strong>.</li>\n<li>Select the <em>Node interpreter</em> dropdown and choose the nvm path that you <a href=\"/part0/configuring_your_machine_for_this_course#link-webstorm-to-nvm\">added in back in our initial configuration</a>.</li>\n<li>Click <strong><em>Debug</em></strong></li>\n</ol>\n<p>At that point click <strong><em>Debug</em></strong>.</p>\n<p>At this point, you'll see via the process console that WebStorm starts up by running <code class=\"language-text\">npm start</code>.\nThe output in red is similar to the <code class=\"language-text\">npm start</code> output from the terminal, with some additional messages about WebStorm attaching a debugger.</p>\n<picture><img src=\"/static/ef641a1abc6d86600e51aec76801b92e/c6d67/process_console.png\" alt=\"WebStorm process console\" srcset=\"/static/ef641a1abc6d86600e51aec76801b92e/772e8/process_console.png 200w,\n/static/ef641a1abc6d86600e51aec76801b92e/e17e5/process_console.png 400w,\n/static/ef641a1abc6d86600e51aec76801b92e/c6d67/process_console.png 734w\" sizes=\"(max-width: 734px) 100vw, 734px\"></picture>\n<blockquote>\n<p><strong>Remember:</strong> the application shouldn't be running in another console, otherwise the port will already be in use.</p>\n</blockquote>\n<p>Below you can see a screenshot where the code execution has been paused in the middle of saving a new task:</p>\n<picture><img src=\"/static/0303190b368a0e5faeae813c9c316ab6/5a190/36x.png\" alt=\"WebStorm screenshot of execution at a breakpoint\" srcset=\"/static/0303190b368a0e5faeae813c9c316ab6/772e8/36x.png 200w,\n/static/0303190b368a0e5faeae813c9c316ab6/e17e5/36x.png 400w,\n/static/0303190b368a0e5faeae813c9c316ab6/5a190/36x.png 800w,\n/static/0303190b368a0e5faeae813c9c316ab6/96220/36x.png 1165w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>The execution stopped at the <strong>breakpoint</strong> in line 81.\nOn the line itself and in the code, you can see some of the values of different variables.\nFor example, at the end of line 77 in light gray, you can see the value of <code class=\"language-text\">body.important</code> is <em><code class=\"language-text\">false</code></em>.\nOn line 81 you can also see the value of <code class=\"language-text\">task</code>.\nTo see the current values of all of the pertinent variables and objects at the point of executing line 81, you want to look in the Debugger Pane at the bottom of WebStorm.\nFor example, you can see what the value of <code class=\"language-text\">tasks</code> is just before it changes.</p>\n<p>In the Debugger Console, you can type in values just like you did before in the developer tools console.\nThe Debugger Console is great as you can type out code to see what values would be as you are writing the code.\nSee here my example of checking to see if I am parsing a string correctly.</p>\n<picture><img src=\"/static/9b3ae49b5d41624ae3e0b47f712bb5d4/5a190/webstorm_debugger_console.png\" alt=\"WebStorm screenshot of debugger console\" srcset=\"/static/9b3ae49b5d41624ae3e0b47f712bb5d4/772e8/webstorm_debugger_console.png 200w,\n/static/9b3ae49b5d41624ae3e0b47f712bb5d4/e17e5/webstorm_debugger_console.png 400w,\n/static/9b3ae49b5d41624ae3e0b47f712bb5d4/5a190/webstorm_debugger_console.png 800w,\n/static/9b3ae49b5d41624ae3e0b47f712bb5d4/d56e1/webstorm_debugger_console.png 1130w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>The arrows at the top of the debugger window control the program's flow and execute a single line of code when they get pressed.\nTheir behavior differs though when the lines contain a function.\nWhen on a line that contains a function:</p>\n<ul>\n<li><strong>step into</strong> will jump into the body of the function and execute the first line.</li>\n<li><strong>step over</strong> will execute the entire function's body and just give the result</li>\n<li><strong>step out</strong> will finish executing the body of a function and return back to the function that called it.</li>\n</ul>\n<p>Finally, the inspector is similar to the debugger console that I showed.\nHowever, this particular feature is available across all JetBrains IDEs for evaluating expressions while debugging during the state of control.</p>\n<p>Lastly, look at some of the icons on the right.</p>\n<ul>\n<li>The play button resumes execution of the program</li>\n<li>The red square stop sign will stop debugging</li>\n<li>the red octagon stop signs allow you to see all breakpoints or to pause breakpoints from executing for a while.</li>\n<li>the lightning bolt allows your program to break on an exception, which can be very handy when trying to find out when an exception is being thrown.</li>\n</ul>\n<p>Invest time into learning to use a debugger properly...it can save you a lot of time in the future and increase your understanding of a language as well!</p>\n<h4>Chrome dev tools</h4>\n<p>Debugging backend applications is also possible with the Chrome developer console by starting your application with the command:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">node --inspect index.js</code></pre></div>\n<p>You can also pass the <code class=\"language-text\">--inspect</code> flag to <code class=\"language-text\">nodemon</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">nodemon --inspect index.js</code></pre></div>\n<p>You can access the debugger by clicking the green icon - the node logo - that appears in the Chrome developer console:</p>\n<picture><img src=\"/static/e65b5b7360105363afdc15dc49ac2f03/5a190/37.png\" alt=\"dev tools with green node logo icon\" srcset=\"/static/e65b5b7360105363afdc15dc49ac2f03/772e8/37.png 200w,\n/static/e65b5b7360105363afdc15dc49ac2f03/e17e5/37.png 400w,\n/static/e65b5b7360105363afdc15dc49ac2f03/5a190/37.png 800w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>The <em>Debugging View</em> works the same way as it did with React applications.\nThe <strong><em>Sources</em></strong> tab can be used for setting breakpoints where the execution of the code will be paused.</p>\n<picture><img src=\"/static/d26c34bfb0325f1a8650c1a42fea5740/5a190/38eb.png\" alt=\"dev tools sources tab breakpoint and watch variables\" srcset=\"/static/d26c34bfb0325f1a8650c1a42fea5740/772e8/38eb.png 200w,\n/static/d26c34bfb0325f1a8650c1a42fea5740/e17e5/38eb.png 400w,\n/static/d26c34bfb0325f1a8650c1a42fea5740/5a190/38eb.png 800w,\n/static/d26c34bfb0325f1a8650c1a42fea5740/ffe34/38eb.png 1055w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>All of the application's <code class=\"language-text\">console.log</code> messages will appear in the <strong><em>Console</em></strong> tab of the debugger.\nYou can also inspect the values of variables and execute your JavaScript code.</p>\n<picture><img src=\"/static/1b3929300c672c05f8f4011d891eb918/5a190/39ea.png\" alt=\"dev tools console tab showing task object typed in\" srcset=\"/static/1b3929300c672c05f8f4011d891eb918/772e8/39ea.png 200w,\n/static/1b3929300c672c05f8f4011d891eb918/e17e5/39ea.png 400w,\n/static/1b3929300c672c05f8f4011d891eb918/5a190/39ea.png 800w,\n/static/1b3929300c672c05f8f4011d891eb918/218a4/39ea.png 1052w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<h4>Question everything</h4>\n<p>Soon our application will also have a database in addition to the frontend and backend,\nso there will be many potential areas for bugs in the application.\nWith so many areas, debugging Full-Stack applications may seem tricky at first.</p>\n<p>When the application \"does not work\", we have to first figure out where the problem occurs.\nIt's very common for the problem to exist in a place where you didn't expect it to,\nand it can take minutes, hours, or even days before you find the source of the problem.</p>\n<p>The key is to <strong><em>be systematic</em></strong> so that you can divide and conquer.\nSince the problem can exist anywhere, <em>you must question everything</em>, and eliminate all possibilities one by one.\nLogging to the console, REST Client/Postman, debuggers, and experience will help.</p>\n<p>When bugs occur, <strong><em>the worst of all possible strategies</em></strong> is to continue writing code.\nIt will guarantee that your code will soon have even more bugs, and debugging them will be even more difficult.\nThe <a href=\"https://leanscape.io/principles-of-lean-13-jidoka/\"><em>stop and fix</em> principle</a>\nfrom Toyota Production Systems is very effective in this situation as well.</p>\n<h3>MongoDB</h3>\n<p>To store our saved tasks indefinitely, we need a database.\nMost college courses use relational databases.\nIn most parts of this course, we will use <a href=\"https://www.mongodb.com/\">MongoDB</a>\nwhich is a <a href=\"https://en.wikipedia.org/wiki/Document-oriented_database\"><strong>document database</strong></a>.</p>\n<p>Mongo is easier to understand compared to a relational database.</p>\n<p>Document databases differ from relational databases in how they organize data as well as in the query languages they support.\nDocument databases are usually categorized under the <a href=\"https://en.wikipedia.org/wiki/NoSQL\">NoSQL</a> umbrella term.</p>\n<p>Please read the chapters on <a href=\"https://docs.mongodb.com/manual/core/databases-and-collections/\">collections</a> and <a href=\"https://docs.mongodb.com/manual/core/document/\">documents</a>\nfrom the MongoDB manual to get a basic idea of how a document database stores data.</p>\n<p>Naturally, you can install and run MongoDB on your computer.\nHowever, the internet is also full of Mongo database services that you can use that are always available in the cloud.\nOur preferred MongoDB provider in this course will be <a href=\"https://www.mongodb.com/atlas/database\"><strong>MongoDB Atlas</strong></a>.</p>\n<p>Once you've created, verified, and logged into your account with Atlas, you're first presented with a survey.\nThese are the options to choose.</p>\n<picture><img src=\"/static/7e443170ddba60bbb6135e3d55f64bb7/5a190/mongo_survey.png\" alt=\"MongoDB survey first time user\" srcset=\"/static/7e443170ddba60bbb6135e3d55f64bb7/772e8/mongo_survey.png 200w,\n/static/7e443170ddba60bbb6135e3d55f64bb7/e17e5/mongo_survey.png 400w,\n/static/7e443170ddba60bbb6135e3d55f64bb7/5a190/mongo_survey.png 800w,\n/static/7e443170ddba60bbb6135e3d55f64bb7/c23ad/mongo_survey.png 1193w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>After clicking <strong><em>Finish</em></strong>, you're given a choice for a deployment option.\nChoose the shared option.</p>\n<picture><img src=\"/static/8b3c62393cd83c7f6896350caecd5d14/5a190/mongo1.png\" alt=\"MongoDB&#x27;s deploy a cloud database free shared\" srcset=\"/static/8b3c62393cd83c7f6896350caecd5d14/772e8/mongo1.png 200w,\n/static/8b3c62393cd83c7f6896350caecd5d14/e17e5/mongo1.png 400w,\n/static/8b3c62393cd83c7f6896350caecd5d14/5a190/mongo1.png 800w,\n/static/8b3c62393cd83c7f6896350caecd5d14/c23ad/mongo1.png 1193w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Pick the cloud provider and location and create the cluster:</p>\n<picture><img src=\"/static/1cad3be6880cd6b1430661fc147efd46/5a190/mongo2.png\" alt=\"MongoDB picking shared, aws and region\" srcset=\"/static/1cad3be6880cd6b1430661fc147efd46/772e8/mongo2.png 200w,\n/static/1cad3be6880cd6b1430661fc147efd46/e17e5/mongo2.png 400w,\n/static/1cad3be6880cd6b1430661fc147efd46/5a190/mongo2.png 800w,\n/static/1cad3be6880cd6b1430661fc147efd46/eb390/mongo2.png 935w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Let's wait for the cluster to be ready for use.\nThis may take some minutes, but for me, it was pretty quick.</p>\n<p>Now let's answer the questions from the Security Quickstart.\nBecause you are handling data, you need to create a user and password that can connect and access your database.\n<strong><em>These are not the same credentials that you use for logging into MongoDB Atlas.</em></strong>\nFor me, I used <em><code class=\"language-text\">comp227</code></em> as the user, and then clicked <strong><em>Autogenerate the password</em></strong> and clicked <strong><em>Copy</em></strong>.\nStore that password somewhere that you can access it, as you'll need it in files we'll modify soon.\nFinally, once you've stored the password in a secure location, click <strong><em>Create User</em></strong>.</p>\n<blockquote>\n<p>If you do ever lose that password, you'll be able to edit the user and set a new password.</p>\n</blockquote>\n<picture><img src=\"/static/5424ce8cc5f37c5334f8a8f8ecab8462/5a190/mongo3.png\" alt=\"MongoDB security quickstart\" srcset=\"/static/5424ce8cc5f37c5334f8a8f8ecab8462/772e8/mongo3.png 200w,\n/static/5424ce8cc5f37c5334f8a8f8ecab8462/e17e5/mongo3.png 400w,\n/static/5424ce8cc5f37c5334f8a8f8ecab8462/5a190/mongo3.png 800w,\n/static/5424ce8cc5f37c5334f8a8f8ecab8462/3cd52/mongo3.png 857w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Next, we have to define the IP addresses that are allowed access to the database.\nFor the sake of simplicity, we will allow access from all IP addresses, scroll down and type <code class=\"language-text\">0.0.0.0/0</code>, and then click <strong><em>Add Entry</em></strong> and then <strong><em>Finish and Close</em></strong>.</p>\n<picture><img src=\"/static/471589bf11a90e3ae332d0ecd7c0ea9a/898f6/mongo4.png\" alt=\"MongoDB network access/add ip access list\" srcset=\"/static/471589bf11a90e3ae332d0ecd7c0ea9a/772e8/mongo4.png 200w,\n/static/471589bf11a90e3ae332d0ecd7c0ea9a/e17e5/mongo4.png 400w,\n/static/471589bf11a90e3ae332d0ecd7c0ea9a/898f6/mongo4.png 798w\" sizes=\"(max-width: 798px) 100vw, 798px\"></picture>\n<p>At this point, you may get two more popups.\nI liked the wizard so I unchecked it before closing, and I also skipped the Termination Protection feature.\nAfter closing the popups, we are finally ready to connect to our database.\nClick <strong><em>Connect</em></strong>:</p>\n<picture><img src=\"/static/3871295ec1278a77e4db7023d408d125/5a190/mongo5.png\" alt=\"MongoDB database deployment connect\" srcset=\"/static/3871295ec1278a77e4db7023d408d125/772e8/mongo5.png 200w,\n/static/3871295ec1278a77e4db7023d408d125/e17e5/mongo5.png 400w,\n/static/3871295ec1278a77e4db7023d408d125/5a190/mongo5.png 800w,\n/static/3871295ec1278a77e4db7023d408d125/5bf79/mongo5.png 966w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Choose: <strong><em>Connect your application</em></strong>, then you'll see this screen.</p>\n<picture><img src=\"/static/e0e0e98d428c01dd4245ff2098c46293/0098c/mongo6.png\" alt=\"MongoDB connect application\" srcset=\"/static/e0e0e98d428c01dd4245ff2098c46293/772e8/mongo6.png 200w,\n/static/e0e0e98d428c01dd4245ff2098c46293/e17e5/mongo6.png 400w,\n/static/e0e0e98d428c01dd4245ff2098c46293/0098c/mongo6.png 775w\" sizes=\"(max-width: 775px) 100vw, 775px\"></picture>\n<p>The view displays the <em>MongoDB URI</em>, which is the address of the database that we will supply to the MongoDB client library we will add to our application.</p>\n<p>The address looks like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">mongodb+srv://comp227:$<span class=\"token operator\">&lt;</span>password<span class=\"token operator\">></span>@cluster0.gb6u3el.mongodb.net/myFirstDatabase?retryWrites<span class=\"token operator\">=</span>true<span class=\"token operator\">&amp;</span><span class=\"token assign-left variable\">w</span><span class=\"token operator\">=</span>majority</code></pre></div>\n<p>We are now ready to use the database.</p>\n<p>We could use the database directly from our JavaScript code\nwith the <a href=\"https://mongodb.github.io/node-mongodb-native/\">official MongoDB Node.js driver</a> library,\nbut it is quite cumbersome to use.\nWe will instead use the <a href=\"http://mongoosejs.com/index.html\">Mongoose</a> library that offers a higher-level API.</p>\n<p>Mongoose could be described as an <strong>object document mapper</strong> (ODM),\nand saving JavaScript objects as Mongo documents is straightforward with this library.</p>\n<p>Let's install Mongoose on our backend:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> i mongoose</code></pre></div>\n<p>Let's not add any code dealing with Mongo to our backend just yet.\nInstead, let's make a practice application by creating a new file, <em>mongo.js</em> in the root of the <em><code class=\"language-text\">tasks</code> backend</em> application:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> mongoose <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mongoose'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'strictQuery'</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'give password as an argument'</span><span class=\"token punctuation\">)</span>\n  process<span class=\"token punctuation\">.</span><span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> password <span class=\"token operator\">=</span> process<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">const</span> url <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">mongodb+srv://comp227:</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>password<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">@cluster0.gb6u3el.mongodb.net/taskApp?retryWrites=true&amp;w=majority</span><span class=\"token template-punctuation string\">`</span></span>\n\n<span class=\"token keyword\">const</span> taskSchema <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">mongoose<span class=\"token punctuation\">.</span>Schema</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  content<span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span>\n  date<span class=\"token operator\">:</span> Date<span class=\"token punctuation\">,</span>\n  important<span class=\"token operator\">:</span> Boolean<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> Task <span class=\"token operator\">=</span> mongoose<span class=\"token punctuation\">.</span><span class=\"token function\">model</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Task'</span><span class=\"token punctuation\">,</span> taskSchema<span class=\"token punctuation\">)</span>\n\nmongoose\n  <span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'connected'</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">const</span> task <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Task</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      content<span class=\"token operator\">:</span> <span class=\"token string\">'Practice coding interview problems'</span><span class=\"token punctuation\">,</span>\n      date<span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      important<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">return</span> task<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'task saved!'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> mongoose<span class=\"token punctuation\">.</span>connection<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<blockquote>\n<p><strong>Pertinent:</strong> Depending on which region you selected when building your cluster, the <em>MongoDB URI</em> may be different from the example provided above.\nYou should verify and use the correct URI that was generated from MongoDB Atlas.</p>\n</blockquote>\n<p>The code also assumes that it will be passed the password from the credentials we created in MongoDB Atlas, as a command line parameter.\nIn the code above, we access the command line parameter like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> password <span class=\"token operator\">=</span> process<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>When the code is run with the command <code class=\"language-text\">node mongo.js YOUR_PASSWORD_HERE</code>, Mongo will add a new document to the database.</p>\n<blockquote>\n<p><strong>Remember:</strong> Replace <code class=\"language-text\">YOUR_PASSWORD_HERE</code> with the <em>password created for the database user</em>, not your MongoDB Atlas password.\nAlso, if you created a password with special characters,\nthen you'll need to <a href=\"https://docs.atlas.mongodb.com/troubleshoot-connection/#special-characters-in-connection-string-password\">URL encode that password</a>.</p>\n</blockquote>\n<p>We can view the current state of the database from the MongoDB Atlas from <strong><em>Browse collections</em></strong>, in the Database tab.</p>\n<picture><img src=\"/static/b02ccb6a580d34e028ad3888ddbf345d/5a190/mongo7.png\" alt=\"MongoDB databases browse collections button\" srcset=\"/static/b02ccb6a580d34e028ad3888ddbf345d/772e8/mongo7.png 200w,\n/static/b02ccb6a580d34e028ad3888ddbf345d/e17e5/mongo7.png 400w,\n/static/b02ccb6a580d34e028ad3888ddbf345d/5a190/mongo7.png 800w,\n/static/b02ccb6a580d34e028ad3888ddbf345d/024d6/mongo7.png 961w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>As the view states, the <em>document</em> matching the task has been added to the <strong><em>tasks</em></strong> collection in the <strong><em>myFirstDatabase</em></strong> database.</p>\n<picture><img src=\"/static/b67f6c5e90e2ec6f1fff432d11fe5f36/5a190/mongo8.png\" alt=\"MongoDB collections tab db my first app tasks\" srcset=\"/static/b67f6c5e90e2ec6f1fff432d11fe5f36/772e8/mongo8.png 200w,\n/static/b67f6c5e90e2ec6f1fff432d11fe5f36/e17e5/mongo8.png 400w,\n/static/b67f6c5e90e2ec6f1fff432d11fe5f36/5a190/mongo8.png 800w,\n/static/b67f6c5e90e2ec6f1fff432d11fe5f36/72aae/mongo8.png 964w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Let's destroy the default database <strong><em>myFirstDatabase</em></strong> and change the name of the database referenced in our connection string to <code class=\"language-text\">taskApp</code> instead, by modifying the URI:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">mongodb+srv://comp227:$<span class=\"token operator\">&lt;</span>password<span class=\"token operator\">></span>@cluster0.gb6u3el.mongodb.net/taskApp?retryWrites<span class=\"token operator\">=</span>true<span class=\"token operator\">&amp;</span><span class=\"token assign-left variable\">w</span><span class=\"token operator\">=</span>majority</code></pre></div>\n<p>Let's run our code again:</p>\n<picture><img src=\"/static/a59113462c2fb87f2eeffbfed798d31a/5a190/mongo9.png\" alt=\"MongoDB collections tab taskApp tasks\" srcset=\"/static/a59113462c2fb87f2eeffbfed798d31a/772e8/mongo9.png 200w,\n/static/a59113462c2fb87f2eeffbfed798d31a/e17e5/mongo9.png 400w,\n/static/a59113462c2fb87f2eeffbfed798d31a/5a190/mongo9.png 800w,\n/static/a59113462c2fb87f2eeffbfed798d31a/e2310/mongo9.png 968w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>The data is now stored in the right database.\nThe view also offers the <strong><em>create database</em></strong> functionality, that can be used to create new databases from the website.\nCreating a database like this is not necessary, since MongoDB Atlas automatically creates a new database when an application tries to connect to a database that does not exist yet.</p>\n<h3>Schema</h3>\n<p>After establishing the connection to the database, we define the <a href=\"http://mongoosejs.com/docs/guide.html\"><strong>schema</strong></a>\nfor a task and the matching <a href=\"http://mongoosejs.com/docs/models.html\"><strong>model</strong></a>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> taskSchema <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">mongoose<span class=\"token punctuation\">.</span>Schema</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  content<span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span>\n  date<span class=\"token operator\">:</span> Date<span class=\"token punctuation\">,</span>\n  important<span class=\"token operator\">:</span> Boolean<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> Task <span class=\"token operator\">=</span> mongoose<span class=\"token punctuation\">.</span><span class=\"token function\">model</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Task'</span><span class=\"token punctuation\">,</span> taskSchema<span class=\"token punctuation\">)</span></code></pre></div>\n<p>First, we define the <a href=\"http://mongoosejs.com/docs/guide.html\">schema</a> of a task that is stored in the <code class=\"language-text\">taskSchema</code> variable.\nThe schema tells Mongoose how the task objects are to be stored in the database.</p>\n<p>In the <code class=\"language-text\">Task</code> model definition, the first <code class=\"language-text\">&#39;Task&#39;</code> parameter is the <em>singular name of the model</em>.\nThe name of the collection will be the lowercase plural <code class=\"language-text\">tasks</code>, because the <a href=\"http://mongoosejs.com/docs/models.html\">Mongoose convention</a>\nis to automatically name collections as the plural (e.g. <code class=\"language-text\">tasks</code>) when the schema refers to them in the singular (e.g. <code class=\"language-text\">Task</code>).</p>\n<p>Document databases like Mongo are <strong>schemaless</strong>, meaning that the database itself does not care about the structure of the data that is stored in the database.\nIt is possible to store documents with completely different fields in the same collection.</p>\n<p>The idea behind Mongoose is that the data stored in the database is given a <em>schema at the level of the application</em> that defines the shape of the documents stored in any given collection.</p>\n<h3>Creating and saving objects</h3>\n<p>Next, the application creates a new task object with the help of the <code class=\"language-text\">Task</code> <a href=\"http://mongoosejs.com/docs/models.html\">model</a>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> task <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Task</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  content<span class=\"token operator\">:</span> <span class=\"token string\">'Study for 227'</span><span class=\"token punctuation\">,</span>\n  date<span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  important<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Models are so-called <strong>constructor functions</strong> that create new JavaScript objects based on the provided parameters.</p>\n<blockquote>\n<p><strong>Pertinent:</strong> Since the objects are created with the model's constructor function,\nthey have all the properties of the model, which include methods for saving the object to the database.</p>\n</blockquote>\n<p>Saving the object to the database happens with the appropriately named <code class=\"language-text\">save</code> method, which can be provided with an event handler with the <code class=\"language-text\">then</code> method:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">task<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'task saved!'</span><span class=\"token punctuation\">)</span>\n  mongoose<span class=\"token punctuation\">.</span>connection<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>When the object is saved to the database, the event handler provided to <code class=\"language-text\">then</code> gets called.\nThe event handler closes the database connection with the command <code class=\"language-text\">mongoose.connection.close()</code>.\nIf the connection is not closed, the program will never finish its execution.</p>\n<p>The event handler's <strong><code class=\"language-text\">result</code></strong> parameter stores the <em>result of the save</em> operation.\nThe result is not that interesting when we're storing one object in the database.\nYou can print the object to the console if you want to take a closer look at it while implementing your application or during debugging.</p>\n<p>Let's also save a few more tasks by modifying the data in the code and by executing the program again.</p>\n<blockquote>\n<p><strong>Pertinent:</strong> Unfortunately the Mongoose documentation is not very consistent,\nwith parts of it using callbacks in its examples and other parts, other styles,\nso it is not recommended to copy and paste code directly from there.\n<strong><em>Mixing promises with old-school callbacks in the same code is not recommended</em></strong>.</p>\n</blockquote>\n<h3>Fetching objects from the database</h3>\n<p>Let's comment out the code in <em>mongo.js</em> that creates and saves the <code class=\"language-text\">task</code> and replace it with the following:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">Task<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  result<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">task</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>task<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  mongoose<span class=\"token punctuation\">.</span>connection<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>When the code is executed, the program prints all the tasks stored in the database:</p>\n<picture><img src=\"/static/4a9872f6fad52c545cb9a82ba1abf6c4/5a190/70ea.png\" alt=\"node mongo.js outputs tasks as JSON\" srcset=\"/static/4a9872f6fad52c545cb9a82ba1abf6c4/772e8/70ea.png 200w,\n/static/4a9872f6fad52c545cb9a82ba1abf6c4/e17e5/70ea.png 400w,\n/static/4a9872f6fad52c545cb9a82ba1abf6c4/5a190/70ea.png 800w,\n/static/4a9872f6fad52c545cb9a82ba1abf6c4/4e6ec/70ea.png 827w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>The objects are retrieved from the database with the <a href=\"https://mongoosejs.com/docs/api/model.html#model_Model-find\"><code class=\"language-text\">find</code> method</a> of the <code class=\"language-text\">Task</code> model.\nThe parameter for <code class=\"language-text\">find</code> is an object expressing search conditions.\nSince the parameter is an empty object<code class=\"language-text\">{}</code>, we get all of the tasks stored in the <strong><em>tasks</em></strong> collection.</p>\n<p>The search conditions adhere to the <a href=\"https://docs.mongodb.com/manual/reference/operator/\">Mongo search query syntax</a>.</p>\n<p>As an example of that syntax, we could restrict our search to only include important tasks like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">Task<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> important<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n</div>\n<div class=\"tasks\">\n<h3>Exercise 3.12</h3>\n<h4>3.12: Command-line database</h4>\n<p>Create a cloud-based MongoDB database for the <em>communities</em> application with MongoDB Atlas.</p>\n<p>Create a <em>mongo.js</em> file in the <em>communities</em> project directory, that can be used for adding a community, and for listing all of the communities.</p>\n<blockquote>\n<p><strong><em>Do not include or paste in the password in any of the files in your repo!</em></strong>\nWe have auto-commit turned on, so any change will get saved.\nIf this does happen, please send me a discord message.</p>\n</blockquote>\n<p>The application should work as follows.\nYou use the program by passing three command-line arguments (the first is the password), e.g.:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">node mongo.js your_mongo_password_here <span class=\"token string\">\"Meaningful Conversation\"</span> https://discord.com/invite/PHrdsnKa</code></pre></div>\n<p>As a result, the application will print:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">added Meaningful Conversation and invite URL https://discord.com/invite/PHrdsnKa to communities</code></pre></div>\n<p>The new community entry will be saved to the database.\nNotice that because the community name in this example contains whitespace characters, it is enclosed in quotes.\nIf it is one word, then it is not necessary.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">node mongo.js your_mongo_password_here MeditationMind https://discord.com/invite/XT9xqwv9</code></pre></div>\n<p>If the password is the only parameter given to the program, meaning that it is invoked like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">node mongo.js your_mongo_password_here</code></pre></div>\n<p>Then the program should display all of the communities:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">communities:\nMeaningful Conversation https://discord.com/invite/PHrdsnKa\nMeditationMind https://discord.com/invite/XT9xqwv9\nPySlackers https://pythondev.slack.com</code></pre></div>\n<p>You can get the command-line parameters from the <a href=\"https://nodejs.org/docs/latest-v8.x/api/process.html#process_process_argv\"><code class=\"language-text\">process.argv</code></a> variable.</p>\n<blockquote>\n<p><strong>Pertinent: do not close the connection in the wrong place</strong>.\nE.g. the following code will not work:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">Group\n  <span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">groups</span><span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\nmongoose<span class=\"token punctuation\">.</span>connection<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>In the code above the <code class=\"language-text\">mongoose.connection.close()</code> command will get executed immediately after the <code class=\"language-text\">Group.find</code> operation is started.\nThis means that the database connection will be closed immediately,\nand the execution will never get to the point where <code class=\"language-text\">Group.find</code> operation finishes and the <code class=\"language-text\">callback</code> function gets called.</p>\n<p>The correct place for closing the database connection is at the end of the callback function:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">Group\n  <span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">groups</span><span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n    mongoose<span class=\"token punctuation\">.</span>connection<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n</blockquote>\n</div>\n<div class=\"content\">\n<h3>Connecting the backend to a database</h3>\n<p>Now we have enough knowledge to start using Mongo in our tasks application backend. 🥳</p>\n<p>Let's get a quick start by copy-pasting the Mongoose definitions to the backend's <em>index.js</em> file:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> mongoose <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mongoose'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'strictQuery'</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> password <span class=\"token operator\">=</span> process<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\">// DO NOT SAVE OR EVEN PASTE YOUR PASSWORD ANYWHERE IN THE REPO</span>\n<span class=\"token keyword\">const</span> url <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">mongodb+srv://comp227:</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>password<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">@cluster0.gb6u3el.mongodb.net/taskApp?retryWrites=true&amp;w=majority</span><span class=\"token template-punctuation string\">`</span></span>\n<span class=\"token comment\">// LET ME REPEAT - DO NOT SAVE YOUR PASSWORD IN YOUR REPO!</span>\n\nmongoose<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> taskSchema <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">mongoose<span class=\"token punctuation\">.</span>Schema</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  content<span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span>\n  date<span class=\"token operator\">:</span> Date<span class=\"token punctuation\">,</span>\n  important<span class=\"token operator\">:</span> Boolean<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> Task <span class=\"token operator\">=</span> mongoose<span class=\"token punctuation\">.</span><span class=\"token function\">model</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Task'</span><span class=\"token punctuation\">,</span> taskSchema<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Let's change the handler for fetching all tasks to the following form:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">app<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/tasks'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">request<span class=\"token punctuation\">,</span> response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  Task<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">tasks</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span>tasks<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>We can verify in the browser that the backend works for displaying all of the documents:</p>\n<picture><img src=\"/static/165647aa2c3a04f12b4440e5e4007497/5a190/44ea.png\" alt=\"api/tasks in browser shows tasks in JSON\" srcset=\"/static/165647aa2c3a04f12b4440e5e4007497/772e8/44ea.png 200w,\n/static/165647aa2c3a04f12b4440e5e4007497/e17e5/44ea.png 400w,\n/static/165647aa2c3a04f12b4440e5e4007497/5a190/44ea.png 800w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>The application works almost perfectly.\nThe frontend assumes that every object has a unique id in the <code class=\"language-text\">id</code> field.\nWe also don't want to return the mongo versioning field <code class=\"language-text\">__v</code> to the frontend.</p>\n<p>One way to format the objects returned by Mongoose is to <a href=\"https://stackoverflow.com/questions/7034848/mongodb-output-id-instead-of-id\"><em>modify</em></a>\nthe <code class=\"language-text\">toJSON</code> method of the schema, which is used on all instances of the models produced with that schema.</p>\n<p>To modify the method we need to change the configurable options of the schema.</p>\n<p>Options can be changed using the <a href=\"https://mongoosejs.com/docs/guide.html#options\"><code class=\"language-text\">set</code> method of the schema</a>.</p>\n<p>MongooseJS is a good source of documentation.\nFor more info on the <code class=\"language-text\">toJSON</code> option, check out:</p>\n<ul>\n<li><a href=\"https://mongoosejs.com/docs/guide.html#toJSON\">the mongoose JSON guide</a></li>\n<li><a href=\"https://mongoosejs.com/docs/api.html#document_Document-toObject\">mongoose <code class=\"language-text\">toObject</code> JSON API Reference</a></li>\n</ul>\n<p>For info on the <code class=\"language-text\">transform</code> function see <a href=\"https://mongoosejs.com/docs/api/document.html#transform\">https://mongoosejs.com/docs/api/document.html#transform</a>.</p>\n<p>Below is one way to modify the schema:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">taskSchema<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'toJSON'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">transform</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">document<span class=\"token punctuation\">,</span> returnedObject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    returnedObject<span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> returnedObject<span class=\"token punctuation\">.</span>_id<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">delete</span> returnedObject<span class=\"token punctuation\">.</span>_id\n    <span class=\"token keyword\">delete</span> returnedObject<span class=\"token punctuation\">.</span>__v\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Even though the <code class=\"language-text\">_id</code> property of Mongoose objects looks like a string, <strong><em>it is an object</em></strong>.\nThe <code class=\"language-text\">toJSON</code> method we defined transforms it into a string just to be safe.\nIf we didn't make this change, it would cause more harm to us in the future once we start writing tests.</p>\n<p>Let's respond to the HTTP request with a list of objects formatted with the <code class=\"language-text\">toJSON</code> method:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">app<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/tasks'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">request<span class=\"token punctuation\">,</span> response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  Task<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">tasks</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span>tasks<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>The code automatically uses the defined <code class=\"language-text\">toJSON</code> when formatting <em><code class=\"language-text\">tasks</code></em> to the response.</p>\n<h3>Database configuration into its own module</h3>\n<p>Before we refactor the rest of the backend to use the database, let's extract the Mongoose-specific code into its own module.</p>\n<p>Let's create a new directory for the module called <em>models</em>, and add a file called <em>task.js</em>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> mongoose <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mongoose'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'strictQuery'</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> url <span class=\"token operator\">=</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">MONGODB_URI</span></span>\n<span class=\"gatsby-highlight-code-line\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'connecting to'</span><span class=\"token punctuation\">,</span> url<span class=\"token punctuation\">)</span></span>\nmongoose<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'connected to MongoDB'</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'error connecting to MongoDB:'</span><span class=\"token punctuation\">,</span> error<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span>\n<span class=\"token keyword\">const</span> taskSchema <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">mongoose<span class=\"token punctuation\">.</span>Schema</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  content<span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span>\n  date<span class=\"token operator\">:</span> Date<span class=\"token punctuation\">,</span>\n  important<span class=\"token operator\">:</span> Boolean<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\ntaskSchema<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'toJSON'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">transform</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">document<span class=\"token punctuation\">,</span> returnedObject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    returnedObject<span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> returnedObject<span class=\"token punctuation\">.</span>_id<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">delete</span> returnedObject<span class=\"token punctuation\">.</span>_id\n    <span class=\"token keyword\">delete</span> returnedObject<span class=\"token punctuation\">.</span>__v\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"gatsby-highlight-code-line\">module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> mongoose<span class=\"token punctuation\">.</span><span class=\"token function\">model</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Task'</span><span class=\"token punctuation\">,</span> taskSchema<span class=\"token punctuation\">)</span></span></code></pre></div>\n<p>Defining Node <a href=\"https://nodejs.org/docs/latest-v8.x/api/modules.html\">modules</a>\ndiffers slightly from the way of defining <a href=\"/part2/rendering_a_collection_modules#refactoring-modules\">ES6 modules</a> in part 2.</p>\n<p>The public interface of the module is defined by setting a value to the <code class=\"language-text\">module.exports</code> variable.\nWe will set the value to be the <code class=\"language-text\">Task</code> model.\nThe other things defined inside of the module, like the variables <code class=\"language-text\">mongoose</code> and <code class=\"language-text\">url</code> will not be accessible or visible to users of the module.</p>\n<p>Importing the module happens by adding the following line to <em>index.js</em>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> Task <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./models/task'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>This way the <code class=\"language-text\">Task</code> variable will be assigned to the same object that the module defines.</p>\n<p>The way that the connection is made has changed slightly:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> url <span class=\"token operator\">=</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">MONGODB_URI</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'connecting to'</span><span class=\"token punctuation\">,</span> url<span class=\"token punctuation\">)</span>\n\nmongoose<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'connected to MongoDB'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'error connecting to MongoDB:'</span><span class=\"token punctuation\">,</span> error<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>It's not a good idea to hardcode the address of the database into the code,\nso instead the address of the database is passed to the application via the <code class=\"language-text\">MONGODB_URI</code> environment variable.\nWe'll discuss where to store this variable shortly.</p>\n<p>Now, our code for establishing a connection has handlers for dealing with successful and unsuccessful connection attempts.\nBoth functions just log a message to the console about the success status:</p>\n<picture><img src=\"/static/6490eb7a247c8ca48b41d164c4a120a4/5a190/45e.png\" alt=\"node output when given the wrong username/password\" srcset=\"/static/6490eb7a247c8ca48b41d164c4a120a4/772e8/45e.png 200w,\n/static/6490eb7a247c8ca48b41d164c4a120a4/e17e5/45e.png 400w,\n/static/6490eb7a247c8ca48b41d164c4a120a4/5a190/45e.png 800w,\n/static/6490eb7a247c8ca48b41d164c4a120a4/59822/45e.png 916w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>There are many ways to define the value of an environment variable.\nOne way would be to define it when the application is started:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token assign-left variable\">MONGODB_URI</span><span class=\"token operator\">=</span>address_here <span class=\"token function\">npm</span> run dev</code></pre></div>\n<p>A more sophisticated way is to use the <a href=\"https://github.com/motdotla/dotenv#readme\">dotenv</a> library.\nYou can install the library with the command:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> i dotenv</code></pre></div>\n<p>To use the library, we will create a <em>.env</em> file at the root of the project.\nPlease make sure that <em>.env</em> is added to your github folder.\nYou should <strong><em>close WebStorm</em></strong> so that your file watchers are not active currently.\nAfter that, you can make a .env file and type <code class=\"language-text\">git status</code> to verify that git does not see the .env file as something that was added.\nIf it was or if it says it was updated, please send me a message to help you get the commands to remove the <em>.env</em> file and to verify it's in your <em>.gitignore</em> file.\nThe environment variables are defined inside of the file, and it can look like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token assign-left variable\">MONGODB_URI</span><span class=\"token operator\">=</span>mongodb+srv://comp227:your_DB_password@cluster0.o1opl.mongodb.net/taskApp?retryWrites<span class=\"token operator\">=</span>true<span class=\"token operator\">&amp;</span><span class=\"token assign-left variable\">w</span><span class=\"token operator\">=</span>majority\n<span class=\"token assign-left variable\">PORT</span><span class=\"token operator\">=</span><span class=\"token number\">3001</span></code></pre></div>\n<p>We also added the hardcoded port of the server into the <code class=\"language-text\">PORT</code> environment variable.</p>\n<p>Our repos have been setup to already ignore the <em>.env</em> file by default.\nIf you ever make a new repo, <strong>make sure that you immediately add <code class=\"language-text\">.env</code> so you do not publish any confidential information publicly online!</strong></p>\n<p>Once you verify that <em>.env</em> is correctly being ignored by git, <strong><em>open up WebStorm again</em></strong>.</p>\n<p>The environment variables defined in the <em>.env</em> file can be taken into use with the expression <code class=\"language-text\">require(&#39;dotenv&#39;).config()</code>\nand you can reference them in your code just like you would reference normal environment variables, with the familiar <code class=\"language-text\">process.env.MONGODB_URI</code> syntax.</p>\n<p>Let's change the <em>index.js</em> file in the following way:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"gatsby-highlight-code-line\"><span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'dotenv'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">config</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span><span class=\"token keyword\">const</span> express <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'express'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">express</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> cors <span class=\"token operator\">=</span> <span class=\"token function\">requires</span><span class=\"token punctuation\">(</span><span class=\"token string\">'cors'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> Task <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./models/task'</span><span class=\"token punctuation\">)</span></span>\n<span class=\"token comment\">// ..</span>\n\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> <span class=\"token constant\">PORT</span> <span class=\"token operator\">=</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">PORT</span></span>app<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token constant\">PORT</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Server running on port </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token constant\">PORT</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<blockquote>\n<p>You can also take out the pre-filled contents inside the <code class=\"language-text\">tasks</code> variable and just leave it as an empty array <em>[]</em>.</p>\n</blockquote>\n<p>Notice how <code class=\"language-text\">dotenv</code> must be imported before the <code class=\"language-text\">task</code> model.\nThis ensures that the environment variables from the <em>.env</em> file are available globally before the code from the other modules is imported.</p>\n<blockquote>\n<p><strong>Pertinent:</strong> Once the file <em>.env</em> has been gitignored, Render does not get the database URL from the repository, so <strong><em>you have to set the DB URL yourself</em></strong>.</p>\n<p>That can be done by visiting the <a href=\"http://dashboard.render.com\">Render dashboard</a>.\nOnce you are there, click on your web service and then select <strong><em>Environment</em></strong> from the left-hand nav menu.\nScroll down until you can click on <strong>*Add Secret File.</strong>\nFrom there, name the file .env and then click the contents section.\nThere you will paste all of the contents of your .env file, making sure you put your DB password from mongo in there.\nNext click <strong><em>Done</em></strong> and then Finally <strong><em>Save Changes</em></strong>.</p>\n<picture><img src=\"/static/bfef1ac7fae6968fbe645467a9d6ffcc/5a190/cloudConfig.png\" alt=\"Heroku dashboard showing config vars\" srcset=\"/static/bfef1ac7fae6968fbe645467a9d6ffcc/772e8/cloudConfig.png 200w,\n/static/bfef1ac7fae6968fbe645467a9d6ffcc/e17e5/cloudConfig.png 400w,\n/static/bfef1ac7fae6968fbe645467a9d6ffcc/5a190/cloudConfig.png 800w,\n/static/bfef1ac7fae6968fbe645467a9d6ffcc/c1b63/cloudConfig.png 1200w,\n/static/bfef1ac7fae6968fbe645467a9d6ffcc/71b12/cloudConfig.png 1308w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n</blockquote>\n<h3>Using database in route handlers</h3>\n<p>Next, let's change the rest of the backend functionality to use the database.</p>\n<p>Creating a new task is accomplished like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">app<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/tasks'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">request<span class=\"token punctuation\">,</span> response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> body <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>body\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>body<span class=\"token punctuation\">.</span>content <span class=\"token operator\">===</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">400</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> error<span class=\"token operator\">:</span> <span class=\"token string\">'content missing'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">const</span> task <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Task</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    content<span class=\"token operator\">:</span> body<span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">,</span>\n    important<span class=\"token operator\">:</span> <span class=\"token function\">Boolean</span><span class=\"token punctuation\">(</span>body<span class=\"token punctuation\">.</span>important<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n    date<span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toISOString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  task<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">savedTask</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span>savedTask<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>The task objects are created with the <code class=\"language-text\">Task</code> constructor function.\nThe response is sent inside of the callback function for the <code class=\"language-text\">save</code> operation.\nThis ensures that the response is sent only if the operation succeeded.\nWe will discuss error handling a little bit later.</p>\n<p>The <code class=\"language-text\">savedTask</code> parameter in the callback function is the saved and newly created task.\nThe data sent back in the response is the formatted version created with the <code class=\"language-text\">toJSON</code> method:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span>savedTask<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Using Mongoose's <a href=\"https://mongoosejs.com/docs/api/model.html#model_Model-findById\"><code class=\"language-text\">findById</code> method</a>, fetching an individual task gets changed to the following:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">app<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/tasks/:id'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">request<span class=\"token punctuation\">,</span> response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  Task<span class=\"token punctuation\">.</span><span class=\"token function\">findById</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">task</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span>task<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h3>Verifying frontend and backend integration</h3>\n<p>When the backend gets expanded, it's a good idea to test the backend first with <strong>the browser, Postman or the WebStorm REST client</strong>.\nNext, let's try creating a new task after taking the database into use:</p>\n<picture><img src=\"/static/de29e5c483a5f291ff2c9eb2a8354fab/5a190/46e.png\" alt=\"WebStorm rest client doing a post\" srcset=\"/static/de29e5c483a5f291ff2c9eb2a8354fab/772e8/46e.png 200w,\n/static/de29e5c483a5f291ff2c9eb2a8354fab/e17e5/46e.png 400w,\n/static/de29e5c483a5f291ff2c9eb2a8354fab/5a190/46e.png 800w,\n/static/de29e5c483a5f291ff2c9eb2a8354fab/26a94/46e.png 1102w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p><strong><em>Verify first</em></strong> that the backend completely works.\nThen you can test that the frontend works with the backend.\n<strong><em>It is highly inefficient to test things exclusively through the frontend.</em></strong></p>\n<p>It's probably a good idea to integrate the frontend and backend one functionality at a time.\nFirst, we could implement fetching all of the tasks from the database and test it through the backend endpoint in the browser.\nAfter this, we could verify that the frontend works with the new backend.\nOnce everything seems to be working, we would move on to the next feature.</p>\n<p>Once we introduce a database into the mix, it is useful to inspect the saved state in the database, e.g. from the control panel in MongoDB Atlas.\nQuite often small Node programs (like the <em>mongo.js</em> program we wrote earlier) can be very helpful for testing during development.</p>\n<p>You can find the code for our current application in its entirety in the <a href=\"https://github.com/comp227/part3-tasks-backend/tree/part3-4\"><em>part3-4</em> branch of our backend repo</a>.</p>\n</div>\n<div class=\"tasks\">\n<h3>Exercises 3.13-3.14</h3>\n<p>The following exercises are pretty straightforward,\nbut if your frontend stops working with the backend, then finding and fixing the bugs can be quite interesting.</p>\n<h4>3.13: Communities database, Step 1</h4>\n<p>Change the fetching of all communities so that the data is <strong>fetched from the database</strong>.</p>\n<p>Verify that the frontend works after the changes have been made.</p>\n<p>In the following exercises, write all Mongoose-specific code into its own module,\njust like we did in the chapter <a href=\"/part3/saving_data_to_mongo_db#database-configuration-into-its-own-module\">Database configuration into its own module</a>.</p>\n<h4>3.14: Communities database, Step 2</h4>\n<p>Change the backend so that new URLs are <strong>saved to the database</strong>.\nVerify that your frontend still works after the changes.</p>\n<p>For this exercise, you can allow communities to have the same name.</p>\n</div>\n<div class=\"content\">\n<h3>Error handling</h3>\n<p>If we try to visit the URL of a task with an id that does not exist e.g. <a href=\"http://localhost:3001/api/tasks/5c41c90e84d891c15dfa3431\">http://localhost:3001/api/tasks/5c41c90e84d891c15dfa3431</a>\nwhere <code class=\"language-text\">5c41c90e84d891c15dfa3431</code> is not an id stored in the database, then the response will be <code class=\"language-text\">null</code>.</p>\n<p>Let's change this behavior so that if a task with the given id doesn't exist,\nthe server will respond to the request with the HTTP status code 404 not found.\nIn addition, let's implement a simple <code class=\"language-text\">catch</code> block to handle cases where the promise returned by the <code class=\"language-text\">findById</code> method is <strong>rejected</strong>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">app<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/tasks/:id'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">request<span class=\"token punctuation\">,</span> response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  Task<span class=\"token punctuation\">.</span><span class=\"token function\">findById</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">task</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>task<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">        response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span>task<span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">        response<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">404</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token punctuation\">}</span></span>    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">      response<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>If no matching object is found in the database, the value of <code class=\"language-text\">task</code> will be <code class=\"language-text\">null</code> and the <code class=\"language-text\">else</code> block is executed.\nThis results in a response with the status code <strong>404 not found</strong>.\nIf a promise returned by the <code class=\"language-text\">findById</code> method is rejected, the response will have the status code <strong>500 internal server error</strong>.\nThe console displays more detailed information about the error.</p>\n<p>On top of the non-existing task, there's one more error situation that needs to be handled.\nIn this situation, we are trying to fetch a task with the wrong kind of <code class=\"language-text\">id</code>, meaning an <code class=\"language-text\">id</code> that doesn't match the mongo identifier format.</p>\n<p>If we make a request like <code class=\"language-text\">GET http://localhost:3001/api/tasks/someInvalidId</code>, we will get an error message like the one shown below:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">Method: GET\nPath:   /api/tasks/someInvalidId\nBody:   <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n---\n<span class=\"token punctuation\">{</span> CastError: Cast to ObjectId failed <span class=\"token keyword\">for</span> value <span class=\"token string\">\"someInvalidId\"</span> at path <span class=\"token string\">\"_id\"</span> <span class=\"token keyword\">for</span> model <span class=\"token string\">\"Task\"</span>\n    at CastError <span class=\"token punctuation\">(</span>/Users/powercat/comp227/part3-tasks/node_modules/mongoose/lib/error/cast.js:27:11<span class=\"token punctuation\">)</span>\n    at ObjectId.cast <span class=\"token punctuation\">(</span>/Users/powercat/comp227/part3-tasks/node_modules/mongoose/lib/schema/objectid.js:158:13<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">..</span>.</code></pre></div>\n<p>Given a malformed id as an argument, the <code class=\"language-text\">findById</code> method will throw an error causing the returned promise to be rejected.\nThis will cause the callback function defined in the <code class=\"language-text\">catch</code> block to be called.</p>\n<p>Let's make some small adjustments to the response in the <code class=\"language-text\">catch</code> block:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">app<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/tasks/:id'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">request<span class=\"token punctuation\">,</span> response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  Task<span class=\"token punctuation\">.</span><span class=\"token function\">findById</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">task</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>task<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span>task<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        response<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">404</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> \n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span>\n<span class=\"gatsby-highlight-code-line\">      response<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">400</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>error<span class=\"token operator\">:</span> <span class=\"token string\">'malformatted id'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span>    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>If the format of the id is incorrect, then we will end up in the error handler defined in the <code class=\"language-text\">catch</code> block.\nThe appropriate status code for the situation is\n<a href=\"https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.1\">400 Bad Request</a>\nbecause the situation fits the description perfectly:</p>\n<blockquote>\n<p><em>The request could not be understood by the server due to malformed syntax.\nThe client SHOULD NOT repeat the request without modifications.</em></p>\n</blockquote>\n<p>We have also added some information to the response to shed some light on the cause of the error.</p>\n<p>When dealing with Promises, it's almost always a good idea to add error and exception handling.\nOtherwise, you will find yourself dealing with strange bugs.</p>\n<p>You can always print the object that caused the exception to the console in the error handler:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span></span>  response<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">400</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> error<span class=\"token operator\">:</span> <span class=\"token string\">'malformatted id'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>The reason the error handler gets called might be something completely different than what you had anticipated.\nIf you log the error to the console, you may save yourself from long and frustrating debugging sessions.\nMoreover, most modern services where you deploy your application support some form of logging system that you can use to check these logs.</p>\n<p>Every time you're working on a project with a backend, <strong>it is critical to keep an eye on the console output of the backend</strong>.\nIf you are working on a small screen, it is enough to just see a tiny slice of the output in the background.\nAny error messages will catch your attention even when the console is far back in the background:</p>\n<picture><img src=\"/static/4e10b528ecd076334d74bf128b6a7df4/5a190/15b.png\" alt=\"sample screenshot showing tiny slice of output\" srcset=\"/static/4e10b528ecd076334d74bf128b6a7df4/772e8/15b.png 200w,\n/static/4e10b528ecd076334d74bf128b6a7df4/e17e5/15b.png 400w,\n/static/4e10b528ecd076334d74bf128b6a7df4/5a190/15b.png 800w,\n/static/4e10b528ecd076334d74bf128b6a7df4/c1b63/15b.png 1200w,\n/static/4e10b528ecd076334d74bf128b6a7df4/29007/15b.png 1600w,\n/static/4e10b528ecd076334d74bf128b6a7df4/c95f0/15b.png 1842w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<blockquote>\n<p><strong>FYI:</strong> You can keep the terminal in the background even if you are using the WebStorm terminal.\nAll you need to do is change the terminal to the window view mode instead of as a dock by right-clicking on WebStorm's <em>Terminal</em> tab.</p>\n<picture><img src=\"/static/9ca85cdd821e620713a7b2034f90cde8/e4c9a/changing_terminal_to_window.png\" alt=\"changing the terminal to be a window\" srcset=\"/static/9ca85cdd821e620713a7b2034f90cde8/772e8/changing_terminal_to_window.png 200w,\n/static/9ca85cdd821e620713a7b2034f90cde8/e17e5/changing_terminal_to_window.png 400w,\n/static/9ca85cdd821e620713a7b2034f90cde8/e4c9a/changing_terminal_to_window.png 591w\" sizes=\"(max-width: 591px) 100vw, 591px\"></picture>\n</blockquote>\n<h3>Moving error handling into middleware</h3>\n<p>We have written the code for the error handler among the rest of our code.\nThis can be a reasonable solution at times, but there are cases where it is better to implement all error handling in a single place.\nThis can be particularly useful if we want to report data related to errors to an external error-tracking system like <a href=\"https://sentry.io/welcome/\">Sentry</a> later on.</p>\n<p>Let's change the handler for the <strong><em>/api/tasks/:id</em></strong> route so that it passes the error forward with the <code class=\"language-text\">next</code> function.\nThe next function is passed to the handler as the third parameter:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"gatsby-highlight-code-line\">app<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/tasks/:id'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span>  Task<span class=\"token punctuation\">.</span><span class=\"token function\">findById</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">task</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>task<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span>task<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        response<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">404</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span> <span class=\"token operator\">=></span> <span class=\"token function\">next</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>The error that is passed forward is given to the <code class=\"language-text\">next</code> function as a parameter.\nIf <code class=\"language-text\">next</code> was called without a parameter, then the <em>execution would simply move onto the next route or middleware</em>.\nIf the <code class=\"language-text\">next</code> function is called with a parameter, then the execution will continue to the <strong>error handler middleware</strong>.</p>\n<p>Express <a href=\"https://expressjs.com/en/guide/error-handling.html\">error handlers</a>\nare middleware that are defined with a function that accepts <strong><em>four parameters</em></strong>.\nOur error handler looks like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">errorHandler</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">error<span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">.</span>name <span class=\"token operator\">===</span> <span class=\"token string\">'CastError'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">400</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> error<span class=\"token operator\">:</span> <span class=\"token string\">'malformatted id'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span> \n\n  <span class=\"token function\">next</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// this has to be the last loaded middleware.</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>errorHandler<span class=\"token punctuation\">)</span></code></pre></div>\n<p>After printing the error message, the error handler checks if the error is a <code class=\"language-text\">CastError</code> exception, in which case we know that the error was caused by an invalid object id for Mongo.\nIn this situation, the error handler will send a response to the browser with the response object passed as a parameter.\nIn all other error situations, the middleware passes the error forward to the default Express error handler.</p>\n<blockquote>\n<p><strong>Remember:</strong> <em>the error-handling middleware has to be the last loaded middleware!</em></p>\n</blockquote>\n<h3>The order of middleware loading</h3>\n<p>The execution order of middleware is the same as the order that they are loaded into express with the <code class=\"language-text\">app.use</code> function.\nFor this reason, it is important to be careful when defining middleware.</p>\n<p>The correct order is the following:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>express<span class=\"token punctuation\">.</span><span class=\"token function\">static</span><span class=\"token punctuation\">(</span><span class=\"token string\">'dist'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>express<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token function\">cors</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// ...</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>requestLogger<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// ...</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">unknownEndpoint</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">request<span class=\"token punctuation\">,</span> response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    response<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">404</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> error<span class=\"token operator\">:</span> <span class=\"token string\">'unknown endpoint'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// handler of requests with unknown endpoint</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>unknownEndpoint<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">errorHandler</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">error<span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// handler of requests with result to errors</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>errorHandler<span class=\"token punctuation\">)</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/tasks'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">request<span class=\"token punctuation\">,</span> response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> body <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>body\n    <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>The json-parser middleware should be among the very first middleware loaded into Express.\nIf the order was the following: 🐞</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>requestLogger<span class=\"token punctuation\">)</span> <span class=\"token comment\">// request.body is undefined! 🐞</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/tasks'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">request<span class=\"token punctuation\">,</span> response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// request.body is undefined! </span>\n  <span class=\"token keyword\">const</span> body <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>body\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>express<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// needs to be before! 🐞</span></code></pre></div>\n<p>Then the JSON data sent with the HTTP requests would not be available for the logger middleware or the POST route handler, since the <code class=\"language-text\">request.body</code> would be <code class=\"language-text\">undefined</code> at that point.</p>\n<p>It's also important that the middleware for handling unsupported routes is next to the last middleware that is loaded into Express, just before the error handler.</p>\n<p>For example, the following loading order would cause an issue: 🐞</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">unknownEndpoint</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">request<span class=\"token punctuation\">,</span> response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  response<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">404</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> error<span class=\"token operator\">:</span> <span class=\"token string\">'unknown endpoint'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// handling all requests that get to this line with 'unknown endpoint' 🐞</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>unknownEndpoint<span class=\"token punctuation\">)</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/tasks'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">request<span class=\"token punctuation\">,</span> response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Now the handling of unknown endpoints is ordered <em>before the HTTP request handler</em>.\nSince the unknown endpoint handler responds to all requests with <strong>404 unknown endpoint</strong>,\nno routes or middleware will be called after the response has been sent by unknown endpoint middleware.\nThe only exception to this is the error handler which needs to come at the very end, after the unknown endpoints handler.</p>\n<h3>Other operations</h3>\n<p>Let's add some missing functionality to our application, including deleting and updating an individual task.</p>\n<p>The easiest way to delete a task from the database is with the <a href=\"https://mongoosejs.com/docs/api/model.html#Model.findByIdAndDelete()\"><code class=\"language-text\">findByIdAndDelete</code> method</a>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">app<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/tasks/:id'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  Task<span class=\"token punctuation\">.</span><span class=\"token function\">findByIdAndDelete</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      response<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">204</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span> <span class=\"token operator\">=></span> <span class=\"token function\">next</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>In both of the \"successful\" cases of deleting a resource, the backend responds with the status code <strong>204 no content</strong>.\nThe two different cases are deleting a task that exists, and deleting a task that does not exist in the database.\nThe <code class=\"language-text\">result</code> callback parameter could be used for checking if a resource was deleted,\nand we could use that information for returning different status codes for the two cases if we deemed it necessary.\nAny exception that occurs is passed onto the error handler.</p>\n<p>The toggling of the importance of a task can be easily accomplished with the <a href=\"https://mongoosejs.com/docs/api/model.html#model_Model-findByIdAndUpdate\"><code class=\"language-text\">findByIdAndUpdate</code> method</a>.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">app<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/tasks/:id'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> body <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>body\n\n  <span class=\"token keyword\">const</span> task <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    content<span class=\"token operator\">:</span> body<span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">,</span>\n    important<span class=\"token operator\">:</span> body<span class=\"token punctuation\">.</span>important<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n\n  Task<span class=\"token punctuation\">.</span><span class=\"token function\">findByIdAndUpdate</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span> task<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">new</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">updatedTask</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span>updatedTask<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span> <span class=\"token operator\">=></span> <span class=\"token function\">next</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>In the code above, we also allow the content of the <code class=\"language-text\">task</code> to be edited.</p>\n<blockquote>\n<p><em>However, we will not support changing the creation date for obvious reasons.</em></p>\n</blockquote>\n<p>Notice that the <code class=\"language-text\">findByIdAndUpdate</code> method receives a regular JavaScript object as its parameter,\nand not a new <code class=\"language-text\">task</code> object created with the <code class=\"language-text\">Task</code> constructor function.</p>\n<p>There is one important detail regarding the use of the <code class=\"language-text\">findByIdAndUpdate</code> method.\nBy default, the <code class=\"language-text\">updatedTask</code> parameter of the event handler receives the original document\n<a href=\"https://mongoosejs.com/docs/api/model.html#model_Model-findByIdAndUpdate\">without the modifications</a>.\nWe added the optional <code class=\"language-text\">{ new: true }</code> parameter, which will cause our event handler to be called <strong><em>with the new modified document instead of the original</em></strong>.</p>\n<p>After testing the backend directly with Postman and the WebStorm REST client, we can verify that it seems to work.\nThe frontend also appears to work with the backend using the database.</p>\n<p>You can find the code for our current application in its entirety in the <a href=\"https://github.com/comp227/part3-tasks-backend/tree/part3-5\"><em>part3-5</em> branch of our backend repo</a>.</p>\n<h3>Web developers pledge v3</h3>\n<p>We will update\n<a href=\"/part2/altering_data_in_server#web-developers-pledge-v2\">our web developer pledge</a>\nby adding an item:</p>\n<blockquote>\n<p>I also pledge to:</p>\n<ul>\n<li><em>Check that the database is storing the correct values</em></li>\n</ul>\n</blockquote>\n</div>\n<div class=\"tasks\">\n<h3>Exercises 3.15-3.18</h3>\n<h4>3.15: Communities database, Step 3</h4>\n<p>Change the backend so that deleting communities are reflected in the database.</p>\n<p>Verify that the frontend still works after making the changes.</p>\n<h4>3.16: Communities database, Step 4</h4>\n<p>Move the error handling of the application to a new error handler middleware.</p>\n<h4>3.17*: Communities database, Step 5</h4>\n<p>If the user tries to create a new community for one whose name is already in the communities application,\nthe frontend will try to update the community's invite location by making an <em><code class=\"language-text\">HTTP PUT</code></em> request to the entry's unique backend URL.</p>\n<p>Modify the backend to support this request.</p>\n<p>Verify that the frontend works after making your changes.</p>\n<h4>3.18*: Communities database Step 6</h4>\n<p>Also, update the handling of the <strong><em>api/groups/:id</em></strong> and <strong><em>info</em></strong> routes to use the database,\nand verify that they work directly with the browser, Postman, or WebStorm REST client.</p>\n<p>Inspecting an individual community from the browser should look like this:</p>\n<picture><img src=\"/static/2cdea1e19369e3b6b94f17694dc2daca/e628c/49.png\" alt=\"screenshot of browser showing one group with api/groups/their_id\" srcset=\"/static/2cdea1e19369e3b6b94f17694dc2daca/772e8/49.png 200w,\n/static/2cdea1e19369e3b6b94f17694dc2daca/e17e5/49.png 400w,\n/static/2cdea1e19369e3b6b94f17694dc2daca/e628c/49.png 619w\" sizes=\"(max-width: 619px) 100vw, 619px\"></picture>\n</div>","frontmatter":{"mainImage":{"publicURL":"/static/8ac7bc0fb2b7018a7853b00c454b2103/part-3.svg"},"part":3,"letter":"c","lang":"en"}}},"pageContext":{"part":3,"letter":"c","lang":"en"}}}