{"componentChunkName":"component---src-templates-content-template-js","path":"/part3/validation_and_es_lint","result":{"data":{"markdownRemark":{"html":"<div class=\"content\">\n<p>Typically, we want to constrain the data we store in our application's database.\nFor example, we shouldn't store nor even accept tasks that have a missing or empty <code class=\"language-text\">content</code> property.\nThe validity of the task is checked in the route handler:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">app<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/tasks'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">request<span class=\"token punctuation\">,</span> response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> body <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>body\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>body<span class=\"token punctuation\">.</span>content <span class=\"token operator\">===</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">400</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> error<span class=\"token operator\">:</span> <span class=\"token string\">'content missing'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span></span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>If the task does not have the <code class=\"language-text\">content</code> property, we respond to the request with the status code <strong>400 bad request</strong>.</p>\n<p>One smarter way of validating the format of the data before it is stored in the database is to use the\n<a href=\"https://mongoosejs.com/docs/validation.html\"><strong>validation functionality</strong></a> available in Mongoose.</p>\n<p>We can define <em>specific validation rules</em> for each field in the schema in <em>mongo.js</em>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> taskSchema <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">mongoose<span class=\"token punctuation\">.</span>Schema</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  content<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    type<span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">    minLength<span class=\"token operator\">:</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">    required<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">  date<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> </span><span class=\"gatsby-highlight-code-line\">    type<span class=\"token operator\">:</span> Date<span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">    required<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span>  important<span class=\"token operator\">:</span> Boolean\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>The <code class=\"language-text\">content</code> field is now required to be at least five characters long.\nThe <code class=\"language-text\">date</code> field is set as required, meaning that it can not be missing.\nThe same constraint is also applied to the <code class=\"language-text\">content</code> field since the minimum length constraint allows the field to be missing.\nWe have not added any constraints to the <code class=\"language-text\">important</code> field, so its definition in the schema has not changed.</p>\n<p>The <code class=\"language-text\">minLength</code> and <code class=\"language-text\">required</code> validators are <a href=\"https://mongoosejs.com/docs/validation.html#built-in-validators\">built-in</a> and provided by Mongoose.\nThe Mongoose <a href=\"https://mongoosejs.com/docs/validation.html#custom-validators\">custom validator</a> functionality\nallows us to create new validators if none of the built-in ones cover our needs.</p>\n<p>If we try to store an object in the database that breaks one of the constraints, the operation will throw an exception.\nLet's change our handler for creating a new task so that it passes any potential exceptions to the error handler middleware:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"gatsby-highlight-code-line\">app<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/tasks'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span>  <span class=\"token keyword\">const</span> body <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>body\n\n  <span class=\"token keyword\">const</span> task <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Task</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    content<span class=\"token operator\">:</span> body<span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">,</span>\n    important<span class=\"token operator\">:</span> <span class=\"token function\">Boolean</span><span class=\"token punctuation\">(</span>body<span class=\"token punctuation\">.</span>important<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n    date<span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toISOString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  task<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">savedTask</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span>savedTask<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span> <span class=\"token operator\">=></span> <span class=\"token function\">next</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Let's expand the error handler to deal with these validation errors:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">errorHandler</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">error<span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">.</span>name <span class=\"token operator\">===</span> <span class=\"token string\">'CastError'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">400</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> error<span class=\"token operator\">:</span> <span class=\"token string\">'malformatted id'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">.</span>name <span class=\"token operator\">===</span> <span class=\"token string\">'ValidationError'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">400</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> error<span class=\"token operator\">:</span> error<span class=\"token punctuation\">.</span>message <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span>  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">next</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>When validating an object fails, we return the following default error message from Mongoose:</p>\n<picture><img src=\"/static/7e5dee11ae62e0fe4673a6849687c193/5a190/50.png\" alt=\"postman showing error message\" srcset=\"/static/7e5dee11ae62e0fe4673a6849687c193/772e8/50.png 200w,\n/static/7e5dee11ae62e0fe4673a6849687c193/e17e5/50.png 400w,\n/static/7e5dee11ae62e0fe4673a6849687c193/5a190/50.png 800w,\n/static/7e5dee11ae62e0fe4673a6849687c193/bad1b/50.png 841w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>We may notice that the backend has now a problem: <strong><em>validations are not done when editing a task</em></strong>.\nThe <a href=\"https://github.com/blakehaswell/mongoose-unique-validator#find--updates\">documentation</a> explains what the problem is:\nvalidations are not run by default when <code class=\"language-text\">findOneAndUpdate</code> is executed.</p>\n<p>The fix is easy.\nLet us also reformulate the route code a bit:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">app<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/tasks/:id'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> content<span class=\"token punctuation\">,</span> important <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>body</span>\n  Task<span class=\"token punctuation\">.</span><span class=\"token function\">findByIdAndUpdate</span><span class=\"token punctuation\">(</span>\n    request<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span> \n<span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">{</span> content<span class=\"token punctuation\">,</span> important <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">{</span> <span class=\"token keyword\">new</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> runValidators<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> context<span class=\"token operator\">:</span> <span class=\"token string\">'query'</span> <span class=\"token punctuation\">}</span></span>  <span class=\"token punctuation\">)</span> \n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">updatedTask</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span>updatedTask<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span> <span class=\"token operator\">=></span> <span class=\"token function\">next</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h3>Deploying the database backend to production</h3>\n<p>The application should work almost as-is in Render.\nWe do have to generate a new production build of the frontend since changes thus far were only on our backend.</p>\n<p>Render does a nice job of allowing us to keep the environment variables that we want to pull in from production so that it keeps the same structure as our dev environment.\nWith the secret file, the environment variables we define will be used, so we can try our best to mirror both what is on Render and what we have on our machine.</p>\n<p><strong>The application should now work.</strong></p>\n<p>Sometimes things don't go according to plan.\nIf there are problems, looking at Render's logs, which are in the left-hand navigation of your web service will help.\nAs I was going through and working on this, my own application didn't work after making some changes.\nHere's what render's logs showed:</p>\n<picture><img src=\"/static/d13ef1f85496f48fc645750ed1af9fe7/5a190/51a.png\" alt=\"render logs showing connecting to undefined\" srcset=\"/static/d13ef1f85496f48fc645750ed1af9fe7/772e8/51a.png 200w,\n/static/d13ef1f85496f48fc645750ed1af9fe7/e17e5/51a.png 400w,\n/static/d13ef1f85496f48fc645750ed1af9fe7/5a190/51a.png 800w,\n/static/d13ef1f85496f48fc645750ed1af9fe7/c1b63/51a.png 1200w,\n/static/d13ef1f85496f48fc645750ed1af9fe7/4fa52/51a.png 1241w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>In my case, after scrolling through the logs, I noticed that my URL was not defined.\nThen I realized that I forgot to save the secret file that I took screenshots of from earlier in this part. 😔</p>\n<p>With many of our problems, when we are learning material we sometimes get to problems that feel catastrophic.\nDo not despair and stay cool.\nMost of the time,\nthere are simple reasons for our programs behaving in ways that we were hoping wouldn't occur.\nYour logs are vital to helping you analyze what could potentially be awry.</p>\n<p>You can find the code for our current application in its entirety in the <a href=\"https://github.com/comp227/part3-tasks-backend/tree/part3-6\"><em>part3-6</em> branch of our backend repo</a>.</p>\n</div>\n<div class=\"tasks\">\n<h3>Exercises 3.19-3.21</h3>\n<h4>3.19*: Communities database, Step 7</h4>\n<p>Expand the validation so that the name stored in the database has to be <em>at least three characters long</em>.</p>\n<p>Expand the frontend so that it <em>displays some form of error message when a validation error occurs</em>.\nError handling can be implemented by adding a <code class=\"language-text\">catch</code> block as shown below:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">groupService\n    <span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">createdGroup</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// ...</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// this is the way to access the error message</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">.</span>response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>You can display the default error message returned by Mongoose, even though they are not as readable as they could be:</p>\n<picture><img src=\"/static/b2f5f08c0856ba4d79a1d1fabd92eb0a/5a190/56e.png\" alt=\"communities screenshot showing group validation failure\" srcset=\"/static/b2f5f08c0856ba4d79a1d1fabd92eb0a/772e8/56e.png 200w,\n/static/b2f5f08c0856ba4d79a1d1fabd92eb0a/e17e5/56e.png 400w,\n/static/b2f5f08c0856ba4d79a1d1fabd92eb0a/5a190/56e.png 800w,\n/static/b2f5f08c0856ba4d79a1d1fabd92eb0a/5b587/56e.png 1010w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<blockquote>\n<p><strong>Pertinent:</strong> On update operations, <strong><em>mongoose validators are <code class=\"language-text\">off</code> by default</em></strong>.\n<a href=\"https://mongoosejs.com/docs/validation.html\">Read the documentation</a> to determine how to enable them.</p>\n</blockquote>\n<h4>3.20*: Communities database, Step 8</h4>\n<p><em>Add validation to your communities application</em>, which will make sure that community links are of the correct form.</p>\n<p>A community link must</p>\n<ul>\n<li>start with <code class=\"language-text\">https://</code> and then either have <strong>discord.com/invite</strong> or <strong>discord.gg</strong> as part of its URL.</li>\n<li>\n<p>end with 6-10 more letters (both upper case and lowercase) or numbers, but not more than 10 of them.</p>\n<ul>\n<li>e.g. <a href=\"https://discord.com/invite/yNhmmsPBT8\">https://discord.com/invite/yNhmmsPBT8</a> and and <a href=\"https://discord.gg/9BXyDG\">https://discord.gg/9BXyDG</a> are valid community links</li>\n<li>e.g. discord.gg/9BXyDG, <a href=\"https://reddit.com\">https://reddit.com</a> and <a href=\"https://something.discord.gg/9BXyDG\">https://something.discord.gg/9BXyDG</a> are invalid</li>\n</ul>\n</li>\n</ul>\n<p>Use a <a href=\"https://mongoosejs.com/docs/validation.html#custom-validators\">Custom validator</a> to implement the second part of the validation.</p>\n<p>If an HTTP POST request tries to add a name that is already in the communities app,\nthe server must respond with an appropriate status code and error message.</p>\n<h4>3.21 Deploying the database backend to production</h4>\n<p>Generate a new \"comp227\" version of the application by creating a new production build of the frontend, and copying it to the backend repository.\nVerify that everything works locally by using the entire application from the address <a href=\"http://localhost:3001/\">http://localhost:3001/</a>.</p>\n<p>Push the latest version to Render and verify that everything works there as well.</p>\n<blockquote>\n<p><strong>Remember:</strong> you should <strong>deploy the <em>backend</em></strong> to the cloud service.\nMake sure that your backend is at the root of your repository.</p>\n<p><strong><em>You shall NOT be deploying the frontend directly at any stage for this part.</em></strong>\nIt is just backend repository that is deployed throughout part 3, nothing else.</p>\n</blockquote>\n</div>\n<div class=\"content\">\n<h3>Lint</h3>\n<p>Before we move on to the next part, we will take a look at an important tool called <a href=\"https://en.wikipedia.org/wiki/Lint_(software)\"><strong>lint</strong></a>.\nWikipedia says the following about lint:</p>\n<blockquote>\n<p><em>Generically, lint or a linter is any tool that detects and flags errors in programming languages, including stylistic errors.\nThe term lint-like behavior is sometimes applied to the process of flagging suspicious language usage.\nLint-like tools generally perform static analysis of source code.</em></p>\n</blockquote>\n<p>In compiled statically typed languages like <em>Java</em>, IDEs like <em>NetBeans</em> can point out errors in the code, even ones that are more than just compile errors.\nAdditional tools for performing <a href=\"https://en.wikipedia.org/wiki/Static_program_analysis\">static analysis</a> like <a href=\"https://checkstyle.sourceforge.io\">checkstyle</a>,\ncan be used for expanding the capabilities of the IDE to also point out problems related to style, like indentation.</p>\n<p>In the JavaScript universe, the current leading tool for static analysis\n(AKA \"linting\") is <a href=\"https://eslint.org/\">ESlint</a>.</p>\n<p>Let's install ESlint as a development dependency to the backend project with the command:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> i -D eslint</code></pre></div>\n<p>After this we can initialize a default ESlint configuration with the command:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">npx eslint --init</code></pre></div>\n<p>We will answer all of the questions:</p>\n<picture><img src=\"/static/3c9874b04c3c8869fe07d7d58de57f02/5a190/52be.png\" alt=\"terminal output from ESlint init\" srcset=\"/static/3c9874b04c3c8869fe07d7d58de57f02/772e8/52be.png 200w,\n/static/3c9874b04c3c8869fe07d7d58de57f02/e17e5/52be.png 400w,\n/static/3c9874b04c3c8869fe07d7d58de57f02/5a190/52be.png 800w,\n/static/3c9874b04c3c8869fe07d7d58de57f02/c1b63/52be.png 1200w,\n/static/3c9874b04c3c8869fe07d7d58de57f02/19a15/52be.png 1229w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>The configuration will be saved in the <em>.eslintrc.js</em> file.\nWe will change <code class=\"language-text\">browser</code> to <code class=\"language-text\">node</code> in the <code class=\"language-text\">env</code> configuration:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"env\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token string\">\"browser\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"commonjs\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"es2021\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"extends\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"eslint:recommended\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"overrides\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token string\">\"env\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token string\">\"node\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"files\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n                <span class=\"token string\">\".eslintrc.{js,cjs}\"</span>\n            <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"parserOptions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token string\">\"sourceType\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"script\"</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"parserOptions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token string\">\"ecmaVersion\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"latest\"</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"rules\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token string\">\"indent\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n            <span class=\"token string\">\"error\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token number\">4</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"linebreak-style\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n            <span class=\"token string\">\"error\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"unix\"</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"quotes\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n            <span class=\"token string\">\"error\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"double\"</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"semi\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n            <span class=\"token string\">\"error\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"always\"</span>\n        <span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Let's change the rule concerning semicolons so that it only raises a warning and not an error.\nYou can also change the rule regarding indentation or others like the linebreak style if you are using Windows.\nI had to change my configuration a little bit this first time around, and that's fine.\nThe point is to be consistent.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token string\">\"semi\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token string\">\"warn\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"always\"</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></code></pre></div>\n<p>Inspecting and validating a file like <em>index.js</em> can be done with the following command:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">npx eslint index.js</code></pre></div>\n<blockquote>\n<p>Though you may have also noticed a lot of warnings and errors by visiting <em>index.js</em> from within WebStorm, we'll configure lint with WebStorm in the <a href=\"#configure-webstorm-with-eslint\">next section</a></p>\n</blockquote>\n<p>It is recommended to create separate <em>npm scripts</em> for linting:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n  <span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"start\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"node index.js\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"dev\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"nodemon index.js\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// ...</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token property\">\"lint\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"eslint .\"</span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token property\">\"lint:fix\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"npm run lint -- --fix\"</span></span>  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Now the <code class=\"language-text\">npm run lint</code> command will check every file in the project, while <code class=\"language-text\">npm run lint:fix</code> can automatically go through and fix all of the errors.</p>\n<p>Also, the files in the <em>dist</em> directory get checked when the command is run.\nWe do not want this to happen, and we can accomplish this by creating a <a href=\"https://eslint.org/docs/user-guide/configuring#ignoring-files-and-directories\">.eslintignore</a>\nfile in the project's root with the following contents:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">dist</code></pre></div>\n<p>This causes the entire <em>dist</em> directory to not be checked by ESlint.</p>\n<p>Lint has quite a lot to say about our code, much of which can be easily fixed.</p>\n<picture><img src=\"/static/c884cd70643d06e5f2eed6a8cb929699/604ec/53ea.png\" alt=\"terminal output of ESlint errors\" srcset=\"/static/c884cd70643d06e5f2eed6a8cb929699/772e8/53ea.png 200w,\n/static/c884cd70643d06e5f2eed6a8cb929699/e17e5/53ea.png 400w,\n/static/c884cd70643d06e5f2eed6a8cb929699/604ec/53ea.png 622w\" sizes=\"(max-width: 622px) 100vw, 622px\"></picture>\n<p>Let's not fix these issues just yet.</p>\n<h4>Configure WebStorm with ESLint</h4>\n<p>I like having the <code class=\"language-text\">lint:fix</code> option to go through and problems ESlint can fix by itself (like semicolons, line endings and spacing),\nbut a convenient alternative to the command line is to configure WebStorm to use ESLint so that you run the linter continuously.\nBy using WebStorm you will see errors in your code immediately.\nLet's turn that on now by going to Settings (<strong><em>Ctrl-Alt-S</em></strong>) and typing <code class=\"language-text\">lint</code>,\nwhich should take you to the Page <strong><em>Languages &#x26; Frameworks->JavaScript->Code Quality Tools->ESLint</em></strong>\nOnce you are in the ESLint setting select the <strong><em>Automatic ESLint configuration</em></strong> option and mark the checkbox below that says <strong><em>Run eslint --fix on save</em></strong>.</p>\n<blockquote>\n<p>Notice that these settings we just selected are for this project only!\nIt really makes sense for us to apply it to all future new projects, so I will have you do on more thing and change some settings for new projects.\nTo do so, you'll need to go to <strong><em>File->New Projects Setup->Settings for New Projects</em></strong>.\nOnce that window opens, then select <strong><em>Languages &#x26; Frameworks->Javascript->Code Quality Tools->ESLint</em></strong>.\nHere you'll see a window similar to what we just configured, so again select <strong><em>Automatic ESLint configuration</em></strong> and mark the <strong><em>Run eslint --fix on save</em></strong> checkbox.\nAlso, while we are in the New Project settings, please ensure that the node interpreter from part 0 is selected as the node interpreter.\n*You can reach that option by typing node in the search bar, it will be under <strong><em>Languages &#x26; Frameworks->Node.js</em></strong>.</p>\n</blockquote>\n<p>Once you click OK, WebStorm will underline style violations with a red line and will highlight other problems as well.</p>\n<picture><img src=\"/static/c1686672d745d4eb1e828cf244e49872/5a190/54a.png\" alt=\"Screenshot of vscode ESlint plugin showing errors\" srcset=\"/static/c1686672d745d4eb1e828cf244e49872/772e8/54a.png 200w,\n/static/c1686672d745d4eb1e828cf244e49872/e17e5/54a.png 400w,\n/static/c1686672d745d4eb1e828cf244e49872/5a190/54a.png 800w,\n/static/c1686672d745d4eb1e828cf244e49872/c1b63/54a.png 1200w,\n/static/c1686672d745d4eb1e828cf244e49872/dca52/54a.png 1550w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Some of those can be solved merely by saving the file (if we checked the <strong><em>Run eslint --fix on save</em></strong> option).\nHere's how it looks after I added I pressed <strong><em>Spacebar</em></strong> and then saved via <strong><em>Ctrl-S</em></strong>.</p>\n<p>Any errors like the missing semicolon will be applied by ESlint.\nThis makes the other errors easy to spot and fix right away.</p>\n<picture><img src=\"/static/7f7267434b0dd948a9ca7ea0ef9d066b/5a190/eslint_after_save.png\" alt=\"Screenshot of WebStorm ESlint plugin showing less errors after save\" srcset=\"/static/7f7267434b0dd948a9ca7ea0ef9d066b/772e8/eslint_after_save.png 200w,\n/static/7f7267434b0dd948a9ca7ea0ef9d066b/e17e5/eslint_after_save.png 400w,\n/static/7f7267434b0dd948a9ca7ea0ef9d066b/5a190/eslint_after_save.png 800w,\n/static/7f7267434b0dd948a9ca7ea0ef9d066b/c1b63/eslint_after_save.png 1200w,\n/static/7f7267434b0dd948a9ca7ea0ef9d066b/34431/eslint_after_save.png 1539w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>ESlint has a vast array of <a href=\"https://eslint.org/docs/rules/\">rules</a> that are easy to take into use by editing the <em>.estlintrc.js</em> file.</p>\n<p>Let's add the <a href=\"https://eslint.org/docs/rules/eqeqeq\">eqeqeq</a> rule that warns us if equality is checked with anything other than <code class=\"language-text\">===</code> (like <code class=\"language-text\">==</code>).\nThe rule is added under the <code class=\"language-text\">rules</code> field in the configuration file.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n  <span class=\"token string\">\"rules\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n   <span class=\"token string\">\"eqeqeq\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"error\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>While we're at it, let's make a few other changes to the rules.</p>\n<p>Let's prevent unnecessary <a href=\"https://eslint.org/docs/rules/no-trailing-spaces\">trailing spaces</a> at the ends of lines,\nlet's require that <a href=\"https://eslint.org/docs/rules/object-curly-spacing\">there is always a space before and after curly braces</a>,\nand let's also demand a consistent use of whitespace in the function parameters of arrow functions.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n  <span class=\"token string\">\"rules\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n    <span class=\"token string\">\"eqeqeq\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"error\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"no-trailing-spaces\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"error\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"object-curly-spacing\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token string\">\"error\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"always\"</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"arrow-spacing\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token string\">\"error\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token string\">\"before\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"after\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Our default configuration takes a bunch of predetermined rules into use from <code class=\"language-text\">eslint:recommended</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token string\">\"extends\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"eslint:recommended\"</span>,</code></pre></div>\n<p>This includes a rule that warns about <em>console.log</em> commands.\n<a href=\"https://eslint.org/docs/user-guide/configuring#configuring-rules\">Disabling</a> a rule can be accomplished by\ndefining its \"value\" as <em><code class=\"language-text\">0</code></em> in the configuration file.\nLet's do this for the <code class=\"language-text\">no-console</code> and <code class=\"language-text\">no-debugger</code> rules in the meantime,\nsince we are learning and not intending to ship anything just yet.</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n  <span class=\"token property\">\"rules\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n    <span class=\"token property\">\"eqeqeq\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"error\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"no-trailing-spaces\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"error\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"object-curly-spacing\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token string\">\"error\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"always\"</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"arrow-spacing\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token string\">\"error\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token property\">\"before\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token property\">\"after\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token property\">\"no-console\"</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token property\">\"no-debugger\"</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span></span>  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>To fix the remaining issues in the code, you can leverage WebStorm's support by clicking at the <strong><em>more actions</em></strong> link in the error.\nYou can also use the keyboard shortcut shown to see a list of options for fixing the error.</p>\n<picture><img src=\"/static/b600a72bd13d63918df9135802efbd26/108f8/eslint_more_actions.png\" alt=\"showing ide&#x27;s options when you have an error\" srcset=\"/static/b600a72bd13d63918df9135802efbd26/772e8/eslint_more_actions.png 200w,\n/static/b600a72bd13d63918df9135802efbd26/e17e5/eslint_more_actions.png 400w,\n/static/b600a72bd13d63918df9135802efbd26/108f8/eslint_more_actions.png 777w\" sizes=\"(max-width: 777px) 100vw, 777px\"></picture>\n<p>Just pay careful attention as you go through and fix some of the errors to ensure that your program still works.</p>\n<h4>Suppressing warnings and other tweaks</h4>\n<p>While ESlint and WebStorm are great, sometimes WebStorm or ESlint may not have a good solution for you either, as it has with us complaining about using the variable <strong><code class=\"language-text\">process</code></strong>.</p>\n<picture><img src=\"/static/4ac5b45e1efd1fe736c01a04f1642f9d/7de01/eslint_process.png\" alt=\"eslint complaining about process\" srcset=\"/static/4ac5b45e1efd1fe736c01a04f1642f9d/772e8/eslint_process.png 200w,\n/static/4ac5b45e1efd1fe736c01a04f1642f9d/e17e5/eslint_process.png 400w,\n/static/4ac5b45e1efd1fe736c01a04f1642f9d/7de01/eslint_process.png 794w\" sizes=\"(max-width: 794px) 100vw, 794px\"></picture>\n<p>In those cases, you may be tempted to use <strong><em>Suppress 'no-undef' for current line</em></strong>.\nDoing so leads to having a line for ESlint that looks like this just above the line.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"gatsby-highlight-code-line\"><span class=\"token comment\">// eslint-disable-next-line no-undef</span><span class=\"token keyword\">const</span> password <span class=\"token operator\">=</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">PORT</span> <span class=\"token operator\">||</span> <span class=\"token number\">3001</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>If you use that suppression a lot, you'll end up for the file if it ends up generating too many comments for your file that deal with disabling ESlint rules.\nAt this point, you may end up thinking that you should use ESLint's rule to suppress the errors for the entire file to remove all those comments,\n<em>but now that could also leave you more exposed</em>.\nIt's important with ESlint (and other tests) to be mindful of the errors so that you <strong><em>continue to have faith in seeing ESlint as informative</em></strong>, instead of a hindrance.\nYou also want to make sure you have faith that ESlint will catch errors for you.\nYou need to keep a close balance between seeing it as being a hindrance and improving your code by maintaining a consistent style.\nIn this case, a better option than suppressing error messages (which you really should avoid at this point in your learning journey) is to search for any potential ways to resolve this.\nIt turns out that the best solution is not to do any suppression but to add this line to the top of your <em>eslintrc.js</em> file.</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token property\">\"env\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">        <span class=\"token property\">\"node\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></span>        <span class=\"token property\">\"browser\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></code></pre></div>\n<p>Enabling node means that ESlint knows that we can use the <code class=\"language-text\">process</code> variable,\nand allows you to rely on a system that has helped countless developers with similar situations who have come before you.</p>\n<blockquote>\n<p><strong>Remember:</strong> when you make changes to the <em>.estlintrc.js</em> file, play close attention to errors in there as well! WebStorm will highlight issues.\nIf there are, WebStorm will report the issues to you, and you can look at the terminal output to see more details about it.</p>\n<picture><img src=\"/static/cab03d76ef4e33fefddf8f6785966528/5a190/55.png\" alt=\"terminal output from npm run lint\" srcset=\"/static/cab03d76ef4e33fefddf8f6785966528/772e8/55.png 200w,\n/static/cab03d76ef4e33fefddf8f6785966528/e17e5/55.png 400w,\n/static/cab03d76ef4e33fefddf8f6785966528/5a190/55.png 800w,\n/static/cab03d76ef4e33fefddf8f6785966528/c1b63/55.png 1200w,\n/static/cab03d76ef4e33fefddf8f6785966528/29007/55.png 1600w,\n/static/cab03d76ef4e33fefddf8f6785966528/a95f7/55.png 1853w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<blockquote>\n<p><strong>FYI:</strong> Our over eager file watcher may also give us warnings up top.\nIf you merely type a character and then delete it quickly, it should go away.</p>\n</blockquote>\n</blockquote>\n<p>Many companies define coding standards that are enforced throughout the organization through the ESlint configuration file.\nIt is not recommended to keep reinventing the wheel over and over again,\nand it can be a good idea to adopt a ready-made configuration from someone else's project into yours.\nRecently many projects have adopted the Airbnb <a href=\"https://github.com/airbnb/javascript\">Javascript style guide</a>\nby taking Airbnb's <a href=\"https://github.com/airbnb/javascript/tree/master/packages/eslint-config-airbnb\">ESlint</a> configuration into use.</p>\n<p>You can find the code for our current application in its entirety in the <a href=\"https://github.com/comp227/part3-tasks-backend/tree/part3-7\"><em>part3-7</em> branch of our backend repo</a>.</p>\n</div>\n<div class=\"tasks\">\n<h3>Exercise 3.22</h3>\n<h4>3.22: Lint configuration</h4>\n<p>Add ESlint to your application and fix all the warnings.</p>\n<blockquote>\n<p>This was the last exercise of this part of the course.\nIt's time to push your code to GitHub if you haven't already and mark the exercises that were completed on Canvas.</p>\n</blockquote>\n</div>","frontmatter":{"mainImage":{"publicURL":"/static/8ac7bc0fb2b7018a7853b00c454b2103/part-3.svg"},"part":3,"letter":"d","lang":"en"}}},"pageContext":{"part":3,"letter":"d","lang":"en"}}}