{"componentChunkName":"component---src-templates-content-template-js","path":"/part4/token_authentication","result":{"data":{"markdownRemark":{"html":"<div class=\"content\">\n<p>Now that we have created users on the backend, let's move on and add more functionality related to users and their tasks.\nIn particular, users must be able to log into our application, and when a user is logged in,\ntheir user information must automatically be attached to any new tasks they create.</p>\n<p>Let's start by implementing support for\n<a href=\"https://www.digitalocean.com/community/tutorials/the-ins-and-outs-of-token-based-authentication#how-token-based-works\"><strong>token-based authentication</strong></a> to the backend.</p>\n<p>The principles of token-based authentication are depicted in the following sequence diagram:</p>\n<picture><img src=\"/static/b6106d4daa415340fe929e1cc9ca6d24/5a190/16e.png\" alt=\"sequence diagram of token-based authentication\" srcset=\"/static/b6106d4daa415340fe929e1cc9ca6d24/772e8/16e.png 200w,\n/static/b6106d4daa415340fe929e1cc9ca6d24/e17e5/16e.png 400w,\n/static/b6106d4daa415340fe929e1cc9ca6d24/5a190/16e.png 800w,\n/static/b6106d4daa415340fe929e1cc9ca6d24/f0551/16e.png 862w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<ol>\n<li>\n<p>User starts by logging in using a login form implemented with React</p>\n<ul>\n<li>We will add the login form to the frontend in <a href=\"/part5\">part 5</a></li>\n</ul>\n</li>\n<li>This causes the React code to send the username and the password to the server address <strong><em>/api/login</em></strong> as a HTTP POST request.</li>\n<li>\n<p>If the username and the password are correct, the server generates a <strong>token</strong> that somehow identifies the logged-in user.</p>\n<ul>\n<li>The token is signed digitally, making it highly impracticable to falsify cryptographically</li>\n</ul>\n</li>\n<li>The backend responds with a status code indicating the operation was successful and returns the token with the response.</li>\n<li>The browser saves the token, for example to the state of a React application.</li>\n<li>When the user creates a new task (or does some other operation requiring identification), the React code sends the token to the server with the request.</li>\n<li>The server uses the token to identify the user</li>\n</ol>\n<p>Let's first implement the functionality for logging in.\nInstall the <a href=\"https://github.com/auth0/node-jsonwebtoken\"><em>jsonwebtoken</em> library</a>, which allows us to generate <a href=\"https://jwt.io/\">JSON web tokens</a>.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> i jsonwebtoken</code></pre></div>\n<p>The code for logging in goes to the file <em>controllers/login.js</em>.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> jwt <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"jsonwebtoken\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> bcrypt <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bcrypt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> loginRouter <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"express\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Router</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> User <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"../models/user\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nloginRouter<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">request<span class=\"token punctuation\">,</span> response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> username<span class=\"token punctuation\">,</span> password <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> User<span class=\"token punctuation\">.</span><span class=\"token function\">findOne</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> username <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> passwordCorrect <span class=\"token operator\">=</span> user <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span>\n    <span class=\"token operator\">?</span> <span class=\"token boolean\">false</span>\n    <span class=\"token operator\">:</span> <span class=\"token keyword\">await</span> bcrypt<span class=\"token punctuation\">.</span><span class=\"token function\">compare</span><span class=\"token punctuation\">(</span>password<span class=\"token punctuation\">,</span> user<span class=\"token punctuation\">.</span>passwordHash<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>user <span class=\"token operator\">&amp;&amp;</span> passwordCorrect<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">401</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      error<span class=\"token operator\">:</span> <span class=\"token string\">\"invalid username or password\"</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">const</span> userForToken <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    username<span class=\"token operator\">:</span> user<span class=\"token punctuation\">.</span>username<span class=\"token punctuation\">,</span>\n    id<span class=\"token operator\">:</span> user<span class=\"token punctuation\">.</span>_id<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> token <span class=\"token operator\">=</span> jwt<span class=\"token punctuation\">.</span><span class=\"token function\">sign</span><span class=\"token punctuation\">(</span>userForToken<span class=\"token punctuation\">,</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">SECRET</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  response\n    <span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> token<span class=\"token punctuation\">,</span> username<span class=\"token operator\">:</span> user<span class=\"token punctuation\">.</span>username<span class=\"token punctuation\">,</span> name<span class=\"token operator\">:</span> user<span class=\"token punctuation\">.</span>name <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> loginRouter<span class=\"token punctuation\">;</span></code></pre></div>\n<p>The code starts by searching for the user from the database via the <code class=\"language-text\">username</code> attached to the request.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> User<span class=\"token punctuation\">.</span><span class=\"token function\">findOne</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> username <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Next, it checks the <code class=\"language-text\">password</code>, which is also attached to the request.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> passwordCorrect <span class=\"token operator\">=</span> user <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span>\n  <span class=\"token operator\">?</span> <span class=\"token boolean\">false</span>\n  <span class=\"token operator\">:</span> <span class=\"token keyword\">await</span> bcrypt<span class=\"token punctuation\">.</span><span class=\"token function\">compare</span><span class=\"token punctuation\">(</span>password<span class=\"token punctuation\">,</span> user<span class=\"token punctuation\">.</span>passwordHash<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Remember that passwords themselves are not saved to the database.\nInstead, we store the <strong>hashes</strong> calculated from the passwords.\nThis means we need to use <code class=\"language-text\">bcrypt.compare</code> to check if the password is correct:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">await</span> bcrypt<span class=\"token punctuation\">.</span><span class=\"token function\">compare</span><span class=\"token punctuation\">(</span>password<span class=\"token punctuation\">,</span> user<span class=\"token punctuation\">.</span>passwordHash<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>If the user is not found, or the password is incorrect,\nwe respond to the request with the status code <a href=\"https://www.rfc-editor.org/rfc/rfc9110.html#name-401-unauthorized\">401 unauthorized</a>.\nThe reason for the failure is explained in the response body.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>user <span class=\"token operator\">&amp;&amp;</span> passwordCorrect<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">401</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    error<span class=\"token operator\">:</span> <span class=\"token string\">\"invalid username or password\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>If the password is correct, a token is created with the method <code class=\"language-text\">jwt.sign</code>.\nThe token contains the <code class=\"language-text\">username</code> and the user <code class=\"language-text\">id</code> in a digitally signed form.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> userForToken <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  username<span class=\"token operator\">:</span> user<span class=\"token punctuation\">.</span>username<span class=\"token punctuation\">,</span>\n  id<span class=\"token operator\">:</span> user<span class=\"token punctuation\">.</span>_id<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> token <span class=\"token operator\">=</span> jwt<span class=\"token punctuation\">.</span><span class=\"token function\">sign</span><span class=\"token punctuation\">(</span>userForToken<span class=\"token punctuation\">,</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">SECRET</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>The token has been digitally signed using a string from the environment variable <code class=\"language-text\">SECRET</code> as the <em>secret</em>.\nThe digital signature ensures that only parties who know the secret can generate a valid token.\nThe value for the environment variable must be set in the <em>.env</em> file.</p>\n<p>A successful request is responded to with the status code <strong>200 OK</strong>.\nThe generated token and the username of the user are sent back in the response body.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">response\n  <span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> token<span class=\"token punctuation\">,</span> username<span class=\"token operator\">:</span> user<span class=\"token punctuation\">.</span>username<span class=\"token punctuation\">,</span> name<span class=\"token operator\">:</span> user<span class=\"token punctuation\">.</span>name <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Now the code for login just has to be added to the application by adding the new router to <em>app.js</em>.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> loginRouter <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./controllers/login\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//...</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/api/login\"</span><span class=\"token punctuation\">,</span> loginRouter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Let's try logging in using the WebStorm REST client:</p>\n<picture><img src=\"/static/aff4a395306e80baa07f81e46ae06426/5a190/17e.png\" alt=\"WebStorm rest post with username/password\" srcset=\"/static/aff4a395306e80baa07f81e46ae06426/772e8/17e.png 200w,\n/static/aff4a395306e80baa07f81e46ae06426/e17e5/17e.png 400w,\n/static/aff4a395306e80baa07f81e46ae06426/5a190/17e.png 800w,\n/static/aff4a395306e80baa07f81e46ae06426/c1b63/17e.png 1200w,\n/static/aff4a395306e80baa07f81e46ae06426/fbfd6/17e.png 1357w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>It does not work.\nThe following is printed to the console:</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>pre</span><span class=\"token punctuation\">></span></span>Error: secretOrPrivateKey must have a value<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span><span class=\"token punctuation\">></span></span> <span class=\"token entity\" title=\"&nbsp;\">&amp;nbsp;</span> <span class=\"token entity\" title=\"&nbsp;\">&amp;nbsp;</span>at module.exports [as sign] (C:\\Users\\powercat\\comp227\\part3\\tasks-backend\\node_modules\\jsonwebtoken\\sign.js:105:20)<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span><span class=\"token punctuation\">></span></span> <span class=\"token entity\" title=\"&nbsp;\">&amp;nbsp;</span> <span class=\"token entity\" title=\"&nbsp;\">&amp;nbsp;</span>at C:\\Users\\powercat\\comp227\\part3\\tasks-backend\\controllers\\login.js:25:23<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>pre</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span>\n\n...\n\nResponse code: 500 (Internal Server Error); Time: 235ms (235 ms); Content length: 387 bytes (387 B)</code></pre></div>\n<p>The command <code class=\"language-text\">jwt.sign(userForToken, process.env.SECRET)</code> fails.\nWe forgot to set a value to the environment variable <code class=\"language-text\">SECRET</code>.\nIt can be any string.\nWhen we set the value in file <em>.env</em>, (and restart the server), the login works.</p>\n<p>A successful login returns the user details and the token:</p>\n<picture><img src=\"/static/e8ed271a0869cb64e3bb0af4f44c9913/5a190/18ea.png\" alt=\"vs code rest response showing details and token\" srcset=\"/static/e8ed271a0869cb64e3bb0af4f44c9913/772e8/18ea.png 200w,\n/static/e8ed271a0869cb64e3bb0af4f44c9913/e17e5/18ea.png 400w,\n/static/e8ed271a0869cb64e3bb0af4f44c9913/5a190/18ea.png 800w,\n/static/e8ed271a0869cb64e3bb0af4f44c9913/c1b63/18ea.png 1200w,\n/static/e8ed271a0869cb64e3bb0af4f44c9913/29007/18ea.png 1600w,\n/static/e8ed271a0869cb64e3bb0af4f44c9913/75b1f/18ea.png 1699w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>A wrong username or password returns an error message and the proper status code:</p>\n<picture><img src=\"/static/990ea3859f37a287e4d4d2db5225c192/5a190/19ea.png\" alt=\"vs code rest response for incorrect login details\" srcset=\"/static/990ea3859f37a287e4d4d2db5225c192/772e8/19ea.png 200w,\n/static/990ea3859f37a287e4d4d2db5225c192/e17e5/19ea.png 400w,\n/static/990ea3859f37a287e4d4d2db5225c192/5a190/19ea.png 800w,\n/static/990ea3859f37a287e4d4d2db5225c192/c1b63/19ea.png 1200w,\n/static/990ea3859f37a287e4d4d2db5225c192/29007/19ea.png 1600w,\n/static/990ea3859f37a287e4d4d2db5225c192/09b15/19ea.png 1704w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Notice here that I placed a comment after the <code class=\"language-text\">###</code> syntax.\nThis is helpful when you start having a larger test file where you have different scenarios so you can more easily find what you are looking for.</p>\n<h3>Limiting creating new tasks to logged-in users</h3>\n<p>Let's change creating new tasks so that it is <em>only possible if the POST request has a valid token attached</em>.\nThe task is then saved to the <code class=\"language-text\">tasks</code> list of the user identified by the token.</p>\n<p>There are several ways of sending the token from the browser to the server.\nWe will use the <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Authorization\">Authorization header</a>.\nThe header also tells which <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Authentication#Authentication_schemes\">authentication scheme</a> is used.\nThis can be necessary if the server offers multiple ways to authenticate.\nIdentifying the scheme tells the server how the attached credentials should be interpreted.</p>\n<p>The <strong>Bearer</strong> scheme is suitable for our needs.</p>\n<p>In practice, this means that if the token is, for example,\nthe string <code class=\"language-text\">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9</code>, the Authorization header will have the value:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9</code></pre></div>\n<p>Our <em>controllers/tasks.js</em> will change like so:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> jwt <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"jsonwebtoken\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"token comment\">// ...</span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getTokenFrom</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">request</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> authorization <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"authorization\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>authorization <span class=\"token operator\">&amp;&amp;</span> authorization<span class=\"token punctuation\">.</span><span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Bearer \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">return</span> authorization<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Bearer \"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></span>\ntasksRouter<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">request<span class=\"token punctuation\">,</span> response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> body <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> decodedToken <span class=\"token operator\">=</span> jwt<span class=\"token punctuation\">.</span><span class=\"token function\">verify</span><span class=\"token punctuation\">(</span><span class=\"token function\">getTokenFrom</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">SECRET</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>decodedToken<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">401</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> error<span class=\"token operator\">:</span> <span class=\"token string\">\"token invalid\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span></span><span class=\"gatsby-highlight-code-line\"></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> User<span class=\"token punctuation\">.</span><span class=\"token function\">findById</span><span class=\"token punctuation\">(</span>decodedToken<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n  <span class=\"token keyword\">const</span> task <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Task</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    content<span class=\"token operator\">:</span> body<span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">,</span>\n<span class=\"gatsby-highlight-code-line\">    important<span class=\"token operator\">:</span> body<span class=\"token punctuation\">.</span>important <span class=\"token operator\">===</span> <span class=\"token keyword\">undefined</span> <span class=\"token operator\">?</span> <span class=\"token boolean\">false</span> <span class=\"token operator\">:</span> <span class=\"token function\">Boolean</span><span class=\"token punctuation\">(</span>body<span class=\"token punctuation\">.</span>important<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></span>    date<span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    user<span class=\"token operator\">:</span> user<span class=\"token punctuation\">.</span>_id\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> savedTask <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> task<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  user<span class=\"token punctuation\">.</span>tasks <span class=\"token operator\">=</span> user<span class=\"token punctuation\">.</span>tasks<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>savedTask<span class=\"token punctuation\">.</span>_id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">await</span> user<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  response<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">201</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span>savedTask<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>The helper function <code class=\"language-text\">getTokenFrom</code> isolates the token from the <strong><em>authorization</em></strong> header.\nThe validity of the token is checked with <code class=\"language-text\">jwt.verify</code>.\nThe method also decodes the token or returns the Object that the token was based on.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> decodedToken <span class=\"token operator\">=</span> jwt<span class=\"token punctuation\">.</span><span class=\"token function\">verify</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">,</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">SECRET</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>The object decoded from the token contains the <code class=\"language-text\">username</code> and <code class=\"language-text\">id</code> fields, which tell the server who made the request.</p>\n<p>If the object decoded from the token does not contain the user's identity (<code class=\"language-text\">decodedToken.id</code> is <em><code class=\"language-text\">undefined</code></em>),\nerror status code <a href=\"https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.2\">401 unauthorized</a>\nis returned and the reason for the failure is explained in the response body.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>decodedToken<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">401</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    error<span class=\"token operator\">:</span> <span class=\"token string\">\"token invalid\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>When the identity of the maker of the request is resolved, the execution continues as before.</p>\n<p>A new task can now be created using a REST client if the <strong><em>authorization</em></strong> header is given the correct value,\nsomething like the string <code class=\"language-text\">Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9</code>, where the second value is the token returned by the <strong><em>login</em></strong> operation.</p>\n<p>Using Postman this looks as follows:</p>\n<picture><img src=\"/static/87a57b4cc5fef64429d579754d3e3a82/5a190/20e.png\" alt=\"postman adding bearer token\" srcset=\"/static/87a57b4cc5fef64429d579754d3e3a82/772e8/20e.png 200w,\n/static/87a57b4cc5fef64429d579754d3e3a82/e17e5/20e.png 400w,\n/static/87a57b4cc5fef64429d579754d3e3a82/5a190/20e.png 800w,\n/static/87a57b4cc5fef64429d579754d3e3a82/c1b63/20e.png 1200w,\n/static/87a57b4cc5fef64429d579754d3e3a82/78363/20e.png 1522w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>and with the WebStorm REST client</p>\n<picture><img src=\"/static/9ac43f335c659b30e5ad94982592bc92/5a190/21e.png\" alt=\"vscode adding bearer token example\" srcset=\"/static/9ac43f335c659b30e5ad94982592bc92/772e8/21e.png 200w,\n/static/9ac43f335c659b30e5ad94982592bc92/e17e5/21e.png 400w,\n/static/9ac43f335c659b30e5ad94982592bc92/5a190/21e.png 800w,\n/static/9ac43f335c659b30e5ad94982592bc92/c1b63/21e.png 1200w,\n/static/9ac43f335c659b30e5ad94982592bc92/29007/21e.png 1600w,\n/static/9ac43f335c659b30e5ad94982592bc92/1e1c3/21e.png 1670w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<h3>Error handling</h3>\n<p>Token verification can also cause a <code class=\"language-text\">JsonWebTokenError</code>.\nFor example, if we remove a few characters from the token and try creating a new task, this happens:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">JsonWebTokenError: invalid signature\n    at /Users/powercat/comp227/part3/tasks-backend/node_modules/jsonwebtoken/verify.js:126:19\n    at getSecret <span class=\"token punctuation\">(</span>/Users/powercat/comp227/part3/tasks-backend/node_modules/jsonwebtoken/verify.js:80:14<span class=\"token punctuation\">)</span>\n    at Object.module.exports <span class=\"token punctuation\">[</span>as verify<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">(</span>/Users/powercat/comp227/part3/tasks-backend/node_modules/jsonwebtoken/verify.js:84:10<span class=\"token punctuation\">)</span>\n    at tasksRouter.post <span class=\"token punctuation\">(</span>/Users/powercat/comp227/part3/tasks-backend/controllers/tasks.js:40:30<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Once we get an exception, if we are not running <em>nodemon</em> we may have to restart our program,\nas any subsequent bad requests could be met with an <em>Internal Server Error (500)</em>.</p>\n<p>There are many possible reasons for a decoding error.\nThe token can be faulty (like in our example),\nfalsified, or expired.\nLet's extend our <code class=\"language-text\">errorHandler</code> in <em>utils/middleware.js</em> to take into account the different decoding errors.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">unknownEndpoint</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">request<span class=\"token punctuation\">,</span> response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  response<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">404</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> error<span class=\"token operator\">:</span> <span class=\"token string\">\"unknown endpoint\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">errorHandler</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">error<span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  logger<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">.</span>name <span class=\"token operator\">===</span> <span class=\"token string\">\"CastError\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">400</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      error<span class=\"token operator\">:</span> <span class=\"token string\">\"malformatted id\"</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">.</span>name <span class=\"token operator\">===</span> <span class=\"token string\">\"ValidationError\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">400</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      error<span class=\"token operator\">:</span> error<span class=\"token punctuation\">.</span>message \n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">.</span>name <span class=\"token operator\">===</span> <span class=\"token string\">\"JsonWebTokenError\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> </span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">401</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> </span><span class=\"gatsby-highlight-code-line\">      error<span class=\"token operator\">:</span> <span class=\"token string\">\"invalid token\"</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">next</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>The current application code can be found on\n<a href=\"https://github.com/comp227/part3-tasks-backend/tree/part4-9\">GitHub</a>, branch <em>part4-9</em>.</p>\n<p>If the application has multiple interfaces requiring identification, JWT's validation should be separated into its own middleware.\nAn existing library like <a href=\"https://www.npmjs.com/package/express-jwt\"><em>express-jwt</em></a> could also be used.</p>\n<h3>Problems of Token-based authentication</h3>\n<p>Token authentication is pretty easy to implement, but it contains one problem.\nOnce the API user, (e.g. a React app) gets a token, the API has a blind trust with the token holder.\nWhat if the access rights of the token holder should be revoked?</p>\n<p>There are two solutions to the problem.\nThe easier one is to limit the validity period of a token:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">loginRouter<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">request<span class=\"token punctuation\">,</span> response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> username<span class=\"token punctuation\">,</span> password <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> User<span class=\"token punctuation\">.</span><span class=\"token function\">findOne</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> username <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> passwordCorrect <span class=\"token operator\">=</span> user <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span>\n    <span class=\"token operator\">?</span> <span class=\"token boolean\">false</span>\n    <span class=\"token operator\">:</span> <span class=\"token keyword\">await</span> bcrypt<span class=\"token punctuation\">.</span><span class=\"token function\">compare</span><span class=\"token punctuation\">(</span>password<span class=\"token punctuation\">,</span> user<span class=\"token punctuation\">.</span>passwordHash<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>user <span class=\"token operator\">&amp;&amp;</span> passwordCorrect<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">401</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      error<span class=\"token operator\">:</span> <span class=\"token string\">\"invalid username or password\"</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">const</span> userForToken <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    username<span class=\"token operator\">:</span> user<span class=\"token punctuation\">.</span>username<span class=\"token punctuation\">,</span>\n    id<span class=\"token operator\">:</span> user<span class=\"token punctuation\">.</span>_id<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// token expires in 60*60 seconds, that is, in one hour</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> token <span class=\"token operator\">=</span> jwt<span class=\"token punctuation\">.</span><span class=\"token function\">sign</span><span class=\"token punctuation\">(</span></span><span class=\"gatsby-highlight-code-line\">    userForToken<span class=\"token punctuation\">,</span> </span><span class=\"gatsby-highlight-code-line\">    process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">SECRET</span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">{</span> expiresIn<span class=\"token operator\">:</span> <span class=\"token number\">60</span><span class=\"token operator\">*</span><span class=\"token number\">60</span> <span class=\"token punctuation\">}</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n  response\n    <span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> token<span class=\"token punctuation\">,</span> username<span class=\"token operator\">:</span> user<span class=\"token punctuation\">.</span>username<span class=\"token punctuation\">,</span> name<span class=\"token operator\">:</span> user<span class=\"token punctuation\">.</span>name <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Once the token expires, the client app needs to get a new token.\nUsually, this happens by forcing the user to re-login to the app.</p>\n<p>The error handling middleware should be extended to give a proper error in the case of an expired token:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">errorHandler</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">error<span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  logger<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">.</span>name <span class=\"token operator\">===</span> <span class=\"token string\">\"CastError\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">400</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> error<span class=\"token operator\">:</span> <span class=\"token string\">\"malformatted id\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">.</span>name <span class=\"token operator\">===</span> <span class=\"token string\">\"ValidationError\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">400</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> error<span class=\"token operator\">:</span> error<span class=\"token punctuation\">.</span>message <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">.</span>name <span class=\"token operator\">===</span> <span class=\"token string\">\"JsonWebTokenError\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">401</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      error<span class=\"token operator\">:</span> <span class=\"token string\">\"invalid token\"</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">.</span>name <span class=\"token operator\">===</span> <span class=\"token string\">\"TokenExpiredError\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">401</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">      error<span class=\"token operator\">:</span> <span class=\"token string\">\"token expired\"</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span></span>\n  <span class=\"token function\">next</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The <em>shorter the expiration time, the more safe the solution is</em>.\nSo if the token gets into the wrong hands or user access to the system needs to be revoked, the token is only usable for a limited amount of time.\nOn the other hand, a short expiration time forces a potential pain to a user, one must login to the system more frequently.</p>\n<p>The other solution is to save info about each token to backend database\nand to check for each API request if the access right corresponding to the token is still valid.\nWith this scheme, access rights can be revoked at any time.\nThis kind of solution is often called a <strong>server-side session</strong>.</p>\n<p>The negative aspect of server-side sessions is the increased complexity in the backend and also the effect on performance\nsince the token validity needs to be checked for each API request to the database.\nDatabase access is considerably slower compared to checking the validity of the token itself.\nThat is why it is quite common to save the session corresponding to a token to a <strong>key-value database</strong> such as <a href=\"https://redis.io/\"><strong><em>Redis</em></strong></a>\nthat is limited in functionality compared to a MongoDB or relational databases but extremely fast in some usage scenarios.</p>\n<p>When server-side sessions are used, the <strong><em>token is a random string</em></strong> (quite often).\nThe token does not include any information about the user as it is quite often the case when jwt-tokens are used.\nFor each API request, the server fetches the relevant information about the identity of the user from the database.\nIt is also quite usual that instead of using Authorization-header, <strong>cookies</strong> are used as the mechanism for transferring the token between the client and the server.</p>\n<h3>End tasks</h3>\n<p>There have been many changes to the code which have caused a typical problem for a fast-paced software project: most of the tests have broken.\nBecause this part of the course is already jammed with new information, we will leave fixing the tests to a non-compulsory exercise.</p>\n<p>Usernames, passwords and applications using token authentication must always be used over <a href=\"https://en.wikipedia.org/wiki/HTTPS\">HTTPS</a>.\nWe could use a Node <a href=\"https://nodejs.org/api/https.html\">HTTPS</a> server in our application instead of the\n<a href=\"https://nodejs.org/docs/latest-v8.x/api/http.html\">HTTP</a> server (it requires more configuration).\nOn the other hand, the production version of our application is on Render, so our application stays secure.\nRender routes all traffic between a browser and the Render server over HTTPS.</p>\n<p>We will implement login to the frontend in the <a href=\"/part5\">next part</a>.</p>\n<blockquote>\n<p><strong>Pertinent:</strong> At this stage, in the deployed tasks app, it is expected that the creating a task feature will stop working as the backend login feature is not yet linked to the frontend.</p>\n</blockquote>\n</div>\n<div class=\"tasks\">\n<h3>Exercises 4.15-4.23</h3>\n<p>In the next exercises, the basics of user management will be implemented for the Watchlist application.\nThe safest way is to follow the story from part 4 chapter <a href=\"/part4/user_administration\">User administration</a>\nto the chapter <a href=\"/part4/token_authentication\">Token-based authentication</a>.\nYou can of course also use your creativity.</p>\n<blockquote>\n<p><strong>Warning:</strong> If you notice you are mixing <code class=\"language-text\">async</code>/<code class=\"language-text\">await</code> and <code class=\"language-text\">then</code> calls, it is 99% certain you are doing something wrong.\nUse either or, never both.</p>\n</blockquote>\n<h4>4.15: watchlist expansion, Step 3</h4>\n<p>Implement a way to create new users by doing an HTTP POST request to address <strong><em>api/users</em></strong>.\nUsers have a <em>username, password and name</em>.</p>\n<p><strong>Do not save passwords to the database as clear text</strong>,\nbut use the <strong><em>bcrypt</em></strong> library like we did in part 4 chapter <a href=\"/part4/user_administration#creating-users\">Creating new users</a>.</p>\n<blockquote>\n<p><strong>FYI:</strong> Some Windows users have had problems with <strong><em>bcrypt</em></strong>.\nIf you run into problems, remove the library with command</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> uninstall bcrypt </code></pre></div>\n<p>and install <a href=\"https://www.npmjs.com/package/bcryptjs\">bcryptjs</a> instead.</p>\n</blockquote>\n<p>Implement a way to see the details of all users by doing a suitable HTTP request.</p>\n<p>The list of users can, for example, look as follows:</p>\n<picture><img src=\"/static/1a89ff7a677266b068296f99cf1acadf/5a190/22.png\" alt=\"browser api/users shows JSON data of two users\" srcset=\"/static/1a89ff7a677266b068296f99cf1acadf/772e8/22.png 200w,\n/static/1a89ff7a677266b068296f99cf1acadf/e17e5/22.png 400w,\n/static/1a89ff7a677266b068296f99cf1acadf/5a190/22.png 800w,\n/static/1a89ff7a677266b068296f99cf1acadf/d6a46/22.png 1008w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<h4>4.16*: watchlist expansion, Step 4</h4>\n<p>Add a feature which adds the following restrictions to creating new users:</p>\n<ul>\n<li>Both username and password must be given.</li>\n<li>Both username and password must be at least 3 characters long.</li>\n<li>The username must be unique.</li>\n</ul>\n<p>The operation must respond with a suitable status code and some kind of an error message if an invalid user is created.</p>\n<blockquote>\n<p><strong>Pertinent:</strong> Do not test password restrictions with Mongoose validations.\nIt is not a good idea because the password received by the backend and the password hash saved to the database are not the same thing.\nThe password length should be validated in the controller as we did in <a href=\"/part3/node_js_and_express\">part 3</a> before using Mongoose validation.</p>\n</blockquote>\n<p>Also, implement tests that ensure invalid users are not created and that an invalid add user operation returns a suitable status code and error message.</p>\n<h4>4.17: watchlist expansion, Step 5</h4>\n<p>Expand <code class=\"language-text\">show</code> so that <em>each show contains information on the recommender of that show</em>.</p>\n<p>Modify adding new shows so that when a new show is created, <strong><em>any</em></strong> user from the database is designated as its recommender (for example the one found first).\nImplement this according to part 4's <a href=\"/part4/user_administration#populate\">populate section</a>.\nWhich user is designated as the recommender does not matter just yet.\nThe functionality is finished in exercise 4.19.</p>\n<p>Modify listing all shows so that the recommender's user information is displayed with the show:</p>\n<picture><img src=\"/static/6ef6e5c9838ce2adce58dc794904298c/5a190/23e.png\" alt=\"api/shows embeds creators user information in JSON data\" srcset=\"/static/6ef6e5c9838ce2adce58dc794904298c/772e8/23e.png 200w,\n/static/6ef6e5c9838ce2adce58dc794904298c/e17e5/23e.png 400w,\n/static/6ef6e5c9838ce2adce58dc794904298c/5a190/23e.png 800w,\n/static/6ef6e5c9838ce2adce58dc794904298c/96220/23e.png 1165w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>and listing all users also displays the shows they recommended:</p>\n<picture><img src=\"/static/61ba4f441a94454e08d876ce42e202b0/5a190/24e.png\" alt=\"api/users embeds shows in JSON data\" srcset=\"/static/61ba4f441a94454e08d876ce42e202b0/772e8/24e.png 200w,\n/static/61ba4f441a94454e08d876ce42e202b0/e17e5/24e.png 400w,\n/static/61ba4f441a94454e08d876ce42e202b0/5a190/24e.png 800w,\n/static/61ba4f441a94454e08d876ce42e202b0/4d383/24e.png 1195w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<h4>4.18: watchlist expansion, Step 6</h4>\n<p>Implement token-based authentication according to part 4's <a href=\"/part4/token_authentication\">Token authentication section</a>.</p>\n<h4>4.19: watchlist expansion, Step 7</h4>\n<p>Modify adding new shows so that it is only possible if a valid token is sent with the HTTP POST request.\nThe user identified by the token is designated as the recommender of that show.</p>\n<h4>4.20*: watchlist expansion, Step 8</h4>\n<p><a href=\"/part4/token_authentication\">This example</a> from part 4 shows taking the token from the header with the <code class=\"language-text\">getTokenFrom</code> helper function in <em>controllers/shows.js</em>.</p>\n<p>If you used the same solution, refactor taking the token to a <a href=\"/part3/node_js_and_express#middleware\">middleware</a>.\nThe middleware should take the token from the <strong><em>Authorization</em></strong> header and place it into the <code class=\"language-text\">token</code> field of the <code class=\"language-text\">request</code> object.</p>\n<p>In other words, if you register this middleware in the <em>app.js</em> file before all routes</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>middleware<span class=\"token punctuation\">.</span>tokenExtractor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Routes can access the token with <code class=\"language-text\">request.token</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">showsRouter<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">request<span class=\"token punctuation\">,</span> response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ..</span>\n  <span class=\"token keyword\">const</span> decodedToken <span class=\"token operator\">=</span> jwt<span class=\"token punctuation\">.</span><span class=\"token function\">verify</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span>token<span class=\"token punctuation\">,</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">SECRET</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// ..</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Remember that a normal <a href=\"/part3/node_js_and_express#middleware\">middleware function</a> is a function with three parameters,\nthat at the end calls the last parameter <code class=\"language-text\">next</code> to move the control to the next middleware:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">tokenExtractor</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// code that extracts the token</span>\n\n  <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h4>4.21*: watchlist expansion, Step 9</h4>\n<p><strong><em>Change the delete show operation</em></strong> so that a show can be deleted only by the user who added the show.\nTherefore, deleting a show is possible only if the token sent with the request is the same as that of the show's recommender.</p>\n<p>If deleting a show is attempted without a token or by an invalid user, the operation should return a suitable status code.</p>\n<p>Notice that if you fetch a show from the database,</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> show <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> Show<span class=\"token punctuation\">.</span><span class=\"token function\">findById</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>the field <code class=\"language-text\">show.user</code> does not contain a <code class=\"language-text\">string</code>, but an <code class=\"language-text\">Object</code>.\nSo if you want to compare the id of the object fetched from the database and a string id, a normal comparison operation does not work.\nThe id fetched from the database must be parsed into a string first.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> show<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> userid<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span> <span class=\"token comment\">// ...</span></code></pre></div>\n<h4>4.22*:  watchlist expansion, Step 10</h4>\n<p>Both the new show recommendation and show deletion need to find out the identity of the user who is doing the operation.\nThe middleware <code class=\"language-text\">tokenExtractor</code> that we did in exercise 4.20 helps\nbut still both the handlers of <em>post</em> and <em>delete</em> operations need to find out who the user holding a specific token is.</p>\n<p>Now create a new middleware <code class=\"language-text\">userExtractor</code>, that finds out the user and sets it to the request object.\nWhen you register the middleware in <em>app.js</em></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>middleware<span class=\"token punctuation\">.</span>userExtractor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>the user will be set in the field <code class=\"language-text\">request.user</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">showsRouter<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">request<span class=\"token punctuation\">,</span> response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// get user from request object</span>\n  <span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// ..</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nshowsRouter<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/:id\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">request<span class=\"token punctuation\">,</span> response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// get user from request object</span>\n  <span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// ..</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Notice that it is possible to register a middleware only for a specific set of routes.\nSo instead of using <code class=\"language-text\">userExtractor</code> with all the routes,</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> middleware <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"../utils/middleware\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// ...</span>\n\n<span class=\"token comment\">// use the middleware in all routes</span>\n<span class=\"gatsby-highlight-code-line\">app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>middleware<span class=\"token punctuation\">.</span>userExtractor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/api/shows\"</span><span class=\"token punctuation\">,</span> showsRouter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/api/users\"</span><span class=\"token punctuation\">,</span> usersRouter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/api/login\"</span><span class=\"token punctuation\">,</span> loginRouter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>we could register it to be only executed with path <strong><em>/api/shows</em></strong> routes:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> middleware <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"../utils/middleware\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// ...</span>\n\n<span class=\"token comment\">// use the middleware only in /api/shows routes</span>\n<span class=\"gatsby-highlight-code-line\">app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/api/shows\"</span><span class=\"token punctuation\">,</span> middleware<span class=\"token punctuation\">.</span>userExtractor<span class=\"token punctuation\">,</span> showsRouter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/api/users\"</span><span class=\"token punctuation\">,</span> usersRouter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/api/login\"</span><span class=\"token punctuation\">,</span> loginRouter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>As can be seen, this happens by chaining multiple middlewares as the parameter of function <code class=\"language-text\">use</code>.\nIt would also be possible to register a middleware only for a specific operation:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> middleware <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"../utils/middleware\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// ...</span>\n\nrouter<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span> middleware<span class=\"token punctuation\">.</span>userExtractor<span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">request<span class=\"token punctuation\">,</span> response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h4>4.23*:  watchlist expansion, Step 11</h4>\n<p>After adding token-based authentication the tests for adding a new show broke down.\n<strong>Fix the tests.</strong>\nAlso, write a new test to ensure adding a show fails with the proper status code <strong>401 Unauthorized</strong> if a token is not provided.</p>\n<p><a href=\"https://github.com/visionmedia/supertest/issues/398\">This</a> is most likely useful when doing the fix.</p>\n<p>This is the last exercise for this part of the course and it's time to push your code to GitHub if you haven't already and mark the exercises that were completed on Canvas.</p>\n<!---\n@startuml\nskinparam defaultTextAlignment center\nnote left of user\n  //user fills in login form// with\n  \"\"username\"\" and \"\"password\"\"\nend note\nuser -> browser: **Login** button pressed\n\nbrowser -> backend: HTTP POST ///api/login// \"\"{ username, password }\"\"\nnote left of backend\n  backend //**generates**// \"\"TOKEN\"\" that identifies \"\"user\"\" \nend note\nbackend -> browser: \"\"TOKEN\"\" //**returned**// as //message body//\nnote left of browser\n  browser //**saves**// \"\"TOKEN\"\"\nend note\nnote left of user\n  user //creates a task//\nend note\nuser -> browser: **Create task** button pressed\nbrowser -> backend: HTTP POST ///api/tasks// \"\"{ content }\"\" & \"\"TOKEN\"\" in header\nnote left of backend\n  backend //**identifies**// \"\"user\"\" from the TOKEN\nend note\n\nbackend -> browser: **201 created**\n\nuser -> user:\n@enduml\n-->\n</div>","frontmatter":{"mainImage":{"publicURL":"/static/f800638504cdf371a12947fc31d52030/part-4.svg"},"part":4,"letter":"d","lang":"en"}}},"pageContext":{"part":4,"letter":"d","lang":"en"}}}