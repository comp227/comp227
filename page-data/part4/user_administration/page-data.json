{"componentChunkName":"component---src-templates-content-template-js","path":"/part4/user_administration","result":{"data":{"markdownRemark":{"html":"<div class=\"content\">\n<p>We now want to add user authentication and authorization to our application.\nThis means we will:</p>\n<ul>\n<li>Store users in a database</li>\n<li>Link every task to the user who created it.</li>\n<li>Ensure that only the user who created a task can edit or delete it.</li>\n</ul>\n<p>Before we begin the implementation, let's consider conceptually how a use will relate to a task.\nYou may have noticed there is a one-to-many relationship between the user (<strong><em>User</em></strong>) and tasks (<strong><em>Task</em></strong>):</p>\n<picture><img src=\"/static/88b268630b9f500d2d89c4f7b5c6473f/f27fb/user_task_diagram.png\" alt=\"diagram linking user and tasks\" srcset=\"/static/88b268630b9f500d2d89c4f7b5c6473f/772e8/user_task_diagram.png 200w,\n/static/88b268630b9f500d2d89c4f7b5c6473f/e17e5/user_task_diagram.png 400w,\n/static/88b268630b9f500d2d89c4f7b5c6473f/f27fb/user_task_diagram.png 417w\" sizes=\"(max-width: 417px) 100vw, 417px\"></picture>\n<p>If we were working with a <strong><em>relational database</em></strong> the implementation between <em>User</em> and <em>Task</em> would be straightforward.\nBoth resources would have their separate database tables, and the id of the <em>User</em> who created a <em>Task</em> would be stored in the tasks table as a foreign key.</p>\n<p>However, with <strong><em>document databases</em></strong> there are many different ways of modeling the situation.</p>\n<p>The existing solution <em>saves every task in the tasks collection</em> in the database.\nIf we do not want to change this existing collection, then the natural choice is to <em>save users in their own collection</em>, <strong><em>users</em></strong> for example.</p>\n<p>Like with all document databases, we can <strong><em>use object IDs in Mongo to reference documents in other collections</em></strong>.\nThis is similar to using foreign keys in relational databases.</p>\n<p>Traditionally document databases like Mongo do not support <strong>join queries</strong> that are available in relational databases, used for aggregating data from multiple tables.</p>\n<blockquote>\n<p><strong>FYI:</strong> However, starting from version 3.2.\nMongo has supported <a href=\"https://docs.mongodb.com/manual/reference/operator/aggregation/lookup/\">lookup aggregation queries*</a>.</p>\n<blockquote>\n<p>*<em>We will not study lookup aggretation queries in this course.</em></p>\n</blockquote>\n</blockquote>\n<p>If we need functionality similar to join queries, <strong><em>we will implement it in our application code by making multiple queries</em></strong>.\nIn certain situations, Mongoose can take care of joining and aggregating data, which gives the appearance of a join query.\nHowever, even in these situations, Mongoose makes multiple queries to the database in the background.</p>\n<h3>References across collections</h3>\n<p>If we were using a relational database, the <em>task</em> would contain a <strong>reference key</strong> to the <em>user</em> who created it.\nIn document databases, we can do the same thing.</p>\n<p>Let's assume that the <code class=\"language-text\">users</code> collection contains two users:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span>\n    username<span class=\"token operator\">:</span> <span class=\"token string\">\"powercat\"</span><span class=\"token punctuation\">,</span>\n    _id<span class=\"token operator\">:</span> <span class=\"token number\">123456</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>\n    username<span class=\"token operator\">:</span> <span class=\"token string\">\"randy\"</span><span class=\"token punctuation\">,</span>\n    _id<span class=\"token operator\">:</span> <span class=\"token number\">141414</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span></code></pre></div>\n<p>The <code class=\"language-text\">tasks</code> collection contains three tasks that all have a <code class=\"language-text\">user</code> field that references a user in the <code class=\"language-text\">users</code> collection:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span>\n    content<span class=\"token operator\">:</span> <span class=\"token string\">\"Wash the dishes\"</span><span class=\"token punctuation\">,</span>\n    important<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n    _id<span class=\"token operator\">:</span> <span class=\"token number\">221212</span><span class=\"token punctuation\">,</span>\n    user<span class=\"token operator\">:</span> <span class=\"token number\">123456</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>\n    content<span class=\"token operator\">:</span> <span class=\"token string\">\"Attend university events\"</span><span class=\"token punctuation\">,</span>\n    important<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    _id<span class=\"token operator\">:</span> <span class=\"token number\">221255</span><span class=\"token punctuation\">,</span>\n    user<span class=\"token operator\">:</span> <span class=\"token number\">123456</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>\n    content<span class=\"token operator\">:</span> <span class=\"token string\">\"Work on personal React project\"</span><span class=\"token punctuation\">,</span>\n    important<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n    _id<span class=\"token operator\">:</span> <span class=\"token number\">221244</span><span class=\"token punctuation\">,</span>\n    user<span class=\"token operator\">:</span> <span class=\"token number\">141414</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span></code></pre></div>\n<p>Document databases do not demand the foreign key to be stored in the <code class=\"language-text\">task</code> resources, it could <em>also</em> be stored in the <code class=\"language-text\">users</code> collection, or even both:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span>\n    username<span class=\"token operator\">:</span> <span class=\"token string\">\"powercat\"</span><span class=\"token punctuation\">,</span>\n    _id<span class=\"token operator\">:</span> <span class=\"token number\">123456</span><span class=\"token punctuation\">,</span>\n    tasks<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">221212</span><span class=\"token punctuation\">,</span> <span class=\"token number\">221255</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>\n    username<span class=\"token operator\">:</span> <span class=\"token string\">\"randy\"</span><span class=\"token punctuation\">,</span>\n    _id<span class=\"token operator\">:</span> <span class=\"token number\">141414</span><span class=\"token punctuation\">,</span>\n    tasks<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">221244</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span></code></pre></div>\n<p>Since users can have many tasks, the related IDs are stored in an array in the <code class=\"language-text\">tasks</code> field.</p>\n<p>Document databases also offer a radically different way of organizing the data: In some situations,\nit might be beneficial to nest the entire <code class=\"language-text\">tasks</code> array as a part of the documents in the <code class=\"language-text\">users</code> collection:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span>\n    username<span class=\"token operator\">:</span> <span class=\"token string\">\"powercat\"</span><span class=\"token punctuation\">,</span>\n    _id<span class=\"token operator\">:</span> <span class=\"token number\">123456</span><span class=\"token punctuation\">,</span>\n    tasks<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">{</span>\n        content<span class=\"token operator\">:</span> <span class=\"token string\">\"Wash the dishes\"</span><span class=\"token punctuation\">,</span>\n        important<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span>\n        content<span class=\"token operator\">:</span> <span class=\"token string\">\"Attend university events\"</span><span class=\"token punctuation\">,</span>\n        important<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>\n    username<span class=\"token operator\">:</span> <span class=\"token string\">\"randy\"</span><span class=\"token punctuation\">,</span>\n    _id<span class=\"token operator\">:</span> <span class=\"token number\">141414</span><span class=\"token punctuation\">,</span>\n    tasks<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">{</span>\n        content<span class=\"token operator\">:</span>\n          <span class=\"token string\">\"Work on personal React project\"</span><span class=\"token punctuation\">,</span>\n        important<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span></code></pre></div>\n<p>In this schema, <code class=\"language-text\">tasks</code> would be tightly nested under <code class=\"language-text\">users</code> and the database would not generate IDs for them.</p>\n<p>The structure and schema of the database are not as self-evident as it was with relational databases.\nThe chosen schema must support the use cases of the application the best.\nThis is not a simple design decision to make, as all use cases of the applications are not known when the design decision is made.</p>\n<p>Paradoxically, schema-less databases like <strong><em>Mongo require developers to make far more radical design decisions about data organization</em></strong> at the beginning of the project\nthan relational databases with schemas.\nOn average, relational databases offer a more or less suitable way of organizing data for many applications.</p>\n<h3>Mongoose schema for users</h3>\n<p>In this case, we have decided to store the IDs of the <code class=\"language-text\">tasks</code> created by the user in the <code class=\"language-text\">user</code> document.\nLet's define the model for representing a <code class=\"language-text\">User</code> in the <em>models/user.js</em> file:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> mongoose <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mongoose\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> userSchema <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">mongoose<span class=\"token punctuation\">.</span>Schema</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  username<span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span>\n  name<span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span>\n  passwordHash<span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span>\n<span class=\"gatsby-highlight-code-line\">  tasks<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">      type<span class=\"token operator\">:</span> mongoose<span class=\"token punctuation\">.</span>Schema<span class=\"token punctuation\">.</span>Types<span class=\"token punctuation\">.</span>ObjectId<span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">      ref<span class=\"token operator\">:</span> <span class=\"token string\">\"Task\"</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">}</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nuserSchema<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"toJSON\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">transform</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">document<span class=\"token punctuation\">,</span> returnedObject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    returnedObject<span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> returnedObject<span class=\"token punctuation\">.</span>_id<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">delete</span> returnedObject<span class=\"token punctuation\">.</span>_id<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">delete</span> returnedObject<span class=\"token punctuation\">.</span>__v<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// the passwordHash should not be revealed</span>\n    <span class=\"token keyword\">delete</span> returnedObject<span class=\"token punctuation\">.</span>passwordHash<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> User <span class=\"token operator\">=</span> mongoose<span class=\"token punctuation\">.</span><span class=\"token function\">model</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"User\"</span><span class=\"token punctuation\">,</span> userSchema<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> User<span class=\"token punctuation\">;</span></code></pre></div>\n<p>The highlighted text above helps us conceptualize that the IDs of the <code class=\"language-text\">tasks</code> are stored within the user document as an <em>array of Mongo IDs</em>.</p>\n<p>The type of the field is <code class=\"language-text\">ObjectId</code>, which references <em>task</em>-style documents.\nMongo does not inherently know that this is a field that references <code class=\"language-text\">tasks</code>, the syntax is purely related to and defined by Mongoose.</p>\n<p>Let's <strong>expand the schema of the task defined in the <em>models/task.js</em></strong> file so that the task contains information about the user who created it:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> taskSchema <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">mongoose<span class=\"token punctuation\">.</span>Schema</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  content<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    type<span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span>\n    required<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    minlength<span class=\"token operator\">:</span> <span class=\"token number\">5</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  date<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        type<span class=\"token operator\">:</span> Date<span class=\"token punctuation\">,</span>\n        required<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  important<span class=\"token operator\">:</span> Boolean<span class=\"token punctuation\">,</span>\n<span class=\"gatsby-highlight-code-line\">  user<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    type<span class=\"token operator\">:</span> mongoose<span class=\"token punctuation\">.</span>Schema<span class=\"token punctuation\">.</span>Types<span class=\"token punctuation\">.</span>ObjectId<span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">    ref<span class=\"token operator\">:</span> <span class=\"token string\">\"User\"</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>In stark contrast to the conventions of relational databases, <strong><em>references are now stored in both documents</em></strong>:</p>\n<ul>\n<li>the <code class=\"language-text\">task</code> references the <code class=\"language-text\">user</code> who created it</li>\n<li>the <code class=\"language-text\">user</code> has an array of references to all of the <code class=\"language-text\">tasks</code> created by them.</li>\n</ul>\n<h3>Creating users</h3>\n<p>Let's implement a route for creating new users.\nUsers have a unique <code class=\"language-text\">username</code>, a <code class=\"language-text\">name</code> and something called a <code class=\"language-text\">passwordHash</code>.\nThe password hash is the output of a\n<a href=\"https://en.wikipedia.org/wiki/Cryptographic_hash_function\">one-way hash function</a>\napplied to the user's password.\n<strong>It is never wise to store unencrypted plain text passwords in the database!</strong></p>\n<p>Let's install the <a href=\"https://github.com/kelektiv/node.bcrypt.js\"><em>bcrypt</em> package</a> for generating the password hashes:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> i bcrypt</code></pre></div>\n<p>Creating new users happens in compliance with the RESTful conventions discussed in <a href=\"/part3/node_js_and_express#rest\">part 3</a>,\nby making an HTTP POST request to the <strong><em>users</em></strong> path.</p>\n<p><strong>Let's first add this new router handler in our application via the <em>app.js</em> file</strong>, so that it handles requests made to the <strong><em>/api/users</em></strong> URL:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> usersRouter <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./controllers/users\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// ...</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/api/users\"</span><span class=\"token punctuation\">,</span> usersRouter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>The contents of the file, (<em>controllers/users.js</em>), that defines the router is as follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> bcrypt <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bcrypt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> usersRouter <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"express\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Router</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> User <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"../models/user\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nusersRouter<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">request<span class=\"token punctuation\">,</span> response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> username<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> password <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> saltRounds <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> passwordHash <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> bcrypt<span class=\"token punctuation\">.</span><span class=\"token function\">hash</span><span class=\"token punctuation\">(</span>password<span class=\"token punctuation\">,</span> saltRounds<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    username<span class=\"token punctuation\">,</span>\n    name<span class=\"token punctuation\">,</span>\n    passwordHash<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> savedUser <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> user<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  response<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">201</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span>savedUser<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> usersRouter<span class=\"token punctuation\">;</span></code></pre></div>\n<p><strong>We store the <em>hash</em> of the password that is generated with the <code class=\"language-text\">bcrypt.hash</code> function</strong>.\nThe password sent in the request is <strong><em>not</em></strong> stored in the database.</p>\n<p>The fundamentals of <a href=\"https://codahale.com/how-to-safely-store-a-password/\">storing passwords</a> are outside the scope of this course material.\nFor example, we will not discuss what assigning the magic number <em><code class=\"language-text\">10</code></em> to <a href=\"https://github.com/kelektiv/node.bcrypt.js/#a-task-on-rounds\"><code class=\"language-text\">saltRounds</code></a> does,\nbut you can read more about it in the linked material.</p>\n<p>Our current code does not contain any error handling or input validation for verifying that the username and password are in the desired format.</p>\n<p>The new feature can and should initially be tested manually with a tool like WebStorm's REST Client or <em>Postman</em>.\nHowever, testing things manually will quickly become too cumbersome, especially once we implement functionality that enforces usernames to be unique.</p>\n<p>It takes much less effort to write automated tests, and it will make the development of our application much easier.</p>\n<p>Our initial tests for a user could be put into a separate file <em>tests/user_api.test.js</em> and look like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> bcrypt <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bcrypt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> User <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"../models/user\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> helper <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./test_helper\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"../app\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> supertest <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"supertest\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> api <span class=\"token operator\">=</span> <span class=\"token function\">supertest</span><span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"when there is initially one user in db\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">beforeEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">await</span> User<span class=\"token punctuation\">.</span><span class=\"token function\">deleteMany</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">const</span> passwordHash <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> bcrypt<span class=\"token punctuation\">.</span><span class=\"token function\">hash</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"secreto\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> username<span class=\"token operator\">:</span> <span class=\"token string\">\"root\"</span><span class=\"token punctuation\">,</span> passwordHash <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">await</span> user<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"creation succeeds with a fresh username\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> usersAtStart <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> helper<span class=\"token punctuation\">.</span><span class=\"token function\">usersInDb</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">const</span> newUser <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      username<span class=\"token operator\">:</span> <span class=\"token string\">\"powercat\"</span><span class=\"token punctuation\">,</span>\n      name<span class=\"token operator\">:</span> <span class=\"token string\">\"Tommy Tiger Jr.\"</span><span class=\"token punctuation\">,</span>\n      password<span class=\"token operator\">:</span> <span class=\"token string\">\"pacificrox\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">await</span> api\n      <span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/api/users\"</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>newUser<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token number\">201</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Content-Type\"</span><span class=\"token punctuation\">,</span> <span class=\"token regex\">/application\\/json/</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">const</span> usersAtEnd <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> helper<span class=\"token punctuation\">.</span><span class=\"token function\">usersInDb</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>usersAtEnd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toHaveLength</span><span class=\"token punctuation\">(</span>usersAtStart<span class=\"token punctuation\">.</span>length <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">const</span> usernames <span class=\"token operator\">=</span> usersAtEnd<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">u</span> <span class=\"token operator\">=></span> u<span class=\"token punctuation\">.</span>username<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>usernames<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toContain</span><span class=\"token punctuation\">(</span>newUser<span class=\"token punctuation\">.</span>username<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token function\">afterAll</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">await</span> mongoose<span class=\"token punctuation\">.</span>connection<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>The tests use the <code class=\"language-text\">usersInDb()</code> helper function that we will implement in the <em>tests/test_helper.js</em> file.\nThe function is used to help us verify the state of the database after a user is created:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> User <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"../models/user\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// ...</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">usersInDb</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> users <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> User<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> users<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">u</span> <span class=\"token operator\">=></span> u<span class=\"token punctuation\">.</span><span class=\"token function\">toJSON</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n  usersInDb<span class=\"token punctuation\">,</span> \n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>The <code class=\"language-text\">beforeEach</code> block adds a user with the username <code class=\"language-text\">root</code> to the database.\nWe can write a new test in <em>user_api.test.js</em> that verifies that a new user with the same username can not be created:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"when there is initially one user in db\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n\n  <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"creation fails with proper statuscode and message if username already taken\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> usersAtStart <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> helper<span class=\"token punctuation\">.</span><span class=\"token function\">usersInDb</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">const</span> newUser <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      username<span class=\"token operator\">:</span> <span class=\"token string\">\"root\"</span><span class=\"token punctuation\">,</span>\n      name<span class=\"token operator\">:</span> <span class=\"token string\">\"Superuser\"</span><span class=\"token punctuation\">,</span>\n      password<span class=\"token operator\">:</span> <span class=\"token string\">\"tigers\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> api\n      <span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/api/users\"</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>newUser<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token number\">400</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Content-Type\"</span><span class=\"token punctuation\">,</span> <span class=\"token regex\">/application\\/json/</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toContain</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"expected `username` to be unique\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">const</span> usersAtEnd <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> helper<span class=\"token punctuation\">.</span><span class=\"token function\">usersInDb</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>usersAtEnd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toEqual</span><span class=\"token punctuation\">(</span>usersAtStart<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>The test case obviously will not pass at this point.\nWe are essentially practicing <a href=\"https://en.wikipedia.org/wiki/Test-driven_development\"><strong>Test-Driven Development (TDD)</strong></a>,\nwhere tests for new functionality are written before the functionality is implemented.</p>\n<p>Mongoose does not have a built-in validator for checking the uniqueness of a field.\nFortunately, there is a ready-made solution for this, the\n<a href=\"https://www.npmjs.com/package/mongoose-unique-validator\"><em>mongoose-unique-validator</em> library</a>.\nLet's install the library:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> i mongoose-unique-validator</code></pre></div>\n<blockquote>\n<p><strong>FYI:</strong> when installing the <em>mongoose-unique-validator</em> library, did you encounter an error?</p>\n<ul>\n<li>If yes, <em>then read this sub-section</em>.</li>\n<li>If no, <em>go ahead and skip it</em>.</li>\n</ul>\n<p>If you were installing the library you may encounter an error message like this:</p>\n<picture><img src=\"/static/0be7a7c8480a1565a4bdb2dc5a89e5b2/5a190/uniq.png\" alt=\"screenshot showing mongoose compatibility error\" srcset=\"/static/0be7a7c8480a1565a4bdb2dc5a89e5b2/772e8/uniq.png 200w,\n/static/0be7a7c8480a1565a4bdb2dc5a89e5b2/e17e5/uniq.png 400w,\n/static/0be7a7c8480a1565a4bdb2dc5a89e5b2/5a190/uniq.png 800w,\n/static/0be7a7c8480a1565a4bdb2dc5a89e5b2/11b93/uniq.png 1124w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>The reason was that the library was not yet compatible with early version of Mongoose version 8.\nIf you encounter this error, <strong>first try installing the latest 8.+ version of Mongoose</strong>.\nIf you still encouter the error,\nyou can revert to an older version of Mongoose by running the command</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> mongoose@7.6.5</code></pre></div>\n</blockquote>\n<p>Once installed, let's extend the code by following the library documentation in <em>models/user.js</em>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> mongoose <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mongoose\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> uniqueValidator <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mongoose-unique-validator\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"token keyword\">const</span> userSchema <span class=\"token operator\">=</span> mongoose<span class=\"token punctuation\">.</span><span class=\"token function\">Schema</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  username<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    type<span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">    required<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">    unique<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span>  name<span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span>\n  passwordHash<span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span>\n  tasks<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n      type<span class=\"token operator\">:</span> mongoose<span class=\"token punctuation\">.</span>Schema<span class=\"token punctuation\">.</span>Types<span class=\"token punctuation\">.</span>ObjectId<span class=\"token punctuation\">,</span>\n      ref<span class=\"token operator\">:</span> <span class=\"token string\">\"Task\"</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"gatsby-highlight-code-line\">userSchema<span class=\"token punctuation\">.</span><span class=\"token function\">plugin</span><span class=\"token punctuation\">(</span>uniqueValidator<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"token comment\">// ...</span></code></pre></div>\n<blockquote>\n<p><strong>FYI:</strong> We could also implement other validations into the user creation.\nWe could check that the:</p>\n<ul>\n<li>username is long enough</li>\n<li>username only consists of permitted characters</li>\n<li>password is strong enough</li>\n</ul>\n<p><em>Implementing these functionalities is left as an optional exercise.</em></p>\n</blockquote>\n<p>Before we continue, let's add an initial implementation of a route handler in <em>controllers/users.js</em> that <em>returns all of the users in the database</em>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">usersRouter<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">request<span class=\"token punctuation\">,</span> response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> users <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> User<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span>users<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>In addition to unit tests, we also want to verify this works with users we have made.\nFor making new users in a production or development environment,\nyou may send a POST request to <code class=\"language-text\">/api/users/</code> via Postman or REST Client in the following format:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"username\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"root\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Superuser\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"password\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"tigers\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>I ended up adding this other user as well.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"username\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"pacrock\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Khoury Graffiti Rock\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"password\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ilikepaint\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>After adding those users, the list looks like this:</p>\n<picture><img src=\"/static/ed4d1fd7be042195e76ad379fd1c853b/442cb/9.png\" alt=\"browser api/users shows JSON data with 1 user array\" srcset=\"/static/ed4d1fd7be042195e76ad379fd1c853b/772e8/9.png 200w,\n/static/ed4d1fd7be042195e76ad379fd1c853b/e17e5/9.png 400w,\n/static/ed4d1fd7be042195e76ad379fd1c853b/442cb/9.png 752w\" sizes=\"(max-width: 752px) 100vw, 752px\"></picture>\n<p>You can find the code for our current application in its entirety in the <em>part4-7</em> branch of\n<a href=\"https://github.com/comp227/part3-tasks-backend/tree/part4-7\">this GitHub repository</a>.</p>\n<h3>Creating a new task</h3>\n<p>The code for creating a new task has to be updated so that the task is assigned to the user who created it.</p>\n<p>Let's expand our current implementation in <em>controllers/tasks.js</em> so that the information about the user who created a task is sent in the <code class=\"language-text\">userId</code> field of the request body:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> User <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"../models/user\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"token comment\">//...</span>\n\ntasksRouter<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">request<span class=\"token punctuation\">,</span> response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> body <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">;</span>\n\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> User<span class=\"token punctuation\">.</span><span class=\"token function\">findById</span><span class=\"token punctuation\">(</span>body<span class=\"token punctuation\">.</span>userId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n  <span class=\"token keyword\">const</span> task <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Task</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    content<span class=\"token operator\">:</span> body<span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">,</span>\n    important<span class=\"token operator\">:</span> <span class=\"token function\">Boolean</span><span class=\"token punctuation\">(</span>body<span class=\"token punctuation\">.</span>important<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n    date<span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"gatsby-highlight-code-line\">    user<span class=\"token operator\">:</span> user<span class=\"token punctuation\">.</span>_id</span>  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> savedTask <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> task<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">  user<span class=\"token punctuation\">.</span>tasks <span class=\"token operator\">=</span> user<span class=\"token punctuation\">.</span>tasks<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>savedTask<span class=\"token punctuation\">.</span>_id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">await</span> user<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  \n  response<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">201</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span>savedTask<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>It's worth noting that the <code class=\"language-text\">user</code> object also changes.\nThe <code class=\"language-text\">id</code> of the task is stored in the <code class=\"language-text\">tasks</code> field of the <code class=\"language-text\">user</code> object:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> User<span class=\"token punctuation\">.</span><span class=\"token function\">findById</span><span class=\"token punctuation\">(</span>body<span class=\"token punctuation\">.</span>userId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// ...</span>\n\nuser<span class=\"token punctuation\">.</span>tasks <span class=\"token operator\">=</span> user<span class=\"token punctuation\">.</span>tasks<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>savedTask<span class=\"token punctuation\">.</span>_id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">await</span> user<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Let's try to create a new task</p>\n<picture><img src=\"/static/ac87c178a6fb6f929c47dba6b84f9dd0/f8915/10e.png\" alt=\"Postman creating a new task\" srcset=\"/static/ac87c178a6fb6f929c47dba6b84f9dd0/772e8/10e.png 200w,\n/static/ac87c178a6fb6f929c47dba6b84f9dd0/e17e5/10e.png 400w,\n/static/ac87c178a6fb6f929c47dba6b84f9dd0/f8915/10e.png 748w\" sizes=\"(max-width: 748px) 100vw, 748px\"></picture>\n<p>The operation appears to work.\nLet's add one more task and then visit the route for fetching all users:</p>\n<picture><img src=\"/static/853c4d1ab41ca032163a6ae9960b9b83/1d69c/11e.png\" alt=\"api/users returns JSON with users and their array of tasks\" srcset=\"/static/853c4d1ab41ca032163a6ae9960b9b83/772e8/11e.png 200w,\n/static/853c4d1ab41ca032163a6ae9960b9b83/e17e5/11e.png 400w,\n/static/853c4d1ab41ca032163a6ae9960b9b83/1d69c/11e.png 750w\" sizes=\"(max-width: 750px) 100vw, 750px\"></picture>\n<p>We can see that the user has two tasks.</p>\n<p>Likewise, the IDs of the users who created the tasks can be seen when we visit the route for fetching all tasks:</p>\n<picture><img src=\"/static/974dbd1e7dc52d673f03a1ea83e7b749/1d69c/12e.png\" alt=\"api/tasks shows ids of numbers in JSON\" srcset=\"/static/974dbd1e7dc52d673f03a1ea83e7b749/772e8/12e.png 200w,\n/static/974dbd1e7dc52d673f03a1ea83e7b749/e17e5/12e.png 400w,\n/static/974dbd1e7dc52d673f03a1ea83e7b749/1d69c/12e.png 750w\" sizes=\"(max-width: 750px) 100vw, 750px\"></picture>\n<h3>Populate</h3>\n<p>We would like our API to work in such a way, that when an HTTP GET request is made to the <strong><em>/api/users</em></strong> route,\nthe user's objects would also contain the contents of the user's tasks and not just their <code class=\"language-text\">id</code>.\nIn a relational database, this functionality would be implemented with a <strong>join query</strong>.</p>\n<p>As previously mentioned, <em>document databases do not properly support join queries between collections</em>, but the Mongoose library can do some of these joins for us.\nMongoose accomplishes the join by doing multiple queries, which is different from join queries in relational databases which are <strong>transactional</strong>,\nmeaning that the state of the database does not change during the time that the query is made.\nWith join queries in Mongoose, <strong><em>nothing can guarantee that the state between the collections being joined is consistent</em></strong>,\nmeaning that if we make a query that joins the user and tasks collections, the <strong>state of the collections may change during the query</strong>.</p>\n<p>The Mongoose join is done with the <a href=\"http://mongoosejs.com/docs/populate.html\"><code class=\"language-text\">populate</code> method</a>.\nLet's update the route that returns all users first in <em>controllers/users.js</em>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">usersRouter<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">request<span class=\"token punctuation\">,</span> response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> users <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> User\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">.</span><span class=\"token function\">populate</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"tasks\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n  response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span>users<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>We chain <code class=\"language-text\">populate</code> after the <code class=\"language-text\">find</code> method making the initial query.\nThe parameter given to <code class=\"language-text\">populate</code> (i.e. <em><code class=\"language-text\">tasks</code></em>) will take <strong>task IDs</strong> from that array in the <code class=\"language-text\">user</code> document\nand <strong><em>replace each ID with the referenced <code class=\"language-text\">task</code> document</em></strong>.</p>\n<p>The result is almost exactly what we wanted:</p>\n<picture><img src=\"/static/0431d19f3e34ebb99f50762d1498136a/62de4/13ea.png\" alt=\"JSON data showing populated tasks and users data with repetition\" srcset=\"/static/0431d19f3e34ebb99f50762d1498136a/772e8/13ea.png 200w,\n/static/0431d19f3e34ebb99f50762d1498136a/e17e5/13ea.png 400w,\n/static/0431d19f3e34ebb99f50762d1498136a/62de4/13ea.png 746w\" sizes=\"(max-width: 746px) 100vw, 746px\"></picture>\n<p>We can use the <em><code class=\"language-text\">populate</code></em> parameter for choosing the fields we want to include from the documents.\nIn addition to the field <em><code class=\"language-text\">id</code></em>, we are now only interested in <em><code class=\"language-text\">content</code></em> and <em><code class=\"language-text\">important</code></em>.\nThe selection of fields is done with the <a href=\"https://docs.mongodb.com/manual/tutorial/project-fields-from-query-results/#return-the-specified-fields-and-the-id-field-only\">Mongo syntax</a>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">usersRouter<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">request<span class=\"token punctuation\">,</span> response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> users <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> User\n    <span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">.</span><span class=\"token function\">populate</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"tasks\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> content<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> important<span class=\"token operator\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n  response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span>users<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>The result is now exactly like we want it to be:</p>\n<picture><img src=\"/static/33915e5dab4d00314a89e188870d98fd/5a190/14ea.png\" alt=\"combined data showing no repetition\" srcset=\"/static/33915e5dab4d00314a89e188870d98fd/772e8/14ea.png 200w,\n/static/33915e5dab4d00314a89e188870d98fd/e17e5/14ea.png 400w,\n/static/33915e5dab4d00314a89e188870d98fd/5a190/14ea.png 800w,\n/static/33915e5dab4d00314a89e188870d98fd/c1b63/14ea.png 1200w,\n/static/33915e5dab4d00314a89e188870d98fd/9239a/14ea.png 1246w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Let's also add a suitable population of user information to tasks in <em>controllers/tasks.js</em>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">tasksRouter<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">request<span class=\"token punctuation\">,</span> response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> tasks <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> Task\n    <span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">populate</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> username<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span>tasks<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Now the user's information is added to the <code class=\"language-text\">user</code> field of task objects.</p>\n<picture><img src=\"/static/bb1f9c1307da01f5ec98805aa6e3cb67/5a190/15ea.png\" alt=\"tasks JSON now has user info embedded too\" srcset=\"/static/bb1f9c1307da01f5ec98805aa6e3cb67/772e8/15ea.png 200w,\n/static/bb1f9c1307da01f5ec98805aa6e3cb67/e17e5/15ea.png 400w,\n/static/bb1f9c1307da01f5ec98805aa6e3cb67/5a190/15ea.png 800w,\n/static/bb1f9c1307da01f5ec98805aa6e3cb67/c1b63/15ea.png 1200w,\n/static/bb1f9c1307da01f5ec98805aa6e3cb67/d0ab7/15ea.png 1532w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>It's important to understand that the database does not know that the ids stored in the <code class=\"language-text\">user</code> field of tasks reference documents in the user collection.</p>\n<p>The functionality of <code class=\"language-text\">populate</code> in Mongoose is based on how we defined <strong><em>types</em></strong> to the references in the Mongoose schema with the <code class=\"language-text\">ref</code> option:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> taskSchema <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">mongoose<span class=\"token punctuation\">.</span>Schema</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  content<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    type<span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span>\n    required<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    minlength<span class=\"token operator\">:</span> <span class=\"token number\">5</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  date<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        type<span class=\"token operator\">:</span> Date<span class=\"token punctuation\">,</span>\n        required<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  important<span class=\"token operator\">:</span> Boolean<span class=\"token punctuation\">,</span>\n  user<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    type<span class=\"token operator\">:</span> mongoose<span class=\"token punctuation\">.</span>Schema<span class=\"token punctuation\">.</span>Types<span class=\"token punctuation\">.</span>ObjectId<span class=\"token punctuation\">,</span>\n<span class=\"gatsby-highlight-code-line\">    ref<span class=\"token operator\">:</span> <span class=\"token string\">\"User\"</span></span>  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>You can find the code for our current application in its entirety in the <em>part4-8</em> branch of\n<a href=\"https://github.com/comp227/part3-tasks-backend/tree/part4-8\">this GitHub repository</a>.</p>\n<blockquote>\n<p><strong>Pertinent</strong>: At this stage, firstly, some tests will fail.\nWe will leave fixing the tests as an optional exercise.\nSecondly, in the deployed tasks app, <em>creating a task will not work at this moment as we have yet to link the user to the frontend</em>.</p>\n</blockquote>\n</div>","frontmatter":{"mainImage":{"publicURL":"/static/f800638504cdf371a12947fc31d52030/part-4.svg"},"part":4,"letter":"c","lang":"en"}}},"pageContext":{"part":4,"letter":"c","lang":"en"}}}