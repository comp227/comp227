{"componentChunkName":"component---src-templates-content-template-js","path":"/part5/login_in_frontend","result":{"data":{"markdownRemark":{"html":"<div class=\"content\">\n<p>In the last two parts, we have mainly concentrated on the backend.\nThe frontend that we developed in <a href=\"/part2\">part 2</a> does not yet support the user management we implemented to the backend in part 4.</p>\n<p>At the moment the frontend shows existing tasks and lets users change the state of a task from important to not important and vice versa.\nUnfortunately, new tasks can't be added anymore\nbecause our backend expects that <a href=\"/part4/token_authentication#limiting-creating-new-tasks-to-logged-in-users\">a token verifying a user's identity be sent with new tasks</a>.</p>\n<p>We'll now implement a part of the required user management functionality in the frontend.\nLet's begin with the user login.\nThroughout this part, we will assume that new users will not be added from the frontend.</p>\n<h3>Handling login</h3>\n<p>Let's add a login form to the top of the page.\nThat code will be shown below.\n<strong>Let's also move the form for adding tasks, so that it sits just below the login form</strong>\nWe'll task you with doing this, which you can continue on from the previous <em>reading</em> frontend located in your <em>lab2</em>.</p>\n<picture><img src=\"/static/b3491b38255f58b94d817b48eb0af2d9/5a190/1e.png\" alt=\"browser showing user login for tasks\" srcset=\"/static/b3491b38255f58b94d817b48eb0af2d9/772e8/1e.png 200w,\n/static/b3491b38255f58b94d817b48eb0af2d9/e17e5/1e.png 400w,\n/static/b3491b38255f58b94d817b48eb0af2d9/5a190/1e.png 800w,\n/static/b3491b38255f58b94d817b48eb0af2d9/c1b63/1e.png 1200w,\n/static/b3491b38255f58b94d817b48eb0af2d9/29007/1e.png 1600w,\n/static/b3491b38255f58b94d817b48eb0af2d9/7e117/1e.png 1715w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Our new code for <em>App.jsx</em> in our <em>reading</em> folder is below:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>tasks<span class=\"token punctuation\">,</span> setTasks<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> \n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>newTask<span class=\"token punctuation\">,</span> setNewTask<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>showAll<span class=\"token punctuation\">,</span> setShowAll<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>errorMessage<span class=\"token punctuation\">,</span> setErrorMessage<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>username<span class=\"token punctuation\">,</span> setUsername<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span> </span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>password<span class=\"token punctuation\">,</span> setPassword<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span> </span>\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    taskService\n      <span class=\"token punctuation\">.</span><span class=\"token function\">getAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">initialTasks</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">setTasks</span><span class=\"token punctuation\">(</span>initialTasks<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// ...</span>\n\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleLogin</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    event<span class=\"token punctuation\">.</span><span class=\"token function\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'logging in with'</span><span class=\"token punctuation\">,</span> username<span class=\"token punctuation\">,</span> password<span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span></span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span>Tasks<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>\n\n      <span class=\"token operator\">&lt;</span>Notification message<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>errorMessage<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token operator\">&lt;</span>form onSubmit<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>handleLogin<span class=\"token punctuation\">}</span><span class=\"token operator\">></span></span><span class=\"gatsby-highlight-code-line\">        <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span></span><span class=\"gatsby-highlight-code-line\">          username</span><span class=\"gatsby-highlight-code-line\">            <span class=\"token operator\">&lt;</span>input</span><span class=\"gatsby-highlight-code-line\">            type<span class=\"token operator\">=</span><span class=\"token string\">\"text\"</span></span><span class=\"gatsby-highlight-code-line\">            value<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>username<span class=\"token punctuation\">}</span></span><span class=\"gatsby-highlight-code-line\">            name<span class=\"token operator\">=</span><span class=\"token string\">\"Username\"</span></span><span class=\"gatsby-highlight-code-line\">            onChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> target <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setUsername</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"gatsby-highlight-code-line\">          <span class=\"token operator\">/</span><span class=\"token operator\">></span></span><span class=\"gatsby-highlight-code-line\">        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></span><span class=\"gatsby-highlight-code-line\">        <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span></span><span class=\"gatsby-highlight-code-line\">          password</span><span class=\"gatsby-highlight-code-line\">            <span class=\"token operator\">&lt;</span>input</span><span class=\"gatsby-highlight-code-line\">            type<span class=\"token operator\">=</span><span class=\"token string\">\"password\"</span></span><span class=\"gatsby-highlight-code-line\">            value<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>password<span class=\"token punctuation\">}</span></span><span class=\"gatsby-highlight-code-line\">            name<span class=\"token operator\">=</span><span class=\"token string\">\"Password\"</span></span><span class=\"gatsby-highlight-code-line\">            onChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> target <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setPassword</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"gatsby-highlight-code-line\">          <span class=\"token operator\">/</span><span class=\"token operator\">></span></span><span class=\"gatsby-highlight-code-line\">        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></span><span class=\"gatsby-highlight-code-line\">        <span class=\"token operator\">&lt;</span>button type<span class=\"token operator\">=</span><span class=\"token string\">\"submit\"</span><span class=\"token operator\">></span>login<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>form<span class=\"token operator\">></span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token operator\">&lt;</span>hr<span class=\"token operator\">/</span><span class=\"token operator\">></span></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span><span class=\"token operator\">-</span> add form and other tasks code here <span class=\"token operator\">--</span><span class=\"token operator\">-</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> App</code></pre></div>\n<p>The current application code can be found on\n<a href=\"https://github.com/comp227/part2-tasks/tree/part5-1\">Github</a>, branch <em>part5-1</em>.</p>\n<blockquote>\n<p><strong>Notice</strong> If you clone the repo, don't forget to run <code class=\"language-text\">npm i</code> before attempting to run the frontend.</p>\n<p>The frontend will not display any tasks if it's not connected to the backend.\nYou'll need to open up both repositories and start them both.</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">repository</th>\n<th align=\"left\">command</th>\n<th align=\"left\">port</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">backend</td>\n<td align=\"left\"><code class=\"language-text\">npm run dev</code></td>\n<td align=\"left\">3001</td>\n</tr>\n<tr>\n<td align=\"left\">frontend</td>\n<td align=\"left\"><code class=\"language-text\">npm run dev</code></td>\n<td align=\"left\">5173</td>\n</tr>\n</tbody>\n</table>\n<p>After starting both, you will see the tasks that are saved in your MongoDB database from Part 4.</p>\n<p><strong><em>You'll need to start both from now on if you want full functionality</em></strong></p>\n</blockquote>\n<p>The login form is handled the same way we handled forms in\n<a href=\"/part2/forms\">part 2</a>.\nThe app state has fields for <code class=\"language-text\">username</code> and <code class=\"language-text\">password</code> to store the data from the form.\nThe form fields have <em>event handlers</em>, which synchronize changes in the field to the state of the <code class=\"language-text\">App</code> component.\nThe event handlers are simple:\nAn object is given to them as a parameter,\nand they destructure the field <code class=\"language-text\">target</code> from the object and save its value to the state.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> target <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setUsername</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span></code></pre></div>\n<p>The method <code class=\"language-text\">handleLogin</code>, which is responsible for handling the data in the form, is yet to be implemented.</p>\n<p>Logging in is done by sending an HTTP POST request to the server address <strong><em>api/login</em></strong>.\nLet's separate the code responsible for this request on the frontend into its own module, to the file <em>services/login.js</em>.</p>\n<p>We'll use <code class=\"language-text\">async</code>/<code class=\"language-text\">await</code> syntax instead of promises for the HTTP request:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> axios <span class=\"token keyword\">from</span> <span class=\"token string\">'axios'</span>\n<span class=\"token keyword\">const</span> baseUrl <span class=\"token operator\">=</span> <span class=\"token string\">'/api/login'</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">login</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token parameter\">credentials</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> axios<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span>baseUrl<span class=\"token punctuation\">,</span> credentials<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">.</span>data\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{</span> login <span class=\"token punctuation\">}</span></code></pre></div>\n<p>The <code class=\"language-text\">handleLogin</code> function and the other parts of <em>App.jsx</em> can be changed as follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">import</span> loginService <span class=\"token keyword\">from</span> <span class=\"token string\">'./services/login'</span></span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>username<span class=\"token punctuation\">,</span> setUsername<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span> \n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>password<span class=\"token punctuation\">,</span> setPassword<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span> \n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>user<span class=\"token punctuation\">,</span> setUser<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></span>  \n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleLogin</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span>    event<span class=\"token punctuation\">.</span><span class=\"token function\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    \n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> loginService<span class=\"token punctuation\">.</span><span class=\"token function\">login</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">        username<span class=\"token punctuation\">,</span> password<span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\"></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token function\">setUser</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token function\">setUsername</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token function\">setPassword</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>exception<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token function\">setErrorMessage</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Wrong credentials'</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">        <span class=\"token function\">setErrorMessage</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5000</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">}</span></span>  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>If the login is successful, the form fields are emptied <strong><em>and</em></strong> the server response\n(including a <em>token</em> and the user details) is saved to the <code class=\"language-text\">user</code> field of the application's state.</p>\n<p>If the login fails or the function <code class=\"language-text\">loginService.login</code> throws an error, the user is notified.</p>\n<p>The user is not notified about a successful login in any way.\nLet's modify the application to show the login form only <em>if the user is not logged in</em> so when <code class=\"language-text\">user === null</code>.\nThe form for adding new tasks is shown only if the <em>user is logged in</em>, so <code class=\"language-text\">user</code> contains the user details.</p>\n<p>Let's add two helper functions to the <code class=\"language-text\">App</code> component for generating the forms:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">loginForm</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>form onSubmit<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>handleLogin<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n        username\n          <span class=\"token operator\">&lt;</span>input\n          type<span class=\"token operator\">=</span><span class=\"token string\">\"text\"</span>\n          value<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>username<span class=\"token punctuation\">}</span>\n          name<span class=\"token operator\">=</span><span class=\"token string\">\"Username\"</span>\n          onChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> target <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setUsername</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n        <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n        password\n          <span class=\"token operator\">&lt;</span>input\n          type<span class=\"token operator\">=</span><span class=\"token string\">\"password\"</span>\n          value<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>password<span class=\"token punctuation\">}</span>\n          name<span class=\"token operator\">=</span><span class=\"token string\">\"Password\"</span>\n          onChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> target <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setPassword</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n        <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>button type<span class=\"token operator\">=</span><span class=\"token string\">\"submit\"</span><span class=\"token operator\">></span>login<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>form<span class=\"token operator\">></span>      \n  <span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">taskForm</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>form onSubmit<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>addTask<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>input\n        value<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>newTask<span class=\"token punctuation\">}</span>\n        onChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>handleTaskChange<span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>button type<span class=\"token operator\">=</span><span class=\"token string\">\"submit\"</span><span class=\"token operator\">></span>save<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>form<span class=\"token operator\">></span>  \n  <span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>and conditionally render them:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">loginForm</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">taskForm</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span>Tasks<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>\n\n      <span class=\"token operator\">&lt;</span>Notification message<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>errorMessage<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token punctuation\">{</span>user <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">loginForm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token punctuation\">{</span>user <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">taskForm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span>\n      <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setShowAll</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>showAll<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n          show <span class=\"token punctuation\">{</span>showAll <span class=\"token operator\">?</span> <span class=\"token string\">'important'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'all'</span><span class=\"token punctuation\">}</span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>ul<span class=\"token operator\">></span>\n        <span class=\"token punctuation\">{</span>tasksToShow<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">task<span class=\"token punctuation\">,</span> i</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> \n          <span class=\"token operator\">&lt;</span>Task\n            key<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>i<span class=\"token punctuation\">}</span>\n            task<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>task<span class=\"token punctuation\">}</span> \n            toggleImportance<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">toggleImportanceOf</span><span class=\"token punctuation\">(</span>task<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n          <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ul<span class=\"token operator\">></span>\n\n      <span class=\"token operator\">&lt;</span>Footer <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>A slightly odd looking, but commonly used\n<a href=\"https://react.dev/learn/conditional-rendering#logical-and-operator-\">React trick</a>\nis used to render the forms conditionally:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n  user <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">loginForm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>If the first statement evaluates to <code class=\"language-text\">false</code> or is <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Falsy\"><strong>falsy</strong></a>,\nthe second statement (generating the form) is not executed at all.</p>\n<p>We can make this even more straightforward by using the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Conditional_Operator\"><strong>conditional operator</strong></a>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span>Tasks<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>\n\n    <span class=\"token operator\">&lt;</span>Notification message<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>errorMessage<span class=\"token punctuation\">}</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">{</span>user <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">?</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token function\">loginForm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token function\">taskForm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">}</span></span>    <span class=\"token comment\">// ...</span>\n\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>If <code class=\"language-text\">user === null</code> evaluates to true, the code calls <code class=\"language-text\">loginForm()</code>.\nOtherwise, it calls <code class=\"language-text\">taskForm()</code>.</p>\n<p>Let's do one more modification.\nIf the user is logged in, their name is shown on the screen:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span>Tasks<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>\n\n    <span class=\"token operator\">&lt;</span>Notification message<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>errorMessage<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">{</span><span class=\"token operator\">!</span>user <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">loginForm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">{</span>user <span class=\"token operator\">&amp;&amp;</span> </span><span class=\"gatsby-highlight-code-line\">      <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span></span><span class=\"gatsby-highlight-code-line\">        <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>user<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span> logged <span class=\"token keyword\">in</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span></span><span class=\"gatsby-highlight-code-line\">        <span class=\"token punctuation\">{</span><span class=\"token function\">taskForm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">}</span></span>\n    <span class=\"token comment\">// ...</span>\n\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>The solution isn't perfect, but we'll leave it for now.</p>\n<p>Our main component <code class=\"language-text\">App</code> is at the moment <strong><em>way too large</em></strong>.\nThe changes we just made can make us realize that the forms should be refactored into separate components.\nHowever, we will leave that for an optional exercise.</p>\n<p>The current application code can be found on\n<a href=\"https://github.com/comp227/part2-tasks/tree/part5-2\">GitHub</a>, branch <em>part5-2</em>.</p>\n<h3>Creating new tasks</h3>\n<p>Let's fix creating new tasks so it works with the backend.\nThis means we'll need to include a user's token when adding tasks.</p>\n<p>Currently, the token returned with a successful login is saved to the application's state - the <code class=\"language-text\">user</code>'s field <code class=\"language-text\">token</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleLogin</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  event<span class=\"token punctuation\">.</span><span class=\"token function\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> loginService<span class=\"token punctuation\">.</span><span class=\"token function\">login</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      username<span class=\"token punctuation\">,</span> password<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token function\">setUser</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span></span>    <span class=\"token function\">setUsername</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">setPassword</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>exception<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>We'll then need to access and include this user's token in the <em>Authorization</em> header of the HTTP request.</p>\n<p>To include the token, we'll modify <em>services/tasks.js</em>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> axios <span class=\"token keyword\">from</span> <span class=\"token string\">'axios'</span>\n<span class=\"token keyword\">const</span> baseUrl <span class=\"token operator\">=</span> <span class=\"token string\">'/api/tasks'</span>\n\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">let</span> token <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">setToken</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">newToken</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">  token <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Bearer </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>newToken<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getAll</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> request <span class=\"token operator\">=</span> axios<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>baseUrl<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span> <span class=\"token operator\">=></span> response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">create</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token parameter\">newObject</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> config <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    headers<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> Authorization<span class=\"token operator\">:</span> token <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span></span><span class=\"gatsby-highlight-code-line\"></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> axios<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span>baseUrl<span class=\"token punctuation\">,</span> newObject<span class=\"token punctuation\">,</span> config<span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">.</span>data</span><span class=\"gatsby-highlight-code-line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">update</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">id<span class=\"token punctuation\">,</span> newObject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> request <span class=\"token operator\">=</span> axios<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span> baseUrl <span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>id<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> newObject<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span> <span class=\"token operator\">=></span> response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{</span> getAll<span class=\"token punctuation\">,</span> create<span class=\"token punctuation\">,</span> update<span class=\"token punctuation\">,</span> setToken <span class=\"token punctuation\">}</span></span></code></pre></div>\n<p>This <em>taskService</em> module contains a private variable <code class=\"language-text\">token</code>.\nIts value can be changed with a function <code class=\"language-text\">setToken</code>, which is exported by the module.\n<code class=\"language-text\">create</code>, now with <code class=\"language-text\">async</code>/<code class=\"language-text\">await</code> syntax, sets the token to the <code class=\"language-text\">Authorization</code> header.\nThe header is given to <em><code class=\"language-text\">axios</code></em> as the third parameter of the <code class=\"language-text\">post</code> method.</p>\n<p>In addition to the changes in <em><code class=\"language-text\">taskService</code></em>,\nwe'll need to change <em>App.jsx</em>'s <code class=\"language-text\">handleLogin</code> so that it saves the user's token (<code class=\"language-text\">taskService.setToken(user.token)</code>) with a successful login:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleLogin</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  event<span class=\"token punctuation\">.</span><span class=\"token function\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> loginService<span class=\"token punctuation\">.</span><span class=\"token function\">login</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      username<span class=\"token punctuation\">,</span> password<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"gatsby-highlight-code-line\">    taskService<span class=\"token punctuation\">.</span><span class=\"token function\">setToken</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span>token<span class=\"token punctuation\">)</span></span>    <span class=\"token function\">setUser</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span>\n    <span class=\"token function\">setUsername</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">setPassword</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>exception<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>And now adding new tasks works again!</p>\n<h3>Saving the token to the browser's local storage</h3>\n<p>While we should celebrate our progress, you may also notice that our application has a bug.</p>\n<p>Don't see the bug yet?\nTry to refresh the page (<strong><em>F5</em></strong>).</p>\n<p>Notice how <strong>*the user's login information disappeared after refreshing the page</strong>.\nThis bug also slows down development, because we have to keep logging in everytime...even when testing task creation.</p>\n<p>This problem is easily solved by saving the login details to <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Storage\"><strong>local storage</strong></a>.\nLocal Storage is a <a href=\"https://en.wikipedia.org/wiki/Key-value_database\">key-value</a> database in the browser.</p>\n<p>It is very easy to use.\nA <em>value</em> corresponding to a certain <em>key</em> is saved to the database with the method <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Storage/setItem\"><code class=\"language-text\">setItem</code></a>.\nFor example:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">window<span class=\"token punctuation\">.</span>localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">setItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'slim shady'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>saves the string given as the second parameter as the value of the key <code class=\"language-text\">name</code>.</p>\n<p>The value of a key can be found with the method <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Storage/getItem\"><code class=\"language-text\">getItem</code></a>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">window<span class=\"token punctuation\">.</span>localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">getItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>and <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Storage/removeItem\"><code class=\"language-text\">removeItem</code></a> removes a key.</p>\n<p>Values in the local storage are persisted even when the page is re-rendered.\nThe storage is <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Origin\">origin-specific</a> so each web application has its separate storage.</p>\n<p>Let's extend our application so that it saves the details of a logged-in user to local storage.</p>\n<p>Values saved to storage are <a href=\"https://docs.w3cub.com/dom/domstring\"><strong>DOMstrings</strong></a>,\nso we cannot save a JavaScript object as it is.\nThe object has to be parsed to JSON first, with the method <code class=\"language-text\">JSON.stringify</code>.\nCorrespondingly, when a JSON object is read from the local storage, <em>it has to be parsed back to JavaScript with <code class=\"language-text\">JSON.parse</code></em>.</p>\n<p>Our <code class=\"language-text\">handleLogin</code> method now adds code to set the local storage:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleLogin</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    event<span class=\"token punctuation\">.</span><span class=\"token function\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> loginService<span class=\"token punctuation\">.</span><span class=\"token function\">login</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        username<span class=\"token punctuation\">,</span> password<span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"gatsby-highlight-code-line\">      window<span class=\"token punctuation\">.</span>localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">setItem</span><span class=\"token punctuation\">(</span></span><span class=\"gatsby-highlight-code-line\">        <span class=\"token string\">'loggedTaskappUser'</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token punctuation\">)</span></span>      taskService<span class=\"token punctuation\">.</span><span class=\"token function\">setToken</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span>token<span class=\"token punctuation\">)</span>\n      <span class=\"token function\">setUser</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span>\n      <span class=\"token function\">setUsername</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n      <span class=\"token function\">setPassword</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>exception<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// ...</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>The details of a logged-in user are now saved to the local storage, and they can be viewed on the console (<em>by typing <code class=\"language-text\">window.localStorage</code> to the console</em>):</p>\n<picture><img src=\"/static/e9b1d68f32de7892bf379f170ead7422/5a190/3e.png\" alt=\"browser showing someone logged into tasks\" srcset=\"/static/e9b1d68f32de7892bf379f170ead7422/772e8/3e.png 200w,\n/static/e9b1d68f32de7892bf379f170ead7422/e17e5/3e.png 400w,\n/static/e9b1d68f32de7892bf379f170ead7422/5a190/3e.png 800w,\n/static/e9b1d68f32de7892bf379f170ead7422/c1b63/3e.png 1200w,\n/static/e9b1d68f32de7892bf379f170ead7422/5d6a0/3e.png 1580w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>You can also inspect the local storage using the developer tools.\nOn Chrome, go to the <strong><em>Application</em></strong> tab and select <strong><em>Local Storage</em></strong>\n(<a href=\"https://developers.google.com/web/tools/chrome-devtools/storage/localstorage\">details here</a>).\nOn Firefox go to the <strong><em>Storage</em></strong> tab and select <strong><em>Local Storage</em></strong> (<a href=\"https://developer.mozilla.org/en-US/docs/Tools/Storage_Inspector\">details here</a>).</p>\n<p>We still have to modify our application so that when we enter the page,\nthe application checks if local storage has details for a logged-in user.\nIf there is, the details are saved to the state of the application and to <strong><em>taskService</em></strong>.</p>\n<p>The right way to do this is with an <a href=\"https://react.dev/reference/react/useEffect\"><em>effect hook</em></a>:\na mechanism we first encountered in <a href=\"/part2/getting_data_from_server#effect-hooks\">part 2</a>,\nand used to fetch tasks from the server.</p>\n<p>We can have multiple effect hooks, so let's create an additional hook to handle the initial loading of the page:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>tasks<span class=\"token punctuation\">,</span> setTasks<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> \n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>newTask<span class=\"token punctuation\">,</span> setNewTask<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>showAll<span class=\"token punctuation\">,</span> setShowAll<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>errorMessage<span class=\"token punctuation\">,</span> setErrorMessage<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>username<span class=\"token punctuation\">,</span> setUsername<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span> \n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>password<span class=\"token punctuation\">,</span> setPassword<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span> \n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>user<span class=\"token punctuation\">,</span> setUser<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> \n\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    taskService\n      <span class=\"token punctuation\">.</span><span class=\"token function\">getAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">initialTasks</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">setTasks</span><span class=\"token punctuation\">(</span>initialTasks<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">const</span> loggedUserJSON <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span>localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">getItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">'loggedTaskappUser'</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>loggedUserJSON<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>loggedUserJSON<span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token function\">setUser</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">      taskService<span class=\"token punctuation\">.</span><span class=\"token function\">setToken</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span>token<span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">}</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The empty array <code class=\"language-text\">[]</code> as the parameter of the effect ensures that the effect is executed only when the component is rendered\n<a href=\"https://react.dev/reference/react/useEffect#parameters\">for the first time</a>.</p>\n<p>Now a user stays logged in to the application forever.</p>\n<blockquote>\n<p><strong>Pertinent:</strong> We should probably add a way to <strong><em>logout</em></strong>, which can be done by removing the login details from the local storage.</p>\n<blockquote>\n<p><em>We will leave that as an exercise, as it uhhhh... \"builds character\"</em> 🧐.</p>\n</blockquote>\n<p><strong><em>It's possible to log out a user using the console</em></strong>, and that is enough for now.\nYou can log out with the command:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">window<span class=\"token punctuation\">.</span>localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">removeItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">'loggedTaskappUser'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>or with the command which empties <code class=\"language-text\">localStorage</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">window<span class=\"token punctuation\">.</span>localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n</blockquote>\n<p>The current application code can be found on\n<a href=\"https://github.com/comp227/part2-tasks/tree/part5-3\">GitHub</a>, branch <em>part5-3</em>.</p>\n</div>\n<div class=\"tasks\">\n<h3>Exercises 5.1-5.4</h3>\n<p><strong><em>We will now create a frontend for the watchlist backend we created in the previous section.</em></strong>\nYou will be using a new repo for this part that you will be able to obtain by visiting the URL below.\nThis new repo/application has a small amount of code to get you started.\n<strong>The application expects your backend to be running on port 3003.</strong></p>\n<p>Visit <a href=\"http://go.djosv.com/227lab5\">http://go.djosv.com/227lab5</a> to start the process of cloning the frontend repo into WebStorm.</p>\n<p>The application is started the usual way, but you have to install its dependencies first:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> i\n<span class=\"token function\">npm</span> run dev</code></pre></div>\n<p>Following what we have mentioned before, you will need to ensure that your file watchers are turned on and that you are making empty commits when you complete an exercise.\nNormally, without file watchers, you would be making small commits and describing your changes as you go along.\nHaving a general and standard description of what is happening has gotten an <a href=\"https://conventionalcommits.org\">increasing following</a>, but we will stick to our methods for this course.</p>\n<p>The first few exercises revise everything we have learned about React so far.\nThey can be challenging, especially if your backend is incomplete.\nPlease <strong>ensure part4 is working first</strong> before moving onto this.</p>\n<p>While doing the exercises, remember all of the debugging methods we have talked about, especially keeping an eye on the console.</p>\n<blockquote>\n<p><strong>Warning:</strong> If you notice you are mixing in the functions <code class=\"language-text\">async</code>/<code class=\"language-text\">await</code> and <code class=\"language-text\">then</code> commands, it's 99.9%  certain you are doing something wrong.\nUse either or, never both.</p>\n</blockquote>\n<h4>5.1: watchlist frontend, Step 1</h4>\n<p>Implement login functionality to the frontend.\nThe token returned with a successful login is saved to the application's state <code class=\"language-text\">user</code>.</p>\n<p>If a user is not logged in, <strong><em>only</em></strong> the login form is visible.</p>\n<picture><img src=\"/static/f2f54fdaa239be6c630b38562e39730b/5a190/4e.png\" alt=\"browser showing visible login form only\" srcset=\"/static/f2f54fdaa239be6c630b38562e39730b/772e8/4e.png 200w,\n/static/f2f54fdaa239be6c630b38562e39730b/e17e5/4e.png 400w,\n/static/f2f54fdaa239be6c630b38562e39730b/5a190/4e.png 800w,\n/static/f2f54fdaa239be6c630b38562e39730b/72aae/4e.png 964w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>If the user is logged in, the name of the user and a list of shows is shown.</p>\n<picture><img src=\"/static/45b48b009b50d93869378d342838aef7/5a190/5e.png\" alt=\"browser showing tasks and who is logged in\" srcset=\"/static/45b48b009b50d93869378d342838aef7/772e8/5e.png 200w,\n/static/45b48b009b50d93869378d342838aef7/e17e5/5e.png 400w,\n/static/45b48b009b50d93869378d342838aef7/5a190/5e.png 800w,\n/static/45b48b009b50d93869378d342838aef7/eb4a1/5e.png 1083w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>User details of the logged-in user do not have to be saved to the local storage yet.</p>\n<blockquote>\n<p><strong>Pertinent:</strong> You can implement the conditional rendering of the login form like this for example:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>user <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>h2<span class=\"token operator\">></span>Log <span class=\"token keyword\">in</span> to application<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h2<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>form<span class=\"token operator\">></span>\n          <span class=\"token comment\">//...</span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>form<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>h2<span class=\"token operator\">></span>What to watch<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h2<span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span>shows<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">show</span> <span class=\"token operator\">=></span>\n        <span class=\"token operator\">&lt;</span>Show key<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>show<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">}</span> show<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>show<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</blockquote>\n<h4>5.2: watchlist frontend, Step 2</h4>\n<p>Make the login 'permanent' by using the local storage.\nAlso, implement a way to log out.</p>\n<picture><img src=\"/static/9f869c25ff47811f35930513da7afd31/5a190/6e.png\" alt=\"browser showing a logout button after logging in\" srcset=\"/static/9f869c25ff47811f35930513da7afd31/772e8/6e.png 200w,\n/static/9f869c25ff47811f35930513da7afd31/e17e5/6e.png 400w,\n/static/9f869c25ff47811f35930513da7afd31/5a190/6e.png 800w,\n/static/9f869c25ff47811f35930513da7afd31/d53ff/6e.png 1068w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Ensure the browser does not remember the details of the user after logging out.</p>\n<h4>5.3: watchlist frontend, Step 3</h4>\n<p>Expand your application to allow a logged-in user to add new shows:</p>\n<picture><img src=\"/static/82362173bb10920e55660fe54e72e45e/5a190/7e.png\" alt=\"browser showing new show form\" srcset=\"/static/82362173bb10920e55660fe54e72e45e/772e8/7e.png 200w,\n/static/82362173bb10920e55660fe54e72e45e/e17e5/7e.png 400w,\n/static/82362173bb10920e55660fe54e72e45e/5a190/7e.png 800w,\n/static/82362173bb10920e55660fe54e72e45e/48ca3/7e.png 1084w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<h4>5.4: watchlist frontend, Step 4</h4>\n<p>Implement notifications that inform the user about successful and unsuccessful operations at the top of the page.\nFor example, when a new show is added, the following notification can be shown:</p>\n<picture><img src=\"/static/484b99b3620135070c42a35da7334cfa/5a190/8e.png\" alt=\"browser showing a successful operation\" srcset=\"/static/484b99b3620135070c42a35da7334cfa/772e8/8e.png 200w,\n/static/484b99b3620135070c42a35da7334cfa/e17e5/8e.png 400w,\n/static/484b99b3620135070c42a35da7334cfa/5a190/8e.png 800w,\n/static/484b99b3620135070c42a35da7334cfa/cdef6/8e.png 1163w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Failed login can show the following notification:</p>\n<picture><img src=\"/static/110e1481c13a2f3bc7814605849e6f8a/5a190/9e.png\" alt=\"browser showing failed login attempt\" srcset=\"/static/110e1481c13a2f3bc7814605849e6f8a/772e8/9e.png 200w,\n/static/110e1481c13a2f3bc7814605849e6f8a/e17e5/9e.png 400w,\n/static/110e1481c13a2f3bc7814605849e6f8a/5a190/9e.png 800w,\n/static/110e1481c13a2f3bc7814605849e6f8a/ecf19/9e.png 948w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>The notifications must be visible for a few seconds.\nIt is not compulsory to add colors.</p>\n</div>\n<div class=\"content\">\n<h3>A notice about using local storage</h3>\n<p>At the <a href=\"/part4/token_authentication#problems-of-token-based-authentication\">end</a> of the last part,\nwe mentioned that the challenge of token-based authentication is how to cope with the situation when the API access of the token holder to the API needs to be revoked.</p>\n<p>There are two solutions to the problem.\nThe first one is to limit the validity period of a token.\nThis forces the user to re-login to the app once the token has expired.\nThe other approach is to save the validity information of each token to the backend database.\nThis solution is often called a <strong>server-side session</strong>.</p>\n<p>No matter how the validity of tokens is checked and ensured,\nsaving a token in the local storage might contain a security risk if the application has a security vulnerability that allows\n<a href=\"https://owasp.org/www-community/attacks/xss/\">Cross-Site Scripting (XSS)</a> attacks.\nAn XSS attack is possible if the application allows a user to inject arbitrary JavaScript code (e.g. using a form) that the app would then execute.\nWhen using React sensibly it should not be possible since <a href=\"https://legacy.reactjs.org/docs/introducing-jsx.html#jsx-prevents-injection-attacks\">React sanitizes</a>\nall text that it renders, meaning that it is not executing the rendered content as JavaScript.</p>\n<p>If one wants to play it safe, <strong><em>the best option is to not store a token in local storage</em></strong>.\nThis might be an option in situations where leaking a token might have tragic consequences.</p>\n<p>It has been suggested that the identity of a signed-in user should be saved as <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies#restrict_access_to_cookies\"><strong>httpOnly cookies</strong></a>,\nso that JavaScript code could not have any access to the token.\nThe drawback of this solution is that it would make implementing SPA applications a bit more complex.\nOne would need at least to implement a separate page for logging in.</p>\n<p>However, it is good to notice that even the use of <em>httpOnly cookies</em> does not guarantee anything.\nIt has even been suggested that <em>httpOnly cookies</em> are\n<a href=\"https://academind.com/tutorials/localstorage-vs-cookies-xss/\">not any safer than</a>\nthe use of local storage.</p>\n<p>So no matter the used solution the most important thing is to\n<a href=\"https://cheatsheetseries.owasp.org/cheatsheets/DOM_based_XSS_Prevention_Cheat_Sheet.html\">minimize the risk</a>\nof XSS attacks altogether.</p>\n</div>","frontmatter":{"mainImage":{"publicURL":"/static/b92f84fe9702a35b12f10af4588ba4c2/part-5.svg"},"part":5,"letter":"a","lang":"en"}}},"pageContext":{"part":5,"letter":"a","lang":"en"}}}