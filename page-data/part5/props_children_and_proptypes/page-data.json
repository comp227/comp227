{"componentChunkName":"component---src-templates-content-template-js","path":"/part5/props_children_and_proptypes","result":{"data":{"markdownRemark":{"html":"<div class=\"content\">\n<h3>Displaying the login form only when appropriate</h3>\n<p>Let's modify the application so that the login form is not displayed by default:</p>\n<p>![browser showing log in button by default]</p>\n<p>Rather, the login form appears when the user presses the <strong><em>login</em></strong> button.</p>\n<picture><img src=\"/static/05d30950c39fc54ac2ee91c6b392c8dd/5a190/11e.png\" alt=\"The User on the login screen is about to press cancel\" srcset=\"/static/05d30950c39fc54ac2ee91c6b392c8dd/772e8/11e.png 200w,\n/static/05d30950c39fc54ac2ee91c6b392c8dd/e17e5/11e.png 400w,\n/static/05d30950c39fc54ac2ee91c6b392c8dd/5a190/11e.png 800w,\n/static/05d30950c39fc54ac2ee91c6b392c8dd/c1b63/11e.png 1200w,\n/static/05d30950c39fc54ac2ee91c6b392c8dd/8698d/11e.png 1239w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>The user can then close the login form by clicking the <strong><em>cancel</em></strong> button.</p>\n<p>Let's start by extracting the login form into a separate component and file:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">LoginForm</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span>\n   handleSubmit<span class=\"token punctuation\">,</span>\n   handleUsernameChange<span class=\"token punctuation\">,</span>\n   handlePasswordChange<span class=\"token punctuation\">,</span>\n   username<span class=\"token punctuation\">,</span>\n   password\n  <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>h2<span class=\"token operator\">></span>Login<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h2<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>form onSubmit<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>handleSubmit<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n          username\n          <span class=\"token operator\">&lt;</span>input\n            value<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>username<span class=\"token punctuation\">}</span>\n            onChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>handleUsernameChange<span class=\"token punctuation\">}</span>\n          <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n          password\n          <span class=\"token operator\">&lt;</span>input\n            type<span class=\"token operator\">=</span><span class=\"token string\">\"password\"</span>\n            value<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>password<span class=\"token punctuation\">}</span>\n            onChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>handlePasswordChange<span class=\"token punctuation\">}</span>\n          <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>button type<span class=\"token operator\">=</span><span class=\"token string\">\"submit\"</span><span class=\"token operator\">></span>login<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>form<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> LoginForm</code></pre></div>\n<p>The state and all the functions related to it are defined outside of the component and are passed to the component as <em>props</em>.</p>\n<p>Notice that the <em><code class=\"language-text\">props</code></em> are assigned to variables through <strong>destructuring</strong>, which means that instead of writing:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">LoginForm</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>h2<span class=\"token operator\">></span>Login<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h2<span class=\"token operator\">></span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token operator\">&lt;</span>form onSubmit<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>handleSubmit<span class=\"token punctuation\">}</span><span class=\"token operator\">></span></span>        <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n          username\n          <span class=\"token operator\">&lt;</span>input\n<span class=\"gatsby-highlight-code-line\">            value<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>username<span class=\"token punctuation\">}</span></span><span class=\"gatsby-highlight-code-line\">            onChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>handleChange<span class=\"token punctuation\">}</span></span>            name<span class=\"token operator\">=</span><span class=\"token string\">\"username\"</span>\n          <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n        <span class=\"token comment\">// ...</span>\n        <span class=\"token operator\">&lt;</span>button type<span class=\"token operator\">=</span><span class=\"token string\">\"submit\"</span><span class=\"token operator\">></span>login<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>form<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>where the properties are accessed through the <code class=\"language-text\">props</code> object like <code class=\"language-text\">props.handleSubmit</code>.\nInstead, the properties are assigned directly to variables.</p>\n<p>One fast way of implementing the functionality is to replace the <code class=\"language-text\">loginForm</code> function of the <code class=\"language-text\">App</code> component and introduce a new state variable:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>loginVisible<span class=\"token punctuation\">,</span> setLoginVisible<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span></span>\n  <span class=\"token comment\">// ...</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">loginForm</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> hideWhenVisible <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> display<span class=\"token operator\">:</span> loginVisible <span class=\"token operator\">?</span> <span class=\"token string\">'none'</span> <span class=\"token operator\">:</span> <span class=\"token string\">''</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">const</span> showWhenVisible <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> display<span class=\"token operator\">:</span> loginVisible <span class=\"token operator\">?</span> <span class=\"token string\">''</span> <span class=\"token operator\">:</span> <span class=\"token string\">'none'</span> <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>div style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>hideWhenVisible<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n          <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setLoginVisible</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>login<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>div style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>showWhenVisible<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n          <span class=\"token operator\">&lt;</span>LoginForm\n            username<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>username<span class=\"token punctuation\">}</span>\n            password<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>password<span class=\"token punctuation\">}</span>\n            handleUsernameChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> target <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setUsername</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n            handlePasswordChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> target <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setPassword</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n            handleSubmit<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>handleLogin<span class=\"token punctuation\">}</span>\n          <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n          <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setLoginVisible</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>cancel<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong><em>You'll see that there will be a warning with <code class=\"language-text\">LoginForm</code> because we did not import it.</em></strong>\nUse WebStorm's context actions (hopefully using the keyboard shortcut) to select the option to <em>add the import statement</em>.\nThe <code class=\"language-text\">App</code> components state now contains the boolean <code class=\"language-text\">loginVisible</code>, which defines if the login form should be shown to the user or not.</p>\n<p>The value of <code class=\"language-text\">loginVisible</code> is toggled with two buttons.\nBoth buttons have their event handlers defined directly in the component:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setLoginVisible</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>login<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n\n<span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setLoginVisible</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>cancel<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span></code></pre></div>\n<p>The visibility of the component is defined by giving the component an <a href=\"/part2/adding_styles_to_react_app#inline-styles\">inline style rule</a>,\nwhere the value of the <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/display\"><code class=\"language-text\">display</code> property</a> is <code class=\"language-text\">none</code> if we do not want the component to be displayed:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> hideWhenVisible <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> display<span class=\"token operator\">:</span> loginVisible <span class=\"token operator\">?</span> <span class=\"token string\">'none'</span> <span class=\"token operator\">:</span> <span class=\"token string\">''</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> showWhenVisible <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> display<span class=\"token operator\">:</span> loginVisible <span class=\"token operator\">?</span> <span class=\"token string\">''</span> <span class=\"token operator\">:</span> <span class=\"token string\">'none'</span> <span class=\"token punctuation\">}</span>\n\n<span class=\"token operator\">&lt;</span>div style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>hideWhenVisible<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n  <span class=\"token comment\">// button</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n\n<span class=\"token operator\">&lt;</span>div style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>showWhenVisible<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n  <span class=\"token comment\">// button</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></code></pre></div>\n<p>We are once again using the <strong><em><code class=\"language-text\">?:</code> ternary operator</em></strong>.\nIf <code class=\"language-text\">loginVisible</code> is <code class=\"language-text\">true</code>, then the CSS rule of the component will be:</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token property\">display</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'none'</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>If <code class=\"language-text\">loginVisible</code> is <code class=\"language-text\">false</code>, then <code class=\"language-text\">display</code> will not receive any value related to the visibility of the component.</p>\n<blockquote>\n<p><strong>FYI:</strong>, Since we are moving components, I'm going to show you how to move the <code class=\"language-text\">Footer</code> component outside of <em>App.jsx</em>.\nSelect the entire function for <code class=\"language-text\">Footer</code>, and then in Webstorm, select <em>Refactor->Move</em>.\nThen in the <strong><em>To</em></strong> field, make sure to add the <em>Components</em> Folder in between <em>src</em> and <em>Footer.jsx</em>\nMake sure that only Footer is selected as the member to move, and click <strong><em>Refactor</em></strong>.\nNotice how Webstorm added the import and export portions and moved the <code class=\"language-text\">Footer</code> to its own file, <em>components/Footer.jsx</em>!\nRemember <strong><em>utilize the IDE to help you refactor when possible</em></strong>.</p>\n</blockquote>\n<h3>The components children, AKA props.children</h3>\n<p>The code related to managing the visibility of the login form could be considered to be its own logical entity,\nand for this reason, it would be good to extract it from the <code class=\"language-text\">App</code> component into a separate component.</p>\n<p>Our goal is to implement a new <code class=\"language-text\">Togglable</code> component that can be used in the following way:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"gatsby-highlight-code-line\"><span class=\"token operator\">&lt;</span>Togglable buttonLabel<span class=\"token operator\">=</span><span class=\"token string\">'login'</span><span class=\"token operator\">></span></span>  <span class=\"token operator\">&lt;</span>LoginForm\n    username<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>username<span class=\"token punctuation\">}</span>\n    password<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>password<span class=\"token punctuation\">}</span>\n    handleUsernameChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> target <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setUsername</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n    handlePasswordChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> target <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setPassword</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n    handleSubmit<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>handleLogin<span class=\"token punctuation\">}</span>\n  <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Togglable<span class=\"token operator\">></span></span></code></pre></div>\n<p>The way that the component is used is slightly different from our previous components.\nThe component has both opening and closing tags that surround a <code class=\"language-text\">LoginForm</code> component.\nIn React terminology, *<code class=\"language-text\">LoginForm</code> is a <strong>child component</strong> of <code class=\"language-text\">Togglable</code>*.</p>\n<p>We can add any React elements within <code class=\"language-text\">Togglable</code>'s tags, like this for example:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>Togglable buttonLabel<span class=\"token operator\">=</span><span class=\"token string\">\"reveal\"</span><span class=\"token operator\">></span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span><span class=\"token keyword\">this</span> line is hidden at the start<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span>also <span class=\"token keyword\">this</span> is hidden<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Togglable<span class=\"token operator\">></span></code></pre></div>\n<p>The code for the <code class=\"language-text\">Togglable</code> component is shown below:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useState <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Togglable</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>visible<span class=\"token punctuation\">,</span> setVisible<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">const</span> hideWhenVisible <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> display<span class=\"token operator\">:</span> visible <span class=\"token operator\">?</span> <span class=\"token string\">'none'</span> <span class=\"token operator\">:</span> <span class=\"token string\">''</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">const</span> showWhenVisible <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> display<span class=\"token operator\">:</span> visible <span class=\"token operator\">?</span> <span class=\"token string\">''</span> <span class=\"token operator\">:</span> <span class=\"token string\">'none'</span> <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">toggleVisibility</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setVisible</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>visible<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>div style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>hideWhenVisible<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>toggleVisibility<span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>buttonLabel<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>div style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>showWhenVisible<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n<span class=\"gatsby-highlight-code-line\">        <span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">}</span></span>        <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>toggleVisibility<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>cancel<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Togglable</code></pre></div>\n<p>The new and interesting part of the code is <a href=\"https://react.dev/learn/passing-props-to-a-component#passing-jsx-as-children\"><strong><code class=\"language-text\">props.children</code></strong></a>,\nwhich is used for referencing the child components of the component.\nThe <strong>child components</strong> are the React elements that we define between the opening and closing tags of a component.</p>\n<p>This time the <em>children are rendered from within the parent component</em>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>div style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>showWhenVisible<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n  <span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">}</span>\n  <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>toggleVisibility<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>cancel<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></code></pre></div>\n<p>Unlike the normal props we've seen before, <strong><em><code class=\"language-text\">children</code></em></strong> are:</p>\n<ul>\n<li>automatically added by React</li>\n<li><em>always exist</em>.</li>\n</ul>\n<p>If a component is defined with an automatically closing <code class=\"language-text\">/&gt;</code> tag, like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>Task\n  key<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>task<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">}</span>\n  task<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>task<span class=\"token punctuation\">}</span>\n  toggleImportance<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">toggleImportanceOf</span><span class=\"token punctuation\">(</span>task<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n<span class=\"token operator\">/</span><span class=\"token operator\">></span></code></pre></div>\n<p>Then <code class=\"language-text\">props.children</code> still exists, it's just an empty array.</p>\n<p>The <code class=\"language-text\">Togglable</code> component is <strong>reusable</strong> and we can use it to add similar functionality to the form that creates tasks.</p>\n<p>Before we do that, let's extract the form for creating tasks into a component:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">TaskForm</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> onSubmit<span class=\"token punctuation\">,</span> handleChange<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>h2<span class=\"token operator\">></span>Create a <span class=\"token keyword\">new</span> <span class=\"token class-name\">task</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h2<span class=\"token operator\">></span>\n\n      <span class=\"token operator\">&lt;</span>form onSubmit<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>onSubmit<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>input\n          value<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>value<span class=\"token punctuation\">}</span>\n          onChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>handleChange<span class=\"token punctuation\">}</span>\n        <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>button type<span class=\"token operator\">=</span><span class=\"token string\">\"submit\"</span><span class=\"token operator\">></span>save<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>form<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Next, let's define the form component inside of a <code class=\"language-text\">Togglable</code> component in our <code class=\"language-text\">taskForm</code> function in <code class=\"language-text\">App.jsx</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>Togglable buttonLabel<span class=\"token operator\">=</span><span class=\"token string\">\"new task\"</span><span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>TaskForm\n    onSubmit<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>addTask<span class=\"token punctuation\">}</span>\n    value<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>newTask<span class=\"token punctuation\">}</span>\n    handleChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>handleTaskChange<span class=\"token punctuation\">}</span>\n  <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Togglable<span class=\"token operator\">></span></code></pre></div>\n<p>You can find the code for our current application in its entirety in the <em>part5-4</em> branch of\n<a href=\"https://github.com/comp227/part2-tasks/tree/part5-4\">this GitHub repository</a>.</p>\n<h3>State of the forms</h3>\n<p>The state of the application is currently in the <code class=\"language-text\">App</code> component.</p>\n<p>Is this where we should keep that state?\nHere's what the <a href=\"https://react.dev/learn/sharing-state-between-components\">React documentation says</a>:</p>\n<blockquote>\n<p><em>Sometimes, you want the state of two components to always change together.</em>\n*We recommend lifting that shared state up to their closest common ancestor, and then pass it down via <strong>props</strong>.*</p>\n</blockquote>\n<p>If we think about the <em>state</em> in the forms, like a new task's contents, <strong><em>the <code class=\"language-text\">App</code> component does not need it for anything</em></strong>.\nWe could move the state in <code class=\"language-text\">App</code> into the appropriate subcomponents.</p>\n<p>We'll start by modifying <em>TaskForm.jsx</em> to have the task creation state.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useState <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">TaskForm</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> createTask <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>newTask<span class=\"token punctuation\">,</span> setNewTask<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span> \n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">addTask</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    event<span class=\"token punctuation\">.</span><span class=\"token function\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">createTask</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      content<span class=\"token operator\">:</span> newTask<span class=\"token punctuation\">,</span>\n<span class=\"gatsby-highlight-code-line\">      important<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span></span>    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token function\">setNewTask</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>h2<span class=\"token operator\">></span>Create a <span class=\"token keyword\">new</span> <span class=\"token class-name\">task</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h2<span class=\"token operator\">></span>\n\n      <span class=\"token operator\">&lt;</span>form onSubmit<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>addTask<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>input\n          value<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>newTask<span class=\"token punctuation\">}</span>\n          onChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token parameter\">event</span> <span class=\"token operator\">=></span> <span class=\"token function\">setNewTask</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n        <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>button type<span class=\"token operator\">=</span><span class=\"token string\">\"submit\"</span><span class=\"token operator\">></span>save<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>form<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> TaskForm</code></pre></div>\n<blockquote>\n<p><strong>NOTE</strong> To make task creation work the same, we changed the application so that tasks are <strong><em>unimportant by default</em></strong>.\nThe highlighted line above shows <code class=\"language-text\">important</code> now having the value <code class=\"language-text\">false</code>.</p>\n</blockquote>\n<p>The <code class=\"language-text\">newTask</code> state attribute and its change event handler have been moved from the <code class=\"language-text\">App</code> component to the component responsible for the task form.</p>\n<p><code class=\"language-text\">TaskForm</code> has one prop left, the <code class=\"language-text\">createTask</code> function, which the form calls when a new task is created.</p>\n<p>The <code class=\"language-text\">App</code> component becomes simpler now that we have moved the <code class=\"language-text\">newTask</code> state and its event handler.\nThe <code class=\"language-text\">addTask</code> function for creating new tasks receives a new task as a parameter, and the function is the only prop we send to the form:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">addTask</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">taskObject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span>    taskService\n      <span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>taskObject<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">returnedTask</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">setTasks</span><span class=\"token punctuation\">(</span>tasks<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>returnedTask<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// ...</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">taskForm</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>Togglable buttonLabel<span class=\"token operator\">=</span><span class=\"token string\">\"new task\"</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>TaskForm createTask<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>addTask<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Togglable<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>We could do the same for the login form, but we'll leave that for an optional exercise.</p>\n<p>The application code can be found on <a href=\"https://github.com/comp227/part2-tasks/tree/part5-5\">GitHub</a>,\nbranch <em>part5-5</em>.</p>\n<h3>References to components with ref</h3>\n<p>Our current implementation works; it does have one aspect that could be improved.</p>\n<p>After a <em>new task is created, it would make sense to hide the new task form</em>.\nCurrently, the form stays visible.\nThere is a slight problem with hiding the form.\n<em>The visibility is controlled with the <code class=\"language-text\">visible</code> variable inside of the <code class=\"language-text\">Togglable</code> component</em>.\n<strong><em>How can we access it outside of the component?</em></strong></p>\n<p>There are many ways to implement closing the form from the parent component,\nbut let's use the <a href=\"https://react.dev/learn/referencing-values-with-refs\"><strong>ref</strong></a> mechanism of React, which <em>offers a reference to the component</em>.</p>\n<p>Let's make these changes to the <code class=\"language-text\">App</code> component:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useState<span class=\"token punctuation\">,</span> useEffect<span class=\"token punctuation\">,</span> useRef <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span></span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> taskFormRef <span class=\"token operator\">=</span> <span class=\"token function\">useRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">taskForm</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token operator\">&lt;</span>Togglable buttonLabel<span class=\"token operator\">=</span><span class=\"token string\">\"new task\"</span> ref<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>taskFormRef<span class=\"token punctuation\">}</span><span class=\"token operator\">></span></span>      <span class=\"token operator\">&lt;</span>TaskForm createTask<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>addTask<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Togglable<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The <a href=\"https://react.dev/reference/react/useRef\"><code class=\"language-text\">useRef</code> hook</a> is used to create a <code class=\"language-text\">taskFormRef</code> ref,\nthat is assigned to the <code class=\"language-text\">Togglable</code> component containing the creation task form.\nThe <strong><code class=\"language-text\">taskFormRef</code> variable acts as a reference to the component</strong>.\nThis hook ensures the same reference (<em>ref</em>) that is kept throughout re-renders of the component.</p>\n<p>We also need to make the following changes to the <code class=\"language-text\">Togglable</code> component:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useState<span class=\"token punctuation\">,</span> forwardRef<span class=\"token punctuation\">,</span> useImperativeHandle <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> Togglable <span class=\"token operator\">=</span> <span class=\"token function\">forwardRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props<span class=\"token punctuation\">,</span> refs</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span>  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>visible<span class=\"token punctuation\">,</span> setVisible<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">const</span> hideWhenVisible <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> display<span class=\"token operator\">:</span> visible <span class=\"token operator\">?</span> <span class=\"token string\">'none'</span> <span class=\"token operator\">:</span> <span class=\"token string\">''</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">const</span> showWhenVisible <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> display<span class=\"token operator\">:</span> visible <span class=\"token operator\">?</span> <span class=\"token string\">''</span> <span class=\"token operator\">:</span> <span class=\"token string\">'none'</span> <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">toggleVisibility</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setVisible</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>visible<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">useImperativeHandle</span><span class=\"token punctuation\">(</span>refs<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">      toggleVisibility</span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">}</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>div style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>hideWhenVisible<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>toggleVisibility<span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>buttonLabel<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>div style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>showWhenVisible<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n        <span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">}</span>\n        <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>toggleVisibility<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>cancel<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Togglable</code></pre></div>\n<p>The function that creates the component is wrapped inside of a <a href=\"https://react.dev/reference/react/forwardRef\"><code class=\"language-text\">forwardRef</code></a> function call.\nThis way the component can access the ref that is assigned to it.</p>\n<p>The component uses the <a href=\"https://react.dev/reference/react/useImperativeHandle\"><code class=\"language-text\">useImperativeHandle</code></a> hook\nto make its <code class=\"language-text\">toggleVisibility</code> function available outside of the component.</p>\n<blockquote>\n<p><strong>FYI:</strong> If you add this code as is and you already have eslint configured,\nyou might see that Component <code class=\"language-text\">Togglable</code> causes a nasty-looking warning:\n<em>Component definition is missing display name</em>:</p>\n<picture><img src=\"/static/728ebe23bb78917eb3c72e447fd4f60b/5a190/25x.png\" alt=\"vscode showing component definition error\" srcset=\"/static/728ebe23bb78917eb3c72e447fd4f60b/772e8/25x.png 200w,\n/static/728ebe23bb78917eb3c72e447fd4f60b/e17e5/25x.png 400w,\n/static/728ebe23bb78917eb3c72e447fd4f60b/5a190/25x.png 800w,\n/static/728ebe23bb78917eb3c72e447fd4f60b/c1b63/25x.png 1200w,\n/static/728ebe23bb78917eb3c72e447fd4f60b/29007/25x.png 1600w,\n/static/728ebe23bb78917eb3c72e447fd4f60b/e2bb0/25x.png 1667w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>You can read more about this ESlint rule in the\n<a href=\"https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/display-name.md\">ESlint react plugin's docs</a>.\nIn short, this rule is about helping you better debug your code.\nIf you run the program, you might notice that <em>react-devtools</em> shows this component without a name:</p>\n<picture><img src=\"/static/c66baccc44eaa89444711fcd6a6accac/5a190/26ea.png\" alt=\"react devtools showing forwardRef as anonymous\" srcset=\"/static/c66baccc44eaa89444711fcd6a6accac/772e8/26ea.png 200w,\n/static/c66baccc44eaa89444711fcd6a6accac/e17e5/26ea.png 400w,\n/static/c66baccc44eaa89444711fcd6a6accac/5a190/26ea.png 800w,\n/static/c66baccc44eaa89444711fcd6a6accac/c1b63/26ea.png 1200w,\n/static/c66baccc44eaa89444711fcd6a6accac/248b0/26ea.png 1316w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>A quick fix is to assign our component a <em><code class=\"language-text\">displayName</code></em> property:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> Togglable <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">forwardRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props<span class=\"token punctuation\">,</span> ref</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"gatsby-highlight-code-line\">Togglable<span class=\"token punctuation\">.</span>displayName <span class=\"token operator\">=</span> <span class=\"token string\">'Togglable'</span><span class=\"token punctuation\">;</span></span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Togglable</code></pre></div>\n</blockquote>\n<p>We can now hide the form by calling <code class=\"language-text\">taskFormRef.current.toggleVisibility()</code> after a new task has been created:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">addTask</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">taskObject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    taskFormRef<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">.</span><span class=\"token function\">toggleVisibility</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span>    taskService\n      <span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>taskObject<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">returnedTask</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>     \n        <span class=\"token function\">setTasks</span><span class=\"token punctuation\">(</span>tasks<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>returnedTask<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>To recap, the <a href=\"https://react.dev/reference/react/useImperativeHandle\"><strong><code class=\"language-text\">useImperativeHandle</code></strong></a> function is a React hook,\nthat is used for defining functions in a component, which can be invoked from outside of the component.</p>\n<p>This trick works for changing the state of a component, but it looks a bit unpleasant.\nWe could have accomplished the same functionality with slightly cleaner code using \"old React\" class-based components.\nWe will take a look at these class components during part 7 of the course material.\nSo far this is the only situation where using React hooks leads to code that is not cleaner than with class components.</p>\n<p>There are also <a href=\"https://react.dev/learn/manipulating-the-dom-with-refs\">other use cases</a> for refs than accessing React components.</p>\n<p>You can find the code for our current application in its entirety in the <em>part5-6</em> branch of\n<a href=\"https://github.com/comp227/part2-tasks/tree/part5-6\">this GitHub repository</a>.</p>\n<h3>One point about components</h3>\n<p>When we define a component in React:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Togglable</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token operator\">...</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>And use it like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>Togglable buttonLabel<span class=\"token operator\">=</span><span class=\"token string\">\"1\"</span> ref<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>togglable1<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n    first\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Togglable<span class=\"token operator\">></span>\n\n  <span class=\"token operator\">&lt;</span>Togglable buttonLabel<span class=\"token operator\">=</span><span class=\"token string\">\"2\"</span> ref<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>togglable2<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n    second\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Togglable<span class=\"token operator\">></span>\n\n  <span class=\"token operator\">&lt;</span>Togglable buttonLabel<span class=\"token operator\">=</span><span class=\"token string\">\"3\"</span> ref<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>togglable3<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n    third\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Togglable<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></code></pre></div>\n<p>We create <em>three separate instances of the component</em> that all <strong><em>have their separate state</em></strong>:</p>\n<picture><img src=\"/static/eb9b133c570ff2fc139c4731f6f2675d/5a190/12e.png\" alt=\"browser of three togglable components\" srcset=\"/static/eb9b133c570ff2fc139c4731f6f2675d/772e8/12e.png 200w,\n/static/eb9b133c570ff2fc139c4731f6f2675d/e17e5/12e.png 400w,\n/static/eb9b133c570ff2fc139c4731f6f2675d/5a190/12e.png 800w,\n/static/eb9b133c570ff2fc139c4731f6f2675d/f4281/12e.png 1016w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>The <code class=\"language-text\">ref</code> attribute is used for assigning a reference to each of the components in the variables above: <code class=\"language-text\">togglable1</code>, <code class=\"language-text\">togglable2</code> and <code class=\"language-text\">togglable3</code>.</p>\n<h3>Web developers pledge v5</h3>\n<p>We will once again update\n<a href=\"/part4/testing_the_backend#web-developers-pledge-v4\">our web developer pledge</a>\nbut will also add a few more items:</p>\n<blockquote>\n<p>I also pledge to:</p>\n<ul>\n<li><em>Ensure the frontend works if I suspect a bug in the backend</em></li>\n<li><em>Ensure the backend works if I suspect a bug in the frontend</em></li>\n</ul>\n</blockquote>\n</div>\n<div class=\"tasks\">\n<h3>Exercises 5.5-5.11</h3>\n<blockquote>\n<p><strong><em>Hint:</em></strong>: If you're stuck on one of these exercises, why not revisit <code class=\"language-text\">populate</code>?</p>\n</blockquote>\n<h4>5.5 Watchlist frontend, Step 5</h4>\n<p>Change the form for creating shows so that it is only displayed when appropriate.\nUse functionality similar to what was shown <a href=\"/part5/props_children_and_proptypes#displaying-the-login-form-only-when-appropriate\">earlier in this part of the course material</a>.\nIf you wish to do so, you can use the <code class=\"language-text\">Togglable</code> component defined in part 5.</p>\n<p>By default, the form is not visible</p>\n<picture><img src=\"/static/b0994c7564bba51a17408b2b904c81eb/5a190/13ae.png\" alt=\"browser showing new task button with no form\" srcset=\"/static/b0994c7564bba51a17408b2b904c81eb/772e8/13ae.png 200w,\n/static/b0994c7564bba51a17408b2b904c81eb/e17e5/13ae.png 400w,\n/static/b0994c7564bba51a17408b2b904c81eb/5a190/13ae.png 800w,\n/static/b0994c7564bba51a17408b2b904c81eb/25260/13ae.png 1113w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>It expands when the button <strong><em>Recommend New Show</em></strong> is clicked</p>\n<picture><img src=\"/static/444c79d98bf0c8ad4f971b60398e157c/5a190/13be.png\" alt=\"browser showing form with create new\" srcset=\"/static/444c79d98bf0c8ad4f971b60398e157c/772e8/13be.png 200w,\n/static/444c79d98bf0c8ad4f971b60398e157c/e17e5/13be.png 400w,\n/static/444c79d98bf0c8ad4f971b60398e157c/5a190/13be.png 800w,\n/static/444c79d98bf0c8ad4f971b60398e157c/95e27/13be.png 1199w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>The form closes when a new show has been added.</p>\n<h4>5.6 Watchlist frontend, Step 6</h4>\n<p>Separate the form for recommending a new show into its own component (if you have not already done so),\nand move all the states required for recommending a new show to this component.</p>\n<p>The component must work like the <code class=\"language-text\">TaskForm</code> component from this <a href=\"/part5/props_children_and_proptypes\">previously covered part</a>.</p>\n<h4>5.7* Watchlist frontend, Step 7</h4>\n<p>Let's add a button to each show, which controls whether all of the details about the show are shown or not.</p>\n<p>Full details of the show open when the button is clicked.</p>\n<picture><img src=\"/static/8d292ccf769b295eca12fcce5f9e9087/5a190/13ea.png\" alt=\"browser showing full details of a show with others just having view buttons\" srcset=\"/static/8d292ccf769b295eca12fcce5f9e9087/772e8/13ea.png 200w,\n/static/8d292ccf769b295eca12fcce5f9e9087/e17e5/13ea.png 400w,\n/static/8d292ccf769b295eca12fcce5f9e9087/5a190/13ea.png 800w,\n/static/8d292ccf769b295eca12fcce5f9e9087/c1b63/13ea.png 1200w,\n/static/8d292ccf769b295eca12fcce5f9e9087/5440e/13ea.png 1419w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>And the details are hidden when the button is clicked again.</p>\n<p>At this point, the <strong><em>like</em></strong> button does not need to do anything.</p>\n<p>The application shown in the picture has a bit of additional CSS to improve its appearance.</p>\n<p>It is easy to add styles to the application as shown in part 2 using <a href=\"/part2/adding_styles_to_react_app#inline-styles\">inline</a> styles:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Show</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> show <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> showStyle <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    padding<span class=\"token operator\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span>\n    border<span class=\"token operator\">:</span> <span class=\"token string\">'dotted'</span><span class=\"token punctuation\">,</span>\n    borderWidth<span class=\"token operator\">:</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span>\n    borderColor<span class=\"token operator\">:</span> <span class=\"token string\">'goldenrod'</span><span class=\"token punctuation\">,</span>\n    marginTop<span class=\"token operator\">:</span> <span class=\"token number\">15</span><span class=\"token punctuation\">,</span>\n    fontFamily<span class=\"token operator\">:</span> <span class=\"token string\">'monospace'</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token operator\">&lt;</span>div style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>showStyle<span class=\"token punctuation\">}</span><span class=\"token operator\">></span></span>      <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n        <span class=\"token punctuation\">{</span>show<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">}</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>show<span class=\"token punctuation\">.</span>genre<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n      <span class=\"token comment\">// ...</span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></code></pre></div>\n<blockquote>\n<p><strong>Pertinent:</strong> even though the functionality implemented in this part is almost identical to the functionality provided by the <code class=\"language-text\">Togglable</code> component,\nthe component can not be used directly to achieve the desired behavior.\nThe easiest solution will be <strong><em>to add a state to the show that controls the displayed form of the show</em></strong>.</p>\n</blockquote>\n<h4>5.8: Watchlist frontend, Step 8</h4>\n<p>Implement the functionality for the like button.\nLikes are increased by making an HTTP <strong><em>PUT</em></strong> request to the unique address of the show in the backend.</p>\n<p>Since the backend operation replaces the entire show, you will have to send all of its fields in the request body.\nIf you wanted to add a like to the following show:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n    _id<span class=\"token operator\">:</span> <span class=\"token string\">\"5a43fde2cbd20b12a2c34e91\"</span><span class=\"token punctuation\">,</span>\n  user<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      _id<span class=\"token operator\">:</span> <span class=\"token string\">\"5a43e6b6c37f3d065eaaa581\"</span><span class=\"token punctuation\">,</span>\n    username<span class=\"token operator\">:</span> <span class=\"token string\">\"powercat\"</span><span class=\"token punctuation\">,</span>\n    name<span class=\"token operator\">:</span> <span class=\"token string\">\"Tommy Tiger Jr\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  likes<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n  genre<span class=\"token operator\">:</span> <span class=\"token string\">\"Comedy\"</span><span class=\"token punctuation\">,</span>\n  title<span class=\"token operator\">:</span> <span class=\"token string\">\"Silicon Valley\"</span><span class=\"token punctuation\">,</span>\n  url<span class=\"token operator\">:</span> <span class=\"token string\">\"https://www.hbo.com/silicon-valley\"</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></code></pre></div>\n<p>You would have to make an HTTP PUT request to the address <strong><em>/api/shows/5a43fde2cbd20b12a2c34e91</em></strong> with the following request data:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n    user<span class=\"token operator\">:</span> <span class=\"token string\">\"5a43e6b6c37f3d065eaaa581\"</span><span class=\"token punctuation\">,</span>\n  likes<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n  genre<span class=\"token operator\">:</span> <span class=\"token string\">\"Comedy\"</span><span class=\"token punctuation\">,</span>\n  title<span class=\"token operator\">:</span> <span class=\"token string\">\"Silicon Valley\"</span><span class=\"token punctuation\">,</span>\n  url<span class=\"token operator\">:</span> <span class=\"token string\">\"https://www.hbo.com/silicon-valley\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The backend also has to be updated to handle the user reference.</p>\n<p><strong>One last warning:</strong> if you notice that you are using <code class=\"language-text\">async</code>/<code class=\"language-text\">await</code> and the <code class=\"language-text\">then</code> method in the same code,\nit is almost certain that you are doing something wrong.\nStick to using one or the other, and never use both at the same time \"just in case\".</p>\n<h4>5.9: Watchlist frontend, Step 9</h4>\n<p>You may have noticed that something might be wrong with your app.\nWhen a new show is recommended in the app, the name of the user that recommended that show may not be shown in the details of the show:</p>\n<!-- ![browser showing missing name underneath like button]() -->\n<p>It's only when we reload the browser, that the information of the person is displayed.\nThis is not acceptable, find out where the problem is and make the necessary correction.</p>\n<h4>5.10: Watchlist frontend, Step 10</h4>\n<p>Modify the application to list the shows by the number of <strong><em>likes</em></strong>.\nSorting the shows can be done with the array's <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort\"><code class=\"language-text\">sort</code> method</a>.</p>\n<h4>5.11: Watchlist frontend, Step 11</h4>\n<p>Add a new button for deleting shows.\nAlso, implement the logic for deleting shows in the frontend.</p>\n<p>Your application could look something like this:</p>\n<picture><img src=\"/static/6707206bf575dba9411d69526a5b55e6/5a190/14ea.png\" alt=\"The browser showing confirmation of show removal\" srcset=\"/static/6707206bf575dba9411d69526a5b55e6/772e8/14ea.png 200w,\n/static/6707206bf575dba9411d69526a5b55e6/e17e5/14ea.png 400w,\n/static/6707206bf575dba9411d69526a5b55e6/5a190/14ea.png 800w,\n/static/6707206bf575dba9411d69526a5b55e6/c1b63/14ea.png 1200w,\n/static/6707206bf575dba9411d69526a5b55e6/0c156/14ea.png 1473w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>The confirmation dialog for deleting a recommended show is easy to implement with the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window/confirm\"><code class=\"language-text\">window.confirm</code> function</a>.</p>\n<p>Show the button for deleting a recommended show <strong><em>only if the show was added by the user</em></strong>.</p>\n</div>\n<div class=\"content\">\n<h3>PropTypes</h3>\n<p>The <code class=\"language-text\">Togglable</code> component assumes that it is given the text for the button via the <code class=\"language-text\">buttonLabel</code> prop.\nIf we forget to define it to the component:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>Togglable<span class=\"token operator\">></span> buttonLabel forgotten<span class=\"token operator\">...</span> <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Togglable<span class=\"token operator\">></span></code></pre></div>\n<p>The application works, but the browser renders a button that has no label text.</p>\n<p>We would like to enforce that *when the <code class=\"language-text\">Togglable</code> component is used, the <strong><code class=\"language-text\">buttonLabel</code> text prop must be defined*</strong>.</p>\n<p>The expected and required props of a component can be defined with the <a href=\"https://github.com/facebook/prop-types\"><em>prop-types</em> package</a>.\nLet's install the package:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">npm</span> i prop-types</code></pre></div>\n<p>We can define the <code class=\"language-text\">buttonLabel</code> prop as <strong>required</strong> for <code class=\"language-text\">Togglable</code> as shown below:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> PropTypes <span class=\"token keyword\">from</span> <span class=\"token string\">'prop-types'</span>\n<span class=\"token comment\">// ..</span>\n\n<span class=\"token keyword\">const</span> Togglable <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">forwardRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props<span class=\"token punctuation\">,</span> ref</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ..</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\nTogglable<span class=\"token punctuation\">.</span>displayName <span class=\"token operator\">=</span> <span class=\"token string\">\"Togglable\"</span>\n<span class=\"gatsby-highlight-code-line\">Togglable<span class=\"token punctuation\">.</span>propTypes <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">  buttonLabel<span class=\"token operator\">:</span> PropTypes<span class=\"token punctuation\">.</span>string<span class=\"token punctuation\">.</span>isRequired</span><span class=\"gatsby-highlight-code-line\"><span class=\"token punctuation\">}</span></span></code></pre></div>\n<p>The console will display the following error message if the prop is left undefined:</p>\n<picture><img src=\"/static/2b00c73b6a2ff95cd8e7c386fec5ca62/5a190/15.png\" alt=\"console error stating buttonLabel is undefined\" srcset=\"/static/2b00c73b6a2ff95cd8e7c386fec5ca62/772e8/15.png 200w,\n/static/2b00c73b6a2ff95cd8e7c386fec5ca62/e17e5/15.png 400w,\n/static/2b00c73b6a2ff95cd8e7c386fec5ca62/5a190/15.png 800w,\n/static/2b00c73b6a2ff95cd8e7c386fec5ca62/76a99/15.png 1117w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>The application still works and nothing forces us to define props despite the <code class=\"language-text\">PropTypes</code> definitions.\nMind you, *it is unprofessional to leave <strong>any</strong> red output in the browser console*.</p>\n<p>Let's also define <code class=\"language-text\">PropTypes</code> to the <code class=\"language-text\">LoginForm</code> component:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> PropTypes <span class=\"token keyword\">from</span> <span class=\"token string\">'prop-types'</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">LoginForm</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span>\n   handleSubmit<span class=\"token punctuation\">,</span>\n   handleUsernameChange<span class=\"token punctuation\">,</span>\n   handlePasswordChange<span class=\"token punctuation\">,</span>\n   username<span class=\"token punctuation\">,</span>\n   password\n  <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span>\n\nLoginForm<span class=\"token punctuation\">.</span>propTypes <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  handleSubmit<span class=\"token operator\">:</span> PropTypes<span class=\"token punctuation\">.</span>func<span class=\"token punctuation\">.</span>isRequired<span class=\"token punctuation\">,</span>\n  handleUsernameChange<span class=\"token operator\">:</span> PropTypes<span class=\"token punctuation\">.</span>func<span class=\"token punctuation\">.</span>isRequired<span class=\"token punctuation\">,</span>\n  handlePasswordChange<span class=\"token operator\">:</span> PropTypes<span class=\"token punctuation\">.</span>func<span class=\"token punctuation\">.</span>isRequired<span class=\"token punctuation\">,</span>\n  username<span class=\"token operator\">:</span> PropTypes<span class=\"token punctuation\">.</span>string<span class=\"token punctuation\">.</span>isRequired<span class=\"token punctuation\">,</span>\n  password<span class=\"token operator\">:</span> PropTypes<span class=\"token punctuation\">.</span>string<span class=\"token punctuation\">.</span>isRequired\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>If the type of a passed prop is wrong, e.g. if we try to define the <code class=\"language-text\">handleSubmit</code> prop as a string, then this will result in the following warning:</p>\n<picture><img src=\"/static/e9c913f22661d8bf3d5303ead22b5756/5a190/16.png\" alt=\"console error saying handleSubmit expected a function\" srcset=\"/static/e9c913f22661d8bf3d5303ead22b5756/772e8/16.png 200w,\n/static/e9c913f22661d8bf3d5303ead22b5756/e17e5/16.png 400w,\n/static/e9c913f22661d8bf3d5303ead22b5756/5a190/16.png 800w,\n/static/e9c913f22661d8bf3d5303ead22b5756/cd536/16.png 1114w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<h3>ESlint</h3>\n<p>In part 3 we configured the <a href=\"/part3/validation_and_es_lint#lint\">ESlint</a> code style tool to the backend.\nLet's take ESlint to use in the frontend as well.</p>\n<p>Vite has installed ESlint to the project by default, so all that's left for us to do is define our desired configuration in the <em>.eslintrc.cjs</em> file.</p>\n<p>Next, we will start testing the frontend and to avoid undesired and irrelevant linter errors\nwe will install the <a href=\"https://www.npmjs.com/package/eslint-plugin-jest\">eslint-plugin-jest</a> package:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> i -D eslint-plugin-jest</code></pre></div>\n<p>Let's create a <em>.eslintrc.cjs</em> file with the following contents:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  root<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  env<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    browser<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    es2020<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"jest/globals\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">extends</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token string\">'eslint:recommended'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'plugin:react/recommended'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'plugin:react/jsx-runtime'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'plugin:react-hooks/recommended'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  ignorePatterns<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'dist'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.eslintrc.cjs'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  parserOptions<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> ecmaVersion<span class=\"token operator\">:</span> <span class=\"token string\">'latest'</span><span class=\"token punctuation\">,</span> sourceType<span class=\"token operator\">:</span> <span class=\"token string\">'module'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  settings<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> react<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> version<span class=\"token operator\">:</span> <span class=\"token string\">'18.2'</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  plugins<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'react-refresh'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'jest'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  rules<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"indent\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token string\">\"error\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token number\">4</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"linebreak-style\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token string\">\"error\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"unix\"</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"quotes\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token string\">\"error\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"double\"</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"semi\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token string\">\"error\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"always\"</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"eqeqeq\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"error\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"no-trailing-spaces\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"error\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"object-curly-spacing\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token string\">\"error\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"always\"</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"arrow-spacing\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token string\">\"error\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token string\">\"before\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"after\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'react-refresh/only-export-components'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token string\">'warn'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span> allowConstantExport<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"no-console\"</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"no-debugger\"</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"react/react-in-jsx-scope\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"off\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"react/prop-types\"</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<blockquote>\n<p>Reminder: We may need to turn on our ESLint settings like we did in <a href=\"/part3/validation_and_es_lint#configure-webstorm-with-eslint\">part 3</a>\nMake sure that you turn on <em><code class=\"language-text\">--eslint-fix-on-save</code></em> and configure the node interpreter for this new project again.\nIf you are running into issues I would restart WebStorm.\nYou can also introduce a space anywhere in a file and then save and it should then fix all the errors.\nWe may update this with additional configurations, but for now, you can ask in discord if there are any issues.</p>\n</blockquote>\n<p>Let's also create <a href=\"https://eslint.org/docs/user-guide/configuring#ignoring-files-and-directories\">.eslintignore</a> file with the following contents to the repository root</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">node_modules\ndist\n.eslintrc.cjs</code></pre></div>\n<p>Now the directories <em>dist</em> and <em>node_modules</em> will be skipped when linting.</p>\n<p>As usual, you can perform the linting either from the command line with the command</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> run Lint</code></pre></div>\n<p>or using the editor's Eslint plugin.</p>\n<blockquote>\n<p><strong>Pertinent:</strong> Before you continue, <strong><em>make sure to fix all of the eslint errors,</em></strong>\nsince our configuration is introducing new rules\nthat we have not exactly followed up until this point in time.</p>\n</blockquote>\n<p>You can find the code for our current application in its entirety in the <em>part5-7</em> branch of\n<a href=\"https://github.com/comp227/part2-tasks/tree/part5-7\">this GitHub repository</a>.</p>\n</div>\n<div class=\"tasks\">\n<h3>Exercises 5.12</h3>\n<h4>5.12: Watchlist frontend, Step 12</h4>\n<p>Define <code class=\"language-text\">PropTypes</code> for one of the components of your application, and <strong><em>Add ESlint to the project.</em></strong>\nDefine the configuration according to your liking.\nFix all of the linter errors.</p>\n<p>Vite has installed ESlint to the project by default, so all that's left for you to do is define your desired configuration in the <em>.eslintrc.cjs</em> file.</p>\n</div>","frontmatter":{"mainImage":{"publicURL":"/static/b92f84fe9702a35b12f10af4588ba4c2/part-5.svg"},"part":5,"letter":"b","lang":"en"}}},"pageContext":{"part":5,"letter":"b","lang":"en"}}}