{"componentChunkName":"component---src-templates-content-template-js","path":"/part6/many_reducers","result":{"data":{"markdownRemark":{"html":"<div class=\"content\">\n<p>Let's continue building a simplified <a href=\"/part6/flux_architecture_and_redux#redux-tasks\">redux version</a> of our tasks application.</p>\n<p>As a reminder, the Redux <a href=\"https://redux.js.org/tutorials/fundamentals/part-4-store\"><em>store</em></a> brings together:</p>\n<ul>\n<li>data (<a href=\"https://redux.js.org/tutorials/fundamentals/part-2-concepts-data-flow#state-management\"><em>state</em></a>)</li>\n<li>events (<a href=\"https://redux.js.org/tutorials/fundamentals/part-2-concepts-data-flow#actions\"><em>actions</em></a>)</li>\n<li>event handlers that are given those events and data (<a href=\"https://redux.js.org/tutorials/fundamentals/part-2-concepts-data-flow#reducers\"><em>reducers</em></a>)</li>\n</ul>\n<p>To ease development, let's initialize our redux <code class=\"language-text\">store</code>'s <code class=\"language-text\">state</code> in <em>reducers/taskReducer.js</em>.\nLet's change <code class=\"language-text\">taskReducer</code>'s default <code class=\"language-text\">state</code> from an empty array <em><code class=\"language-text\">[]</code></em> to an array of task objects <em><code class=\"language-text\">initialState</code></em>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> initialState <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span>\n    content<span class=\"token operator\">:</span> <span class=\"token string\">'remind myself that the reducer defines how the redux store works'</span><span class=\"token punctuation\">,</span>\n    important<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    id<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>\n    content<span class=\"token operator\">:</span> <span class=\"token string\">'repeat the words: a redux store can contain any data'</span><span class=\"token punctuation\">,</span>\n    important<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n    id<span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span>\n\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">taskReducer</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">state <span class=\"token operator\">=</span> initialState<span class=\"token punctuation\">,</span> action</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span>  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// ...</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> taskReducer</code></pre></div>\n<h3>Store with complex state</h3>\n<p>Let's implement filtering for the tasks that are displayed to the user.\nThe user interface for the filters will be implemented with <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/radio\">radio buttons</a>:</p>\n<picture><img src=\"/static/f8e50978a730a3dc6c1bffbf4be41418/5a190/01e.png\" alt=\"browser with important/not radio buttons and list\" srcset=\"/static/f8e50978a730a3dc6c1bffbf4be41418/772e8/01e.png 200w,\n/static/f8e50978a730a3dc6c1bffbf4be41418/e17e5/01e.png 400w,\n/static/f8e50978a730a3dc6c1bffbf4be41418/5a190/01e.png 800w,\n/static/f8e50978a730a3dc6c1bffbf4be41418/6acbf/01e.png 1001w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Let's start with a very simple and straightforward implementation in <em>App.js</em>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> NewTask <span class=\"token keyword\">from</span> <span class=\"token string\">'./components/NewTask'</span>\n<span class=\"token keyword\">import</span> Tasks <span class=\"token keyword\">from</span> <span class=\"token string\">'./components/Tasks'</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">filterSelected</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span></span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>NewTask <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span></span><span class=\"gatsby-highlight-code-line\">        <span class=\"token operator\">&lt;</span>input type<span class=\"token operator\">=</span><span class=\"token string\">\"radio\"</span> name<span class=\"token operator\">=</span><span class=\"token string\">\"filter\"</span></span><span class=\"gatsby-highlight-code-line\">                onChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">filterSelected</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ALL'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>all</span><span class=\"gatsby-highlight-code-line\">        <span class=\"token operator\">&lt;</span>input type<span class=\"token operator\">=</span><span class=\"token string\">\"radio\"</span> name<span class=\"token operator\">=</span><span class=\"token string\">\"filter\"</span></span><span class=\"gatsby-highlight-code-line\">                onChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">filterSelected</span><span class=\"token punctuation\">(</span><span class=\"token string\">'IMPORTANT'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>important</span><span class=\"gatsby-highlight-code-line\">        <span class=\"token operator\">&lt;</span>input type<span class=\"token operator\">=</span><span class=\"token string\">\"radio\"</span> name<span class=\"token operator\">=</span><span class=\"token string\">\"filter\"</span></span><span class=\"gatsby-highlight-code-line\">                onChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">filterSelected</span><span class=\"token punctuation\">(</span><span class=\"token string\">'UNIMPORTANT'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>unimportant</span><span class=\"gatsby-highlight-code-line\">      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></span>      <span class=\"token operator\">&lt;</span>Tasks <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Since the <code class=\"language-text\">name</code> attribute of all the radio buttons is the same, the three options form a <strong>button group</strong> where only one option can be selected.</p>\n<p>The buttons have a <em>change handler</em> that currently only prints the string associated with the clicked button to the console.</p>\n<p>We decide to implement the filter functionality by storing <em>the value of the filter</em> in the redux store in addition to the tasks themselves.\nThe state of the store should look like this after we finish making the changes in the next section:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n  tasks<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span> content<span class=\"token operator\">:</span> <span class=\"token string\">'remind myself that the reducer defines how the redux store works'</span><span class=\"token punctuation\">,</span> important<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> id<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span> content<span class=\"token operator\">:</span> <span class=\"token string\">'repeat the words: a redux store can contain any data'</span><span class=\"token punctuation\">,</span> important<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> id<span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  filter<span class=\"token operator\">:</span> <span class=\"token string\">'IMPORTANT'</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Currently, our application only stores the array of tasks.\nIn the new implementation, the state object will have two properties:</p>\n<ul>\n<li><code class=\"language-text\">tasks</code> that contains the array of tasks</li>\n<li><code class=\"language-text\">filter</code> that contains a string indicating which tasks should be displayed to the user.</li>\n</ul>\n<h3>Combined reducers</h3>\n<p>To handle our new filter data, we could modify <code class=\"language-text\">taskReducer</code> to deal with the filter data as well.\nHowever, a better solution in this situation is to separate the filter into a new file <em>src/reducers/filterReducer.js</em>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> filterReducer <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>state <span class=\"token operator\">=</span> <span class=\"token string\">'ALL'</span><span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">'SET_FILTER'</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword\">return</span> action<span class=\"token punctuation\">.</span>payload\n    <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword\">return</span> state\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The actions for changing the filter's state look like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n  type<span class=\"token operator\">:</span> <span class=\"token string\">'SET_FILTER'</span><span class=\"token punctuation\">,</span>\n  payload<span class=\"token operator\">:</span> <span class=\"token string\">'IMPORTANT'</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Let's also *create a new <strong>action creator</strong> function*.\nWe will write the code for the action creator after our <code class=\"language-text\">filterReducer</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> filterReducer <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>state <span class=\"token operator\">=</span> <span class=\"token string\">'ALL'</span><span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">filterChange</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">filter</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    type<span class=\"token operator\">:</span> <span class=\"token string\">'SET_FILTER'</span><span class=\"token punctuation\">,</span>\n    payload<span class=\"token operator\">:</span> filter<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> filterReducer</code></pre></div>\n<p>We can <em>create the actual reducer for our application by combining the two existing reducers with the <a href=\"https://redux.js.org/api/combinereducers\"><code class=\"language-text\">combineReducers</code></a> function</em>.</p>\n<p>Let's define the combined reducer in <em>main.jsx</em>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>\n<span class=\"token keyword\">import</span> ReactDOM <span class=\"token keyword\">from</span> <span class=\"token string\">'react-dom/client'</span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> createStore<span class=\"token punctuation\">,</span> combineReducers <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'redux'</span></span><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Provider <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-redux'</span> \n<span class=\"token keyword\">import</span> App <span class=\"token keyword\">from</span> <span class=\"token string\">'./App'</span>\n\n<span class=\"token keyword\">import</span> taskReducer <span class=\"token keyword\">from</span> <span class=\"token string\">'./reducers/taskReducer'</span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">import</span> filterReducer <span class=\"token keyword\">from</span> <span class=\"token string\">'./reducers/filterReducer'</span></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> reducer <span class=\"token operator\">=</span> <span class=\"token function\">combineReducers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">  tasks<span class=\"token operator\">:</span> taskReducer<span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">  filter<span class=\"token operator\">:</span> filterReducer</span><span class=\"gatsby-highlight-code-line\"><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> store <span class=\"token operator\">=</span> <span class=\"token function\">createStore</span><span class=\"token punctuation\">(</span>reducer<span class=\"token punctuation\">)</span></span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>store<span class=\"token punctuation\">.</span><span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\nReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">createRoot</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">&lt;</span>Provider store<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>store<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n    <span class=\"token punctuation\">{</span><span class=\"token comment\">/*&lt;App />*/</span><span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span>div <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Provider<span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<blockquote>\n<p><em>Since our application breaks at this point, we render a <code class=\"language-text\">&lt;div /&gt;</code> element, commenting out our <code class=\"language-text\">&lt;App /&gt;</code>.</em> Remember that you can toggle multiline comments with <strong><em>Ctrl-Shift-/</em></strong>.</p>\n<blockquote>\n<p>You could also use <strong><em>Ctrl-/</em></strong>, which will comment out lines individually.</p>\n</blockquote>\n</blockquote>\n<p>The state of the store gets printed to the console:</p>\n<picture><img src=\"/static/3b2c23b7f269ba63cf844f52517fdd76/5a190/4e.png\" alt=\"devtools console showing tasks array data\" srcset=\"/static/3b2c23b7f269ba63cf844f52517fdd76/772e8/4e.png 200w,\n/static/3b2c23b7f269ba63cf844f52517fdd76/e17e5/4e.png 400w,\n/static/3b2c23b7f269ba63cf844f52517fdd76/5a190/4e.png 800w,\n/static/3b2c23b7f269ba63cf844f52517fdd76/bb3ba/4e.png 1121w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>As we can see from the output, the store has the exact form we wanted it to!</p>\n<blockquote>\n<p>Let's review how we were able to get this object by examining the <code class=\"language-text\">reducer</code> we passed to <code class=\"language-text\">createStore</code>, <strong><code class=\"language-text\">combineReducers</code></strong></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> reducer <span class=\"token operator\">=</span> <span class=\"token function\">combineReducers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n tasks<span class=\"token operator\">:</span> taskReducer<span class=\"token punctuation\">,</span>\n filter<span class=\"token operator\">:</span> filterReducer<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><code class=\"language-text\">combineReducers</code> helped us create a state object with two properties: <code class=\"language-text\">tasks</code> and <code class=\"language-text\">filter</code>.\nThe value of the <code class=\"language-text\">tasks</code> property is defined by the <code class=\"language-text\">taskReducer</code>, which does not have to deal with the other properties of the state.\nLikewise, the <code class=\"language-text\">filter</code> property is managed by the <code class=\"language-text\">filterReducer</code>.</p>\n</blockquote>\n<h4>Combined reducers in action</h4>\n<p>In this section we're going to take a step back from our project to investigate how the combined reducer works.\nLet's simulate changing the filter and creating a task by adding the following to the <em>main.jsx</em> file:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> createTask <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./reducers/taskReducer'</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> filterChange <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./reducers/filterReducer'</span>\n<span class=\"token comment\">//...</span>\nstore<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>store<span class=\"token punctuation\">.</span><span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nstore<span class=\"token punctuation\">.</span><span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token function\">filterChange</span><span class=\"token punctuation\">(</span><span class=\"token string\">'IMPORTANT'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nstore<span class=\"token punctuation\">.</span><span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token function\">createTask</span><span class=\"token punctuation\">(</span><span class=\"token string\">'remember that combineReducers forms one reducer from many simple reducers'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Notice that with our <code class=\"language-text\">subscribe</code> call above, the store's state gets logged to the console after every change:</p>\n<picture><img src=\"/static/4cd5c5467ef8073d83f4c29c4a380ac9/5a190/5e.png\" alt=\"devtools console output showing tasks filter and new task\" srcset=\"/static/4cd5c5467ef8073d83f4c29c4a380ac9/772e8/5e.png 200w,\n/static/4cd5c5467ef8073d83f4c29c4a380ac9/e17e5/5e.png 400w,\n/static/4cd5c5467ef8073d83f4c29c4a380ac9/5a190/5e.png 800w,\n/static/4cd5c5467ef8073d83f4c29c4a380ac9/c1b63/5e.png 1200w,\n/static/4cd5c5467ef8073d83f4c29c4a380ac9/4e814/5e.png 1335w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>At this point, it is good to become aware of a tiny but important detail.\nIf we add a <code class=\"language-text\">console.log</code> statement <em>to the beginning of both reducers</em>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> filterReducer <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>state <span class=\"token operator\">=</span> <span class=\"token string\">'ALL'</span><span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ACTION: '</span><span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Based on the console output one might think that every action gets duplicated:</p>\n<picture><img src=\"/static/ff68e3419fee55a269ffc1f36dacda15/5a190/6.png\" alt=\"devtools console output showing duplicated actions in task and filter reducers\" srcset=\"/static/ff68e3419fee55a269ffc1f36dacda15/772e8/6.png 200w,\n/static/ff68e3419fee55a269ffc1f36dacda15/e17e5/6.png 400w,\n/static/ff68e3419fee55a269ffc1f36dacda15/5a190/6.png 800w,\n/static/ff68e3419fee55a269ffc1f36dacda15/ee9b6/6.png 1041w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Is there a bug in our code? No.\nThe combined reducer works in such a way that <strong><em>every <code class=\"language-text\">action</code> gets handled in every part of the combined reducer</em></strong>.\nTypically only one reducer is interested in any given action,\nbut there are situations where <em>multiple reducers change their respective parts of the state based on the same action</em>.</p>\n<h3>Finishing the filters</h3>\n<p>Let's finish the application so that it uses the combined reducer.\nWe start by changing the rendering of the application and hooking up the store to the application in the <em>main.jsx</em> file:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">createRoot</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">&lt;</span>Provider store<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>store<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>App <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Provider<span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Next, let's fix a bug that is caused by the code expecting the application store to be an array of tasks:</p>\n<picture><img src=\"/static/905d9dfac74e24be5393f74f7de5c52a/5a190/7ea.png\" alt=\"browser TypeError: tasks.map is not a function\" srcset=\"/static/905d9dfac74e24be5393f74f7de5c52a/772e8/7ea.png 200w,\n/static/905d9dfac74e24be5393f74f7de5c52a/e17e5/7ea.png 400w,\n/static/905d9dfac74e24be5393f74f7de5c52a/5a190/7ea.png 800w,\n/static/905d9dfac74e24be5393f74f7de5c52a/22475/7ea.png 1039w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Because the tasks are now <a href=\"#combined-reducers\">embedded further into the state object</a>, let's tweak the selector function:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Tasks</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> dispatch <span class=\"token operator\">=</span> <span class=\"token function\">useDispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> tasks <span class=\"token operator\">=</span> <span class=\"token function\">useSelector</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state</span> <span class=\"token operator\">=></span> state<span class=\"token punctuation\">.</span>tasks<span class=\"token punctuation\">)</span></span>\n  <span class=\"token keyword\">return</span><span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>ul<span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span>tasks<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">task</span> <span class=\"token operator\">=></span>\n        <span class=\"token operator\">&lt;</span>Task\n          key<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>task<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">}</span>\n          task<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>task<span class=\"token punctuation\">}</span>\n          handleClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> \n            <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token function\">toggleImportanceOf</span><span class=\"token punctuation\">(</span>task<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">}</span>\n        <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ul<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Previously the selector function returned the whole state of the store:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> tasks <span class=\"token operator\">=</span> <span class=\"token function\">useSelector</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state</span> <span class=\"token operator\">=></span> state<span class=\"token punctuation\">)</span></code></pre></div>\n<p>And now it returns only its field <code class=\"language-text\">tasks</code></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> tasks <span class=\"token operator\">=</span> <span class=\"token function\">useSelector</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state</span> <span class=\"token operator\">=></span> state<span class=\"token punctuation\">.</span>tasks<span class=\"token punctuation\">)</span></code></pre></div>\n<h4>Visibility Filter</h4>\n<p>Let's extract the visibility/importance filter into its own <em>src/components/VisibilityFilter.js</em> component:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> filterChange <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'../reducers/filterReducer'</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useDispatch <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-redux'</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">VisibilityFilter</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> dispatch <span class=\"token operator\">=</span> <span class=\"token function\">useDispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>    \n      <span class=\"token operator\">&lt;</span>input \n        type<span class=\"token operator\">=</span><span class=\"token string\">\"radio\"</span> \n        name<span class=\"token operator\">=</span><span class=\"token string\">\"filter\"</span> \n        onChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token function\">filterChange</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ALL'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      all\n      <span class=\"token operator\">&lt;</span>input\n        type<span class=\"token operator\">=</span><span class=\"token string\">\"radio\"</span>\n        name<span class=\"token operator\">=</span><span class=\"token string\">\"filter\"</span>\n        onChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token function\">filterChange</span><span class=\"token punctuation\">(</span><span class=\"token string\">'IMPORTANT'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      important   \n      <span class=\"token operator\">&lt;</span>input\n        type<span class=\"token operator\">=</span><span class=\"token string\">\"radio\"</span>\n        name<span class=\"token operator\">=</span><span class=\"token string\">\"filter\"</span>\n        onChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token function\">filterChange</span><span class=\"token punctuation\">(</span><span class=\"token string\">'UNIMPORTANT'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      unimportant \n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> VisibilityFilter</code></pre></div>\n<p>With the new component <code class=\"language-text\">App</code> can be simplified as follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> Tasks <span class=\"token keyword\">from</span> <span class=\"token string\">'./components/Tasks'</span>\n<span class=\"token keyword\">import</span> NewTask <span class=\"token keyword\">from</span> <span class=\"token string\">'./components/NewTask'</span>\n<span class=\"token keyword\">import</span> VisibilityFilter <span class=\"token keyword\">from</span> <span class=\"token string\">'./components/VisibilityFilter'</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>NewTask <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>VisibilityFilter <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Tasks <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> App</code></pre></div>\n<p>Now, clicking the different radio buttons changes the state of the store's <code class=\"language-text\">filter</code> property via the <code class=\"language-text\">dispatch</code> call.</p>\n<p>Let's change the <code class=\"language-text\">Tasks</code> component's <code class=\"language-text\">useSelector</code> from this:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">useSelector</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state</span> <span class=\"token operator\">=></span> state<span class=\"token punctuation\">.</span>tasks<span class=\"token punctuation\">)</span></code></pre></div>\n<p>to incorporating our visibility filter, which we'll embed in the <code class=\"language-text\">useSelector</code> directly.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Tasks</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> dispatch <span class=\"token operator\">=</span> <span class=\"token function\">useDispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> tasks <span class=\"token operator\">=</span> <span class=\"token function\">useSelector</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> state<span class=\"token punctuation\">.</span>filter <span class=\"token operator\">===</span> <span class=\"token string\">'ALL'</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token keyword\">return</span> state<span class=\"token punctuation\">.</span>tasks</span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">}</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">return</span> state<span class=\"token punctuation\">.</span>filter  <span class=\"token operator\">===</span> <span class=\"token string\">'IMPORTANT'</span> </span><span class=\"gatsby-highlight-code-line\">      <span class=\"token operator\">?</span> state<span class=\"token punctuation\">.</span>tasks<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">task</span> <span class=\"token operator\">=></span> task<span class=\"token punctuation\">.</span>important<span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token operator\">:</span> state<span class=\"token punctuation\">.</span>tasks<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">task</span> <span class=\"token operator\">=></span> <span class=\"token operator\">!</span>task<span class=\"token punctuation\">.</span>important<span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span>\n  <span class=\"token keyword\">return</span><span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>ul<span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span>tasks<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">task</span> <span class=\"token operator\">=></span>\n        <span class=\"token operator\">&lt;</span>Task\n          key<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>task<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">}</span>\n          task<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>task<span class=\"token punctuation\">}</span>\n          handleClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> \n            <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token function\">toggleImportanceOf</span><span class=\"token punctuation\">(</span>task<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">}</span>\n        <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ul<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span></code></pre></div>\n<p>We can simplify <code class=\"language-text\">useSelector</code> even further by <strong><em>destructuring <code class=\"language-text\">state</code>'s parameters</em></strong>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> tasks <span class=\"token operator\">=</span> <span class=\"token function\">useSelector</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> filter<span class=\"token punctuation\">,</span> tasks <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> filter <span class=\"token operator\">===</span> <span class=\"token string\">'ALL'</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> tasks\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> filter  <span class=\"token operator\">===</span> <span class=\"token string\">'IMPORTANT'</span> \n    <span class=\"token operator\">?</span> tasks<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">task</span> <span class=\"token operator\">=></span> task<span class=\"token punctuation\">.</span>important<span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">:</span> tasks<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">task</span> <span class=\"token operator\">=></span> <span class=\"token operator\">!</span>task<span class=\"token punctuation\">.</span>important<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>There is a slight cosmetic flaw in our application.\nEven though the filter is set to <em><code class=\"language-text\">ALL</code></em> by default, the associated radio button is not selected.\nNaturally, this issue can be fixed, but since this is relatively harmless we will save the fix for later.</p>\n<p>The current version of the application can be found on <a href=\"https://github.com/comp227/redux-tasks/tree/part6-2\">GitHub</a>, branch <em>part6-2</em>.</p>\n</div>\n<div class=\"tasks\">\n<h3>Exercise 6.9</h3>\n<h4>6.9 Better jokes, Step 7</h4>\n<p>Implement filtering for the jokes that are displayed to the user.</p>\n<picture><img src=\"/static/e9686677baf1e1887f5df7cf7ae5707c/5a190/9ea.png\" alt=\"browser showing filtering of jokes\" srcset=\"/static/e9686677baf1e1887f5df7cf7ae5707c/772e8/9ea.png 200w,\n/static/e9686677baf1e1887f5df7cf7ae5707c/e17e5/9ea.png 400w,\n/static/e9686677baf1e1887f5df7cf7ae5707c/5a190/9ea.png 800w,\n/static/e9686677baf1e1887f5df7cf7ae5707c/c6671/9ea.png 1129w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Store the state of the filter in the redux store.\nIt is recommended to create for the store:</p>\n<ol>\n<li>a new reducer</li>\n<li>action creators</li>\n<li>a combined reducer</li>\n</ol>\n<p>Make sure you use the <code class=\"language-text\">combineReducers</code> function.</p>\n<p>Create a new <code class=\"language-text\">Filter</code> component for displaying the filter.\nYou can use the following code as a template for the component:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Filter</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleChange</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// input-field value is in variable event.target.value</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">const</span> style <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    marginBottom<span class=\"token operator\">:</span> <span class=\"token number\">10</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>style<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n      filter <span class=\"token operator\">&lt;</span>input onChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>handleChange<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Filter</code></pre></div>\n</div>\n<div class=\"content\">\n<h3>Redux Toolkit</h3>\n<p>As we have seen so far, Redux's configuration and state management implementation requires some effort.\nFor example, the reducer and action creator-related code has somewhat repetitive boilerplate code.\n<a href=\"https://redux-toolkit.js.org/\">Redux Toolkit</a> is a library that solves these common Redux-related problems.\nThis library simplifies the Redux store's configuration and offers a large variety of tools to ease state management.</p>\n<p>Let's start using Redux Toolkit in our application by refactoring the existing code.\nFirst, we will need to install the library:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> i @reduxjs/toolkit</code></pre></div>\n<p>Next, open the <em>main.jsx</em> file which currently creates the Redux store.\nInstead of Redux's <code class=\"language-text\">createStore</code> function, let's create the store using Redux Toolkit's <a href=\"https://redux-toolkit.js.org/api/configureStore\"><code class=\"language-text\">configureStore</code></a> function in <em>main.jsx</em>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>\n<span class=\"token keyword\">import</span> ReactDOM <span class=\"token keyword\">from</span> <span class=\"token string\">'react-dom/client'</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Provider <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-redux'</span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> configureStore <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@reduxjs/toolkit'</span></span><span class=\"token keyword\">import</span> App <span class=\"token keyword\">from</span> <span class=\"token string\">'./App'</span>\n\n<span class=\"token keyword\">import</span> taskReducer <span class=\"token keyword\">from</span> <span class=\"token string\">'./reducers/taskReducer'</span>\n<span class=\"token keyword\">import</span> filterReducer <span class=\"token keyword\">from</span> <span class=\"token string\">'./reducers/filterReducer'</span>\n\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> store <span class=\"token operator\">=</span> <span class=\"token function\">configureStore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">  reducer<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    tasks<span class=\"token operator\">:</span> taskReducer<span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">    filter<span class=\"token operator\">:</span> filterReducer</span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>store<span class=\"token punctuation\">.</span><span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\nReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">createRoot</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">&lt;</span>Provider store<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>store<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>App <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Provider<span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>We already got rid of a few lines of code now that we don't need the <code class=\"language-text\">combineReducers</code> function to create the reducer for the store.\nWe will soon see that the <code class=\"language-text\">configureStore</code> function has many additional benefits such as the effortless integration of development tools\nand many commonly used libraries <em>without the need for additional configuration</em>.</p>\n<h4>Refactoring our Reducers with Redux Toolkit</h4>\n<p>With Redux Toolkit, we can easily create reducer and related action creators using the <a href=\"https://redux-toolkit.js.org/api/createSlice\"><code class=\"language-text\">createSlice</code></a> function.\nLet's use <code class=\"language-text\">createSlice</code> to refactor the reducer and action creators in the <em>reducers/taskReducer.js</em> file:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> createSlice <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@reduxjs/toolkit'</span></span>\n<span class=\"token keyword\">const</span> initialState <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span>\n    content<span class=\"token operator\">:</span> <span class=\"token string\">'remind myself that the reducer defines how the redux store works'</span><span class=\"token punctuation\">,</span>\n    important<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    id<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>\n    content<span class=\"token operator\">:</span> <span class=\"token string\">'repeat the words: a redux store can contain any data'</span><span class=\"token punctuation\">,</span>\n    important<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n    id<span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">generateId</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n  <span class=\"token function\">Number</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">1000000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toFixed</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> taskSlice <span class=\"token operator\">=</span> <span class=\"token function\">createSlice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">  name<span class=\"token operator\">:</span> <span class=\"token string\">'tasks'</span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">  initialState<span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">  reducers<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token function\">createTask</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state<span class=\"token punctuation\">,</span> action</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token keyword\">const</span> content <span class=\"token operator\">=</span> action<span class=\"token punctuation\">.</span>payload</span><span class=\"gatsby-highlight-code-line\"></span><span class=\"gatsby-highlight-code-line\">      state<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">        content<span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">        important<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">        id<span class=\"token operator\">:</span> <span class=\"token function\">generateId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token function\">toggleImportanceOf</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state<span class=\"token punctuation\">,</span> action</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token keyword\">const</span> id <span class=\"token operator\">=</span> action<span class=\"token punctuation\">.</span>payload</span><span class=\"gatsby-highlight-code-line\"></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token keyword\">const</span> taskToChange <span class=\"token operator\">=</span> state<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">t</span> <span class=\"token operator\">=></span> t<span class=\"token punctuation\">.</span>id <span class=\"token operator\">===</span> id<span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\"></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token keyword\">const</span> changedTask <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> </span><span class=\"gatsby-highlight-code-line\">        <span class=\"token operator\">...</span>taskToChange<span class=\"token punctuation\">,</span> </span><span class=\"gatsby-highlight-code-line\">        important<span class=\"token operator\">:</span> <span class=\"token operator\">!</span>taskToChange<span class=\"token punctuation\">.</span>important </span><span class=\"gatsby-highlight-code-line\">      <span class=\"token punctuation\">}</span></span><span class=\"gatsby-highlight-code-line\"></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token keyword\">return</span> state<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">task</span> <span class=\"token operator\">=></span></span><span class=\"gatsby-highlight-code-line\">        task<span class=\"token punctuation\">.</span>id <span class=\"token operator\">!==</span> id <span class=\"token operator\">?</span> task <span class=\"token operator\">:</span> changedTask </span><span class=\"gatsby-highlight-code-line\">      <span class=\"token punctuation\">)</span>     </span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">}</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span></code></pre></div>\n<p>The <code class=\"language-text\">createSlice</code> function's <code class=\"language-text\">name</code> parameter defines the prefix which is used in the action's type values.\nFrom the code above, notice our object has <code class=\"language-text\">name: &#39;tasks&#39;</code>; thus the <code class=\"language-text\">createTask</code> action will have the type value of <em><code class=\"language-text\">tasks/createTask</code></em>.\nIt is a good practice to give a unique <code class=\"language-text\">name</code> property.\nThat way there won't be unexpected collisions between the application's action type values.\nThe <em><code class=\"language-text\">initialState</code></em> parameter defines the reducer's <em>initial state</em>.\nThe <em><code class=\"language-text\">reducers</code></em> parameter takes the reducer itself as an object, where we define how functions handle state changes caused by certain actions.\nNotice that the <code class=\"language-text\">action.payload</code> in the function contains the argument provided by calling the action creator:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token function\">createTask</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Preach about how awesome Redux Toolkit is!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>This dispatch call responds to dispatching the following object:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> type<span class=\"token operator\">:</span> <span class=\"token string\">'tasks/createTask'</span><span class=\"token punctuation\">,</span> payload<span class=\"token operator\">:</span> <span class=\"token string\">'Preach about how awesome Redux Toolkit is!'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h4>Redux Toolkit and Immutability</h4>\n<p>If you followed closely, you might have noticed that inside the <code class=\"language-text\">createTask</code> action,\nwe see code that seems to violate the reducers' immutability principle mentioned earlier:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">createTask</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state<span class=\"token punctuation\">,</span> action</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> content <span class=\"token operator\">=</span> action<span class=\"token punctuation\">.</span>payload\n\n  state<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    content<span class=\"token punctuation\">,</span>\n    important<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n    id<span class=\"token operator\">:</span> <span class=\"token function\">generateId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><em>We are mutating <code class=\"language-text\">state</code> argument's array by calling the <code class=\"language-text\">push</code> method instead of returning a new instance of the array.</em> 😱\nWhat's this all about?</p>\n<p>Redux Toolkit utilizes the <a href=\"https://immerjs.github.io/immer/\"><strong>Immer</strong></a> library with reducers created by the <code class=\"language-text\">createSlice</code> function.\nUsing this library makes it possible to mutate the <code class=\"language-text\">state</code> argument inside of <code class=\"language-text\">createSlice</code>.\nImmer uses the mutated state to produce a new, immutable state and <strong><em>thus the state changes remain immutable</em></strong>.\nNotice that <code class=\"language-text\">state</code> can be changed without <em>mutating</em> it, as we have done with the <code class=\"language-text\">toggleImportanceOf</code> action.\nIn this case, the function <strong><em>returns</em></strong> the new state.\nNevertheless, mutating the state will often come in handy especially when a complex state needs to be updated.</p>\n<p>The <code class=\"language-text\">createSlice</code> function <em>returns an object containing the reducer as well as the action creators defined by the <code class=\"language-text\">reducers</code> parameter</em>.\nWe can access the reducer via <code class=\"language-text\">taskSlice.reducer</code> and the action creators via <code class=\"language-text\">taskSlice.actions</code>.\nWe can produce the file's exports in the following way:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> taskSlice <span class=\"token operator\">=</span> <span class=\"token function\">createSlice</span><span class=\"token punctuation\">(</span><span class=\"token comment\">/* ... */</span><span class=\"token punctuation\">)</span>\n\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> createTask<span class=\"token punctuation\">,</span> toggleImportanceOf <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> taskSlice<span class=\"token punctuation\">.</span>actions</span><span class=\"gatsby-highlight-code-line\"></span><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> taskSlice<span class=\"token punctuation\">.</span>reducer</span></code></pre></div>\n<p>Now, the imports in the other files will work just like before:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> taskReducer<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> createTask<span class=\"token punctuation\">,</span> toggleImportanceOf <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./reducers/taskReducer'</span></code></pre></div>\n<p>Nonetheless, we need to alter the action type names in the tests due to the conventions of ReduxToolkit:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> taskReducer <span class=\"token keyword\">from</span> <span class=\"token string\">'./taskReducer'</span>\n<span class=\"token keyword\">import</span> deepFreeze <span class=\"token keyword\">from</span> <span class=\"token string\">'deep-freeze'</span>\n\n<span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'taskReducer'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'returns new state with action tasks/createTask'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> state <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">const</span> action <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">      type<span class=\"token operator\">:</span> <span class=\"token string\">'tasks/createTask'</span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">      payload<span class=\"token operator\">:</span> <span class=\"token string\">'learn more about how the app state is in redux store'</span><span class=\"token punctuation\">,</span></span>    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">deepFreeze</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">const</span> newState <span class=\"token operator\">=</span> <span class=\"token function\">taskReducer</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">)</span>\n\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>newState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toHaveLength</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>newState<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">s</span> <span class=\"token operator\">=></span> s<span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toContainEqual</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span>payload<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'returns new state with action tasks/toggleImportanceOf'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> state <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">{</span>\n        content<span class=\"token operator\">:</span> <span class=\"token string\">'learn more about how the app state is in redux store'</span><span class=\"token punctuation\">,</span>\n        important<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n        id<span class=\"token operator\">:</span> <span class=\"token number\">1</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span>\n        content<span class=\"token operator\">:</span> <span class=\"token string\">'understand more fully how state changes are made with actions'</span><span class=\"token punctuation\">,</span>\n        important<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n        id<span class=\"token operator\">:</span> <span class=\"token number\">2</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span>\n  \n    <span class=\"token keyword\">const</span> action <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">      type<span class=\"token operator\">:</span> <span class=\"token string\">'tasks/toggleImportanceOf'</span><span class=\"token punctuation\">,</span></span>      payload<span class=\"token operator\">:</span> <span class=\"token number\">2</span> \n    <span class=\"token punctuation\">}</span>\n  \n    <span class=\"token function\">deepFreeze</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">const</span> newState <span class=\"token operator\">=</span> <span class=\"token function\">taskReducer</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">)</span>\n  \n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>newState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toHaveLength</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n  \n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>newState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toContainEqual</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  \n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>newState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toContainEqual</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      content<span class=\"token operator\">:</span> <span class=\"token string\">'understand more fully how state changes are made with actions'</span><span class=\"token punctuation\">,</span>\n      important<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n      id<span class=\"token operator\">:</span> <span class=\"token number\">2</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h3>Redux Toolkit and console.log</h3>\n<p>As we have learned, <code class=\"language-text\">console.log</code> has been a handy tool.</p>\n<p>Let's try to print the state of the Redux Store to the console in the middle of the reducer created with the function <code class=\"language-text\">createSlice</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> taskSlice <span class=\"token operator\">=</span> <span class=\"token function\">createSlice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">'tasks'</span><span class=\"token punctuation\">,</span>\n  initialState<span class=\"token punctuation\">,</span>\n  reducers<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n    <span class=\"token function\">toggleImportanceOf</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state<span class=\"token punctuation\">,</span> action</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> id <span class=\"token operator\">=</span> action<span class=\"token punctuation\">.</span>payload\n\n      <span class=\"token keyword\">const</span> taskToChange <span class=\"token operator\">=</span> state<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span> <span class=\"token operator\">=></span> n<span class=\"token punctuation\">.</span>id <span class=\"token operator\">===</span> id<span class=\"token punctuation\">)</span>\n\n      <span class=\"token keyword\">const</span> changedTask <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> \n        <span class=\"token operator\">...</span>taskToChange<span class=\"token punctuation\">,</span> \n        important<span class=\"token operator\">:</span> <span class=\"token operator\">!</span>taskToChange<span class=\"token punctuation\">.</span>important \n      <span class=\"token punctuation\">}</span>\n\n<span class=\"gatsby-highlight-code-line\">      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">)</span></span>\n      <span class=\"token keyword\">return</span> state<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">task</span> <span class=\"token operator\">=></span>\n        task<span class=\"token punctuation\">.</span>id <span class=\"token operator\">!==</span> id <span class=\"token operator\">?</span> task <span class=\"token operator\">:</span> changedTask \n      <span class=\"token punctuation\">)</span>     \n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>The following is printed to the console</p>\n<picture><img src=\"/static/ab658083999533dfd32bbbc4e989216c/5a190/40new.png\" alt=\"browser showing tasks array and proxy on console\" srcset=\"/static/ab658083999533dfd32bbbc4e989216c/772e8/40new.png 200w,\n/static/ab658083999533dfd32bbbc4e989216c/e17e5/40new.png 400w,\n/static/ab658083999533dfd32bbbc4e989216c/5a190/40new.png 800w,\n/static/ab658083999533dfd32bbbc4e989216c/67fe0/40new.png 1101w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>The output is interesting but not very useful.\nThe reason we don't see any nice information is because of the Immer library used by the Redux Toolkit, which is now used internally to save the state of the Store.</p>\n<p>The status can be converted to a human-readable format by converting <code class=\"language-text\">state</code> to a <code class=\"language-text\">string</code> and then back to a JavaScript object as follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"gatsby-highlight-code-line\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span></code></pre></div>\n<p>Console output is now human-readable</p>\n<picture><img src=\"/static/59e912c1b3a480451771dff264fdcce3/5a190/41new.png\" alt=\"browser showing console with content from lists\" srcset=\"/static/59e912c1b3a480451771dff264fdcce3/772e8/41new.png 200w,\n/static/59e912c1b3a480451771dff264fdcce3/e17e5/41new.png 400w,\n/static/59e912c1b3a480451771dff264fdcce3/5a190/41new.png 800w,\n/static/59e912c1b3a480451771dff264fdcce3/ae77d/41new.png 1111w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<h3>Redux DevTools</h3>\n<p><a href=\"https://chrome.google.com/webstore/detail/redux-devtools/lmhkpmbekcpmknklioeibfkpmmfibljd\">Redux DevTools</a> is a Chrome addon that offers useful development tools for Redux.\nIt can be used to inspect the Redux store's state and dispatch actions through the browser's console.\nWhen the store is created using Redux Toolkit's <code class=\"language-text\">configureStore</code> function, no additional configuration is needed for Redux DevTools to work.</p>\n<p>Once the addon is installed, clicking the <strong><em>Redux</em></strong> tab in the browser's console should open the development tools:</p>\n<picture><img src=\"/static/3fbd45ff62ea16d83816d35339869ed2/5a190/42new.png\" alt=\"browser with redux addon in devtools\" srcset=\"/static/3fbd45ff62ea16d83816d35339869ed2/772e8/42new.png 200w,\n/static/3fbd45ff62ea16d83816d35339869ed2/e17e5/42new.png 400w,\n/static/3fbd45ff62ea16d83816d35339869ed2/5a190/42new.png 800w,\n/static/3fbd45ff62ea16d83816d35339869ed2/c1b63/42new.png 1200w,\n/static/3fbd45ff62ea16d83816d35339869ed2/53ac9/42new.png 1287w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>You can inspect how dispatching a certain action changes the state by clicking the action:</p>\n<picture><img src=\"/static/f9a78f19297e7c9e40449ee44e3fee33/5a190/12ea.png\" alt=\"devtools inspecting tasks tree in redux\" srcset=\"/static/f9a78f19297e7c9e40449ee44e3fee33/772e8/12ea.png 200w,\n/static/f9a78f19297e7c9e40449ee44e3fee33/e17e5/12ea.png 400w,\n/static/f9a78f19297e7c9e40449ee44e3fee33/5a190/12ea.png 800w,\n/static/f9a78f19297e7c9e40449ee44e3fee33/c1b63/12ea.png 1200w,\n/static/f9a78f19297e7c9e40449ee44e3fee33/8c381/12ea.png 1267w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>It is also possible to dispatch actions to the store using the development tools:</p>\n<picture><img src=\"/static/0850622bab90f33a51fc498c0ddddef0/5a190/13ea.png\" alt=\"devtools redux dispatching createTask with payload\" srcset=\"/static/0850622bab90f33a51fc498c0ddddef0/772e8/13ea.png 200w,\n/static/0850622bab90f33a51fc498c0ddddef0/e17e5/13ea.png 400w,\n/static/0850622bab90f33a51fc498c0ddddef0/5a190/13ea.png 800w,\n/static/0850622bab90f33a51fc498c0ddddef0/c1b63/13ea.png 1200w,\n/static/0850622bab90f33a51fc498c0ddddef0/d7e70/13ea.png 1286w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>You can find the code for our current application in its entirety in the <em>part6-3</em> branch of <a href=\"https://github.com/comp227/redux-tasks/tree/part6-3\">this GitHub repository</a>.</p>\n</div>\n<div class=\"tasks\">\n<h3>Exercises 6.10-6.13</h3>\n<p>Let's continue working on the joke application using Redux that we started in exercise 6.3.</p>\n<h4>6.10 Better jokes, Step 8</h4>\n<p>Install Redux Toolkit for the project.\nMove the Redux store creation into the file <em>store.js</em> and use Redux Toolkit's <code class=\"language-text\">configureStore</code> to create the store.</p>\n<p>Change the definition of the <strong><em>filter reducer and action creators</em></strong> to use the Redux Toolkit's <code class=\"language-text\">createSlice</code> function.</p>\n<p>Also, start using Redux DevTools to debug the application's state more easily.</p>\n<h4>6.11 Better jokes, Step 9</h4>\n<p>Change the definition of the <strong><em>joke reducer and action creators</em></strong> to use Redux Toolkit's <code class=\"language-text\">createSlice</code> function.</p>\n<h4>6.12 Better jokes, Step 10</h4>\n<p>The application has a ready-made body for the <code class=\"language-text\">Notification</code> component:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Notification</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> style <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    padding<span class=\"token operator\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span>\n    backgroundColor<span class=\"token operator\">:</span> <span class=\"token string\">\"lavender\"</span><span class=\"token punctuation\">,</span>\n    marginBottom<span class=\"token operator\">:</span> <span class=\"token number\">10</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>style<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n      render here notification<span class=\"token operator\">...</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Notification</code></pre></div>\n<p>Extend the component so that it renders the message stored in the Redux store, making the component take the following form:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useSelector <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-redux'</span></span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Notification</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> notification <span class=\"token operator\">=</span> <span class=\"token function\">useSelector</span><span class=\"token punctuation\">(</span><span class=\"token comment\">/* something here */</span><span class=\"token punctuation\">)</span></span>  <span class=\"token keyword\">const</span> style <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    padding<span class=\"token operator\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span>\n    backgroundColor<span class=\"token operator\">:</span> <span class=\"token string\">\"lavender\"</span><span class=\"token punctuation\">,</span>\n    marginBottom<span class=\"token operator\">:</span> <span class=\"token number\">10</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>style<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token punctuation\">{</span>notification<span class=\"token punctuation\">}</span></span>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>You will have to make changes to the application's existing reducer.\nCreate a separate reducer for the new functionality by using the Redux Toolkit's <code class=\"language-text\">createSlice</code> function.</p>\n<p>The application does not have to use the <code class=\"language-text\">Notification</code> component intelligently at this point in the exercises.\nIt is enough for the application to display the initial value set for the message in the <code class=\"language-text\">notificationReducer</code>.</p>\n<h4>6.13 Better jokes, Step 11</h4>\n<p>Extend the application so that it uses the <code class=\"language-text\">Notification</code> component to display a message for five seconds when the user votes for a joke or creates a new joke:</p>\n<picture><img src=\"/static/c1cd5b96c77a93e5a152129c720e54f4/5a190/8ea.png\" alt=\"browser showing message of having voted\" srcset=\"/static/c1cd5b96c77a93e5a152129c720e54f4/772e8/8ea.png 200w,\n/static/c1cd5b96c77a93e5a152129c720e54f4/e17e5/8ea.png 400w,\n/static/c1cd5b96c77a93e5a152129c720e54f4/5a190/8ea.png 800w,\n/static/c1cd5b96c77a93e5a152129c720e54f4/c1b63/8ea.png 1200w,\n/static/c1cd5b96c77a93e5a152129c720e54f4/01a87/8ea.png 1288w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>It's recommended to create separate <a href=\"https://redux-toolkit.js.org/api/createSlice#reducers\">action creators</a> for setting and removing notifications.</p>\n</div>","frontmatter":{"mainImage":{"publicURL":"/static/a3b7bc3fafcb5b47227616e1343970e5/part-6.svg"},"part":6,"letter":"b","lang":"en"}}},"pageContext":{"part":6,"letter":"b","lang":"en"}}}