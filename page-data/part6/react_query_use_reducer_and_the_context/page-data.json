{"componentChunkName":"component---src-templates-content-template-js","path":"/part6/react_query_use_reducer_and_the_context","result":{"data":{"markdownRemark":{"html":"<div class=\"content\">\n<p>We will continue to look at various ways to manage an application's state.</p>\n<p>Let's continue with our task application.\nWe will focus on communication with the server.\nLet's start the application from scratch.\nHere's version zero of our <em>App.jsx</em>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">addTask</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    event<span class=\"token punctuation\">.</span><span class=\"token function\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">const</span> content <span class=\"token operator\">=</span> event<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>task<span class=\"token punctuation\">.</span>value\n    event<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>task<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token string\">''</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>content<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">toggleImportance</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">task</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'toggle importance of'</span><span class=\"token punctuation\">,</span> task<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">const</span> tasks <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n  <span class=\"token keyword\">return</span><span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>h2<span class=\"token operator\">></span>Tasks app<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h2<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>form onSubmit<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>addTask<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>input name<span class=\"token operator\">=</span><span class=\"token string\">\"task\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>button type<span class=\"token operator\">=</span><span class=\"token string\">\"submit\"</span><span class=\"token operator\">></span>add<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>form<span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span>tasks<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">task</span> <span class=\"token operator\">=></span>\n        <span class=\"token operator\">&lt;</span>li key<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>task<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">}</span> onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">toggleImportance</span><span class=\"token punctuation\">(</span>task<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n          <span class=\"token punctuation\">{</span>task<span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">}</span> \n          <span class=\"token operator\">&lt;</span>strong<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>task<span class=\"token punctuation\">.</span>important <span class=\"token operator\">?</span> <span class=\"token string\">'- important'</span> <span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>strong<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>li<span class=\"token operator\">></span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> App</code></pre></div>\n<p>The <a href=\"https://github.com/comp227/query-tasks/tree/part6-0\">initial code is on GitHub</a> in branch <em>part6-0</em>.</p>\n<h3>Managing data on the server with the React Query library</h3>\n<p>We shall now use the <a href=\"https://tanstack.com/query/latest\"><strong><em>React Query</em></strong></a> library to store and manage data retrieved from the server.\nThe latest version of the library is also called <em>TanStack Query</em>, but we'll stick to calling it <em>React Query</em>.</p>\n<p>Install the library with the command</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> i @tanstack/react-query</code></pre></div>\n<p>A few additions to the file <em>main.jsx</em> are needed to pass the library functions to the entire application:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>\n<span class=\"token keyword\">import</span> ReactDOM <span class=\"token keyword\">from</span> <span class=\"token string\">'react-dom/client'</span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> QueryClient<span class=\"token punctuation\">,</span> QueryClientProvider <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@tanstack/react-query'</span></span>\n<span class=\"token keyword\">import</span> App <span class=\"token keyword\">from</span> <span class=\"token string\">'./App'</span>\n\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> queryClient <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">QueryClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span>\nReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">createRoot</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token operator\">&lt;</span>QueryClientProvider client<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>queryClient<span class=\"token punctuation\">}</span><span class=\"token operator\">></span></span>    <span class=\"token operator\">&lt;</span>App <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>QueryClientProvider<span class=\"token operator\">></span></span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>We can now retrieve the tasks in the <code class=\"language-text\">App</code> component.\nYou should also copy over <em>db.json</em> from one of the other projects.\nThe code expands as follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useQuery <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@tanstack/react-query'</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">import</span> axios <span class=\"token keyword\">from</span> <span class=\"token string\">'axios'</span></span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token function\">useQuery</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    queryKey<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'tasks'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token function-variable function\">queryFn</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> axios<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http://localhost:3001/tasks'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span> <span class=\"token operator\">=></span> res<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\"></span><span class=\"gatsby-highlight-code-line\">  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> result<span class=\"token punctuation\">.</span>isLoading <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>loading data<span class=\"token operator\">...</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> tasks <span class=\"token operator\">=</span> result<span class=\"token punctuation\">.</span>data</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Retrieving data from the server still looks familiar as it uses Axios' <code class=\"language-text\">get</code> method.\nHowever, the Axios method call is now wrapped in a <a href=\"https://tanstack.com/query/latest/docs/react/guides/queries\">query</a>\nformed with the <a href=\"https://tanstack.com/query/latest/docs/react/reference/useQuery\"><code class=\"language-text\">useQuery</code></a> function.\n<code class=\"language-text\">useQuery</code>'s first parameter is a string <code class=\"language-text\">tasks</code>, which acts as a <a href=\"https://tanstack.com/query/latest/docs/react/guides/query-keys\"><strong><em>key</em></strong></a> to the query defined,\ni.e. the list of tasks.</p>\n<p>The return value of the <code class=\"language-text\">useQuery</code> function is an *object that indicates the <strong>status of the query*</strong>.\nObserve the browser's console output, which comes from our <code class=\"language-text\">console.log(result)</code> call:</p>\n<picture><img src=\"/static/01929209d03a89e2f217d8ca49cf330e/5a190/60new.png\" alt=\"browser console output shows status object changes\" srcset=\"/static/01929209d03a89e2f217d8ca49cf330e/772e8/60new.png 200w,\n/static/01929209d03a89e2f217d8ca49cf330e/e17e5/60new.png 400w,\n/static/01929209d03a89e2f217d8ca49cf330e/5a190/60new.png 800w,\n/static/01929209d03a89e2f217d8ca49cf330e/c1b63/60new.png 1200w,\n/static/01929209d03a89e2f217d8ca49cf330e/081d5/60new.png 1264w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>The first time the component is rendered, the query is still in the <em><code class=\"language-text\">loading</code></em> state, i.e. the associated HTTP request is pending.\nAt this stage, only the following is rendered:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>loading data<span class=\"token operator\">...</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></code></pre></div>\n<p>However, the HTTP request <em>is completed so quickly</em> that it's hard to ever see the text.\n<strong>When the request is completed, the component is rendered again</strong>.\nThe query is in the state <em><code class=\"language-text\">success</code></em> on the second rendering, and the field <code class=\"language-text\">data</code> of the query object contains the data returned by the request,\nwhich is the task list rendered on the screen.</p>\n<p>So the code above <em>retrieves data from the server and renders it on the screen without using the React hooks <code class=\"language-text\">useState</code> and <code class=\"language-text\">useEffect</code></em> used in chapters 2-5 at all.\nThe data on the server is now entirely under the administration of the React Query library,\nand the application does not need the state defined with React's <code class=\"language-text\">useState</code> hook at all!</p>\n<p>Let's move the function making the actual HTTP request to its own file <em>requests.js</em></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> axios <span class=\"token keyword\">from</span> <span class=\"token string\">'axios'</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getTasks</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n  axios<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http://localhost:3001/tasks'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span> <span class=\"token operator\">=></span> res<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span></code></pre></div>\n<p>The <code class=\"language-text\">App</code> component is now slightly simplified</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useQuery <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@tanstack/react-query'</span> \n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> getTasks <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./requests'</span></span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n\n  <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token function\">useQuery</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    queryKey<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'tasks'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"gatsby-highlight-code-line\">    queryFn<span class=\"token operator\">:</span> getTasks</span>  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>  \n\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The current code for the application is on <a href=\"https://github.com/comp227/query-tasks/tree/part6-1\">GitHub</a> in the branch <em>part6-1</em>.</p>\n<p>This code successfully retrieves data from the server.\nThe next section will focus on sending data to the server.</p>\n<h3>Synchronizing data to the server using React Query</h3>\n<p>Let's start by adding new tasks.\nIn <em>requests.js</em>, make a function <code class=\"language-text\">createTask</code> for saving new tasks:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> axios <span class=\"token keyword\">from</span> <span class=\"token string\">'axios'</span>\n\n<span class=\"token keyword\">const</span> baseUrl <span class=\"token operator\">=</span> <span class=\"token string\">'http://localhost:3001/tasks'</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getTasks</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n  axios<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>baseUrl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span> <span class=\"token operator\">=></span> res<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span>\n\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">createTask</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">newTask</span> <span class=\"token operator\">=></span></span><span class=\"gatsby-highlight-code-line\">  axios<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span>baseUrl<span class=\"token punctuation\">,</span> newTask<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span> <span class=\"token operator\">=></span> res<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span></span></code></pre></div>\n<p>The <code class=\"language-text\">App</code> component will change as follows</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useQuery<span class=\"token punctuation\">,</span> useMutation <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@tanstack/react-query'</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> getTasks<span class=\"token punctuation\">,</span> createTask <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./requests'</span></span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> newTaskMutation <span class=\"token operator\">=</span> <span class=\"token function\">useMutation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>mutationFn<span class=\"token operator\">:</span> createTask<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">addTask</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    event<span class=\"token punctuation\">.</span><span class=\"token function\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">const</span> content <span class=\"token operator\">=</span> event<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>task<span class=\"token punctuation\">.</span>value\n    event<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>task<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token string\">''</span>\n<span class=\"gatsby-highlight-code-line\">    newTaskMutation<span class=\"token punctuation\">.</span><span class=\"token function\">mutate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> content<span class=\"token punctuation\">,</span> important<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span>  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// ...</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Let's review what we added.\nTo create a new task, a <a href=\"https://tanstack.com/query/latest/docs/react/guides/mutations\"><strong>mutation</strong></a> is needed for us to modify the server's data.\nWe define the mutation via\n<a href=\"https://tanstack.com/query/latest/docs/react/reference/useMutation\"><code class=\"language-text\">useMutation</code></a>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> newTaskMutation <span class=\"token operator\">=</span> <span class=\"token function\">useMutation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> mutationFn<span class=\"token operator\">:</span> createTask<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><code class=\"language-text\">useMutation</code>'s parameter is <code class=\"language-text\">createTask</code>: the function we added to <em>requests.js</em>, which merely uses Axios to send a new task to the server.</p>\n<p>The <strong>event handler <code class=\"language-text\">addTask</code></strong> performs the mutation by calling the mutation object's <code class=\"language-text\">mutate</code> method and passing in the new task (<em><code class=\"language-text\">content, important: true</code></em>):</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">newTaskMutation<span class=\"token punctuation\">.</span><span class=\"token function\">mutate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> content<span class=\"token punctuation\">,</span> important<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Our solution looks promising, but it doesn't work.\nWhile the new task is saved on the server, <em>it is not updated on the screen</em>.</p>\n<p>To render a new task, we need to tell React Query to <a href=\"https://tanstack.com/query/latest/docs/react/guides/invalidations-from-mutations\"><strong><em>invalidate</em></strong></a> the old <code class=\"language-text\">tasks</code> from the query.</p>\n<p>We can invalidate the tasks by adding a second parameter to <code class=\"language-text\">useMutation</code>.\nThat parameter is an <code class=\"language-text\">onSuccess</code> callback function that tells the react query to invalidate the <code class=\"language-text\">tasks</code> key.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useQuery<span class=\"token punctuation\">,</span> useMutation<span class=\"token punctuation\">,</span> useQueryClient <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@tanstack/react-query'</span></span><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> getTasks<span class=\"token punctuation\">,</span> createTask <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./requests'</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> queryClient <span class=\"token operator\">=</span> <span class=\"token function\">useQueryClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span>\n  <span class=\"token keyword\">const</span> newTaskMutation <span class=\"token operator\">=</span> <span class=\"token function\">useMutation</span><span class=\"token punctuation\">(</span>createTask<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token function-variable function\">onSuccess</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">      queryClient<span class=\"token punctuation\">.</span><span class=\"token function\">invalidateQueries</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>queryKey<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'tasks'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span>    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>So once the mutation has been successfully executed, the function call</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">queryClient<span class=\"token punctuation\">.</span><span class=\"token function\">invalidateQueries</span><span class=\"token punctuation\">(</span><span class=\"token string\">'tasks'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>will cause React Query to automatically fetch the <code class=\"language-text\">tasks</code> from the server.\nAs a result, the application renders the up-to-date state on the server, i.e. the added task is also rendered.</p>\n<p>Let's also implement changing the importance of tasks.\nStart by adding a function for updating tasks to <em>requests.js</em>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">updateTask</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">updatedTask</span> <span class=\"token operator\">=></span>\n  axios<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>baseUrl<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>updatedTask<span class=\"token punctuation\">.</span>id<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> updatedTask<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span> <span class=\"token operator\">=></span> res<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Updating the task is also done by mutation.\nThe <code class=\"language-text\">App</code> component expands as follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useQuery<span class=\"token punctuation\">,</span> useMutation<span class=\"token punctuation\">,</span> useQueryClient <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@tanstack/react-query'</span> \n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> getTasks<span class=\"token punctuation\">,</span> createTask<span class=\"token punctuation\">,</span> updateTask <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./requests'</span></span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> updateTaskMutation <span class=\"token operator\">=</span> <span class=\"token function\">useMutation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    mutationFn<span class=\"token operator\">:</span> updateTask<span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token function-variable function\">onSuccess</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">      queryClient<span class=\"token punctuation\">.</span><span class=\"token function\">invalidateQueries</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> queryKey<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'tasks'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span>\n  <span class=\"token comment\">// ...</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">toggleImportance</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">task</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    updateTaskMutation<span class=\"token punctuation\">.</span><span class=\"token function\">mutate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>task<span class=\"token punctuation\">,</span> important<span class=\"token operator\">:</span> <span class=\"token operator\">!</span>task<span class=\"token punctuation\">.</span>important <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span>  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>So again, a mutation was created that invalidated the query <code class=\"language-text\">tasks</code> so that the updated task is rendered correctly.\nUsing mutation is easy, the method <code class=\"language-text\">mutate</code> receives a <code class=\"language-text\">task</code> as a parameter, with the <code class=\"language-text\">important</code> property toggled.</p>\n<p>The current code for the application is in <a href=\"https://github.com/comp227/query-tasks/tree/part6-2\">GitHub</a> in the branch <em>part6-2</em>.</p>\n<h3>Optimizing the performance</h3>\n<p>Our application works, and the code is understandable.\nIt's effortless to make changes to the list of tasks too!\nFor example, when we change the importance of a task, invalidating the query <code class=\"language-text\">tasks</code> is enough for the application data to be updated:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">  <span class=\"token keyword\">const</span> updateTaskMutation <span class=\"token operator\">=</span> <span class=\"token function\">useMutation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    mutationFn<span class=\"token operator\">:</span> updateTask<span class=\"token punctuation\">,</span> \n    <span class=\"token function-variable function\">onSuccess</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">      queryClient<span class=\"token punctuation\">.</span><span class=\"token function\">invalidateQueries</span><span class=\"token punctuation\">(</span><span class=\"token string\">'tasks'</span><span class=\"token punctuation\">)</span></span>    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>The consequence of this, of course, is that after the PUT request that causes the task to change,\nthe application makes a new GET request to retrieve the query data from the server:</p>\n<picture><img src=\"/static/e75e38f83f878403fbf9aa531324071f/5a190/61new.png\" alt=\"devtools network tab with highlight over 3 and tasks requests\" srcset=\"/static/e75e38f83f878403fbf9aa531324071f/772e8/61new.png 200w,\n/static/e75e38f83f878403fbf9aa531324071f/e17e5/61new.png 400w,\n/static/e75e38f83f878403fbf9aa531324071f/5a190/61new.png 800w,\n/static/e75e38f83f878403fbf9aa531324071f/c1b63/61new.png 1200w,\n/static/e75e38f83f878403fbf9aa531324071f/d56b5/61new.png 1215w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>If the amount of data retrieved by the application is not large, it doesn't really matter.\nSimilarly, from the client's perspective, making an extra HTTP GET request doesn't matter either,\nbut in some situations it could strain the server.</p>\n<p>If necessary, we could optimize performance\n<a href=\"https://tanstack.com/query/latest/docs/react/guides/updates-from-mutation-responses\">by manually updating</a> the query state maintained by React Query.</p>\n<p>Here's the code that manually updates the new task mutation:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> queryClient <span class=\"token operator\">=</span>  <span class=\"token function\">useQueryClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> \n\n  <span class=\"token keyword\">const</span> newTaskMutation <span class=\"token operator\">=</span> <span class=\"token function\">useMutation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    mutationFn<span class=\"token operator\">:</span> createTask<span class=\"token punctuation\">,</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token function-variable function\">onSuccess</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">newTask</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token keyword\">const</span> tasks <span class=\"token operator\">=</span> queryClient<span class=\"token punctuation\">.</span><span class=\"token function\">getQueryData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'tasks'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> </span><span class=\"gatsby-highlight-code-line\">      queryClient<span class=\"token punctuation\">.</span><span class=\"token function\">setQueryData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'tasks'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> tasks<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>newTask<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span>    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>In the <code class=\"language-text\">onSuccess</code> callback, <em>where we now have the <code class=\"language-text\">newTask</code> as a parameter</em>,\nthe <code class=\"language-text\">queryClient</code> object reads the existing <code class=\"language-text\">tasks</code> state and updates it by adding the new task.\nThe value of the <code class=\"language-text\">newTask</code> parameter is the <em>value returned by the function <code class=\"language-text\">createTask</code></em>, defined in the file <em>requests.js</em> as follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">createTask</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">newTask</span> <span class=\"token operator\">=></span>\n  axios<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span>baseUrl<span class=\"token punctuation\">,</span> newTask<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span> <span class=\"token operator\">=></span> res<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span></code></pre></div>\n<p>It would be reasonable to make a similar change to the mutation that changes a task's importance, but we leave it as an optional exercise.</p>\n<h4>Noticing extra network calls</h4>\n<p>If we closely follow the browser's network tab, we notice that React Query retrieves all tasks as soon as we move the cursor to the input field:</p>\n<picture><img src=\"/static/7bd6a80c381feccd2bb96da0d6f5375b/5a190/62new.png\" alt=\"dev tools tasks app with input text field highlighted and arrow on network over notes request as 200\" srcset=\"/static/7bd6a80c381feccd2bb96da0d6f5375b/772e8/62new.png 200w,\n/static/7bd6a80c381feccd2bb96da0d6f5375b/e17e5/62new.png 400w,\n/static/7bd6a80c381feccd2bb96da0d6f5375b/5a190/62new.png 800w,\n/static/7bd6a80c381feccd2bb96da0d6f5375b/f43e4/62new.png 1120w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>What is going on?\nThe <a href=\"https://tanstack.com/query/latest/docs/react/reference/useQuery\">React Query documentation</a>,\nexplains that queries (*whose status is <strong>stale*</strong>)\nare updated when the <strong>window focus</strong> changes.\nSo since the input field becomes active when clicked, that changes the window focus, and thus the queries update.\nIf we want, we can turn off the functionality by adding an <em>options</em> parameter to our <code class=\"language-text\">getTasks</code> query.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n  <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token function\">useQuery</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    queryKey<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'tasks'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    queryFn<span class=\"token operator\">:</span> getTasks<span class=\"token punctuation\">,</span>\n<span class=\"gatsby-highlight-code-line\">    refetchOnWindowFocus<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span></span>  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>If you put a <code class=\"language-text\">console.log</code> statement in the code, you could see from browser console how often React Query causes the application to be re-rendered.\nThe rule of thumb is that rerendering happens at least whenever there is a need for it, i.e. when the state of the query changes.\nYou can read more about <a href=\"https://tkdodo.eu/blog/react-query-render-optimizations\">render optimizations here</a>.</p>\n<p>The code for the application is in <a href=\"https://github.com/comp227/query-tasks/tree/part6-3\">GitHub</a> in the branch <em>part6-3</em>.</p>\n<h4>React Query summary</h4>\n<p>React Query is a versatile library that, based on what we have already seen, simplifies the application.\nDoes React Query make more complex state management solutions such as Redux unnecessary? No.\nReact Query can partially replace the state of the application in some cases,\nbut as the <a href=\"https://tanstack.com/query/latest/docs/react/guides/does-this-replace-client-state\">documentation</a> states:</p>\n<blockquote>\n<ul>\n<li>*React Query is a <strong>server-state library</strong>, responsible for managing asynchronous operations between your server and client*</li>\n<li>*Redux, etc. are <strong>client-state libraries</strong> that can be used to store asynchronous data, albeit inefficiently when compared to a tool like React Query*</li>\n</ul>\n</blockquote>\n<p>So React Query is a <strong>library that maintains the server state in the frontend</strong>, i.e. acts as a cache for what is stored on the server.\nReact Query simplifies the processing of data on the server, and can in some cases eliminate the need for data on the server to be saved in the frontend state.</p>\n<p>Most React applications need not only a way to temporarily store the served data,\nbut also some solution for how the rest of the frontend state (e.g. the state of forms or notifications) is handled.</p>\n</div>\n<div class=\"tasks\">\n<h3>Exercises 6.20-6.22</h3>\n<p>Now let's make a new version of the joke application that uses the React Query library.\nUse the <em>quipquery</em> folder in your <em>part6</em> repo as your starting point in your project.\nThe project has a ready-installed JSON Server, the operation of which has been slightly modified.\n*Read <strong>server.js</strong> for more details.*\n<em>Also, make sure you're connecting to the correct <code class=\"language-text\">PORT</code>.</em>\nStart the server with <code class=\"language-text\">npm run server</code>.</p>\n<h4>Exercise 6.20</h4>\n<p>Implement retrieving jokes from the server using React Query.</p>\n<p>The application should work in such a way that if there are problems communicating with the server, only an error page will be displayed:</p>\n<picture><img src=\"/static/beadb4f74b4cb16860df022e20c65b99/5a190/65new.png\" alt=\"browser saying anecdote service not available due to problems in server on localhost\" srcset=\"/static/beadb4f74b4cb16860df022e20c65b99/772e8/65new.png 200w,\n/static/beadb4f74b4cb16860df022e20c65b99/e17e5/65new.png 400w,\n/static/beadb4f74b4cb16860df022e20c65b99/5a190/65new.png 800w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Here is some <a href=\"https://tanstack.com/query/latest/docs/react/guides/queries\">info on how to detect possible server errors</a>.</p>\n<blockquote>\n<p>*You can simulate a problem with the server by <strong>turning off the JSON Server.*</strong></p>\n</blockquote>\n<p>Please be aware that if a request fails, the query stays in the <code class=\"language-text\">isLoading</code> state for a while.\nThis is because React Query tries the request a few times before it determines that the request is not successful.\nYou can optionally specify that no retries are made:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token function\">useQuery</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    queryKey<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'jokes'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    queryFn<span class=\"token operator\">:</span> getJokes<span class=\"token punctuation\">,</span> \n    retry<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>or that the request is retried a specific number of times (<em>like once</em>):</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token function\">useQuery</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    queryKey<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'jokes'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    queryFn<span class=\"token operator\">:</span> getJokes<span class=\"token punctuation\">,</span> \n    retry<span class=\"token operator\">:</span> <span class=\"token number\">1</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<h4>Exercise 6.21</h4>\n<p>Implement adding new jokes to the server using React Query.\nThe application should render a new joke by default.\nMake sure that the content of the joke must be at least five characters long, otherwise the server will reject the POST request.\nYou don't have to worry about error handling now.</p>\n<h4>Exercise 6.22</h4>\n<p>Implement voting for jokes using React Query.\nThe application should automatically render the increased number of votes for the voted joke</p>\n</div>\n<div class=\"content\">\n<h3>useReducer</h3>\n<p>So even if the application uses React Query, some kind of solution is usually needed to manage the rest of the frontend state (for example, the state of forms).\nQuite often, the state created with <code class=\"language-text\">useState</code> is a sufficient solution.\nUsing Redux is of course possible, but there are other alternatives.</p>\n<p>Let's look at a simple counter application.\nThe application displays the counter value, and offers three buttons to update the counter status:</p>\n<picture><img src=\"/static/344818b86d85a16828bf47fa8628a817/5a190/63new.png\" alt=\"browser showing simple counter application with + - 0 buttons and 7 above\" srcset=\"/static/344818b86d85a16828bf47fa8628a817/772e8/63new.png 200w,\n/static/344818b86d85a16828bf47fa8628a817/e17e5/63new.png 400w,\n/static/344818b86d85a16828bf47fa8628a817/5a190/63new.png 800w,\n/static/344818b86d85a16828bf47fa8628a817/ee455/63new.png 863w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Let's implement the state management of the counter <em>using a Redux-like state management mechanism</em> provided by React's built-in\n<a href=\"https://react.dev/reference/react/useReducer\"><strong><em>useReducer</em></strong></a> hook.\nHere's what the code looks like:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useReducer <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">counterReducer</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">state<span class=\"token punctuation\">,</span> action</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">\"INC\"</span><span class=\"token operator\">:</span>\n        <span class=\"token keyword\">return</span> state <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">\"DEC\"</span><span class=\"token operator\">:</span>\n        <span class=\"token keyword\">return</span> state <span class=\"token operator\">-</span> <span class=\"token number\">1</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">\"ZERO\"</span><span class=\"token operator\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span>\n    <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n        <span class=\"token keyword\">return</span> state\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>counter<span class=\"token punctuation\">,</span> counterDispatch<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useReducer</span><span class=\"token punctuation\">(</span>counterReducer<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>counter<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">counterDispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> type<span class=\"token operator\">:</span> <span class=\"token string\">\"INC\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token operator\">+</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">counterDispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> type<span class=\"token operator\">:</span> <span class=\"token string\">\"DEC\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token operator\">-</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">counterDispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> type<span class=\"token operator\">:</span> <span class=\"token string\">\"ZERO\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token number\">0</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> App</code></pre></div>\n<p>The hook <a href=\"https://react.dev/reference/react/useReducer\"><code class=\"language-text\">useReducer</code></a> provides a mechanism to create a state for an application.\n<code class=\"language-text\">useReducer</code>'s first parameter, is the reducer function that handles state changes, while the second parameter is the initial value of the state:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>counter<span class=\"token punctuation\">,</span> counterDispatch<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useReducer</span><span class=\"token punctuation\">(</span>counterReducer<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>The reducer function that handles state changes is similar to Redux's reducers,\ni.e. the function takes in <em>parameters for the current state and the action that changes the state</em>.\nThe function returns the new state updated based on the type and possible contents of the action:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">counterReducer</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">state<span class=\"token punctuation\">,</span> action</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">\"INC\"</span><span class=\"token operator\">:</span>\n        <span class=\"token keyword\">return</span> state <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">\"DEC\"</span><span class=\"token operator\">:</span>\n        <span class=\"token keyword\">return</span> state <span class=\"token operator\">-</span> <span class=\"token number\">1</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">\"ZERO\"</span><span class=\"token operator\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span>\n    <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n        <span class=\"token keyword\">return</span> state\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>In our example, actions only have a type.\n<em>If the action's type is <code class=\"language-text\">INC</code>, it increases the value of the counter by one, etc.</em>\nLike Redux's reducers, <strong><em>actions can also contain arbitrary data</em></strong>, which is usually put in the action's <code class=\"language-text\">payload</code> field.</p>\n<p>The function <code class=\"language-text\">useReducer</code> returns an array that contains:</p>\n<ol>\n<li>an element to access the current value of the state</li>\n<li>a <code class=\"language-text\">dispatch</code> function to change the state:</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>counter<span class=\"token punctuation\">,</span> counterDispatch<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useReducer</span><span class=\"token punctuation\">(</span>counterReducer<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>counter<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></span>      <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n<span class=\"gatsby-highlight-code-line\">        <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">counterDispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> type<span class=\"token operator\">:</span> <span class=\"token string\">\"INC\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token operator\">+</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span></span>        <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">counterDispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> type<span class=\"token operator\">:</span> <span class=\"token string\">\"DEC\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token operator\">-</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">counterDispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> type<span class=\"token operator\">:</span> <span class=\"token string\">\"ZERO\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token number\">0</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>One can observe that the state change is done exactly as in Redux, the dispatch function is given the appropriate state-changing action as a parameter:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">counterDispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> type<span class=\"token operator\">:</span> <span class=\"token string\">\"INC\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>The current code for the application is in the repository\n<a href=\"https://github.com/comp227/hook-counter/tree/part6-1\">https://github.com/comp227/hook-counter</a> in the branch <em>part6-1</em>.</p>\n<h3>Using context for passing the state to components</h3>\n<p>If we want to split the application into several components,\n<em>the value of the counter and the dispatch function used to manage it must also be passed to the other components</em>.\nOne solution would be to <strong><em>pass these as props</em></strong> in the usual way:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Display</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> counter <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>counter<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Button</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> dispatch<span class=\"token punctuation\">,</span> type<span class=\"token punctuation\">,</span> label <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> type <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span>label<span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>counter<span class=\"token punctuation\">,</span> counterDispatch<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useReducer</span><span class=\"token punctuation\">(</span>counterReducer<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token operator\">&lt;</span>Display counter<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>counter<span class=\"token punctuation\">}</span><span class=\"token operator\">/</span><span class=\"token operator\">></span></span>      <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n<span class=\"gatsby-highlight-code-line\">        <span class=\"token operator\">&lt;</span>Button dispatch<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>counterDispatch<span class=\"token punctuation\">}</span> type<span class=\"token operator\">=</span><span class=\"token string\">'INC'</span> label<span class=\"token operator\">=</span><span class=\"token string\">'+'</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span></span><span class=\"gatsby-highlight-code-line\">        <span class=\"token operator\">&lt;</span>Button dispatch<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>counterDispatch<span class=\"token punctuation\">}</span> type<span class=\"token operator\">=</span><span class=\"token string\">'DEC'</span> label<span class=\"token operator\">=</span><span class=\"token string\">'-'</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span></span><span class=\"gatsby-highlight-code-line\">        <span class=\"token operator\">&lt;</span>Button dispatch<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>counterDispatch<span class=\"token punctuation\">}</span> type<span class=\"token operator\">=</span><span class=\"token string\">'ZERO'</span> label<span class=\"token operator\">=</span><span class=\"token string\">'0'</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span></span>      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The solution works, but is not optimal.\nIf the component structure becomes very nested, the dispatcher would need to be forwarded using props through all of those intermediary sub-components,\neven though those components in between may not need the dispatcher.\nThis phenomenon is called <a href=\"https://kentcdodds.com/blog/prop-drilling\"><strong>prop drilling</strong></a>.</p>\n<p>React's built-in <a href=\"https://react.dev/learn/passing-data-deeply-with-context\">Context API</a> provides a solution for us.\nReact's <strong>context</strong> is like a global state for the application, so that any component could get access to the state.\nHowever, as Javascript expert Kent Dodds says in the <a href=\"https://kentcdodds.com/blog/prop-drilling\">prop drilling article linked above</a>, when comparing the context api to global variables:</p>\n<blockquote>\n<p><em>The difference is that because of the way the [Context] API was designed, you can still statically find the source of the context as well as any consumers with relative ease.</em></p>\n</blockquote>\n<p>Let us now create a context in the application that stores the state management of the counter.</p>\n<p>The context is created with React's hook <a href=\"https://react.dev/reference/react/createContext\">createContext</a>.\nLet's create a context in the file <em>CounterContext.jsx</em>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> createContext <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>\n\n<span class=\"token keyword\">const</span> CounterContext <span class=\"token operator\">=</span> <span class=\"token function\">createContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> CounterContext</code></pre></div>\n<p>The <code class=\"language-text\">App</code> component can now <strong><em>provide a context to its child components</em></strong> as follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">import</span> CounterContext <span class=\"token keyword\">from</span> <span class=\"token string\">'./CounterContext'</span></span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>counter<span class=\"token punctuation\">,</span> counterDispatch<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useReducer</span><span class=\"token punctuation\">(</span>counterReducer<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token operator\">&lt;</span>CounterContext<span class=\"token punctuation\">.</span>Provider value<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">[</span>counter<span class=\"token punctuation\">,</span> counterDispatch<span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span></span>      <span class=\"token operator\">&lt;</span>Display <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>Button type<span class=\"token operator\">=</span><span class=\"token string\">'INC'</span> label<span class=\"token operator\">=</span><span class=\"token string\">'+'</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>Button type<span class=\"token operator\">=</span><span class=\"token string\">'DEC'</span> label<span class=\"token operator\">=</span><span class=\"token string\">'-'</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>Button type<span class=\"token operator\">=</span><span class=\"token string\">'ZERO'</span> label<span class=\"token operator\">=</span><span class=\"token string\">'0'</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>CounterContext<span class=\"token punctuation\">.</span>Provider<span class=\"token operator\">></span></span>  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The code above wraps child components inside the <code class=\"language-text\">CounterContext.Provider</code> component and sets a <code class=\"language-text\">value</code> in its attributes.</p>\n<p>The context providers's <code class=\"language-text\">value</code> is set to be an array containing the value of the <code class=\"language-text\">counter</code>, and the <code class=\"language-text\">dispatch</code> function (<em><code class=\"language-text\">counterDispatch</code></em>).</p>\n<p>Other components (including <em><code class=\"language-text\">Display</code></em> and <em><code class=\"language-text\">Button</code></em>)\ncan now access the context using the <a href=\"https://react.dev/reference/react/useContext\"><code class=\"language-text\">useContext</code></a> hook:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useContext <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span></span><span class=\"token keyword\">import</span> CounterContext <span class=\"token keyword\">from</span> <span class=\"token string\">'../CounterContext'</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Display</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>counter<span class=\"token punctuation\">,</span> dispatch<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useContext</span><span class=\"token punctuation\">(</span>CounterContext<span class=\"token punctuation\">)</span></span>  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span>counter<span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// meanwhile in another component, Button.jsx</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Button</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> type<span class=\"token punctuation\">,</span> label <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>counter<span class=\"token punctuation\">,</span> dispatch<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useContext</span><span class=\"token punctuation\">(</span>CounterContext<span class=\"token punctuation\">)</span></span>  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> type <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span>label<span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The current code for the application is in <a href=\"https://github.com/comp227/hook-counter/tree/part6-2\">GitHub</a> in the branch <em>part6-2</em>.</p>\n<h3>Defining the counter context in a separate file</h3>\n<p>In studying the application's code further,\nwe want to avoid the fact that the functionality of the counter state management is partly defined in the <code class=\"language-text\">App</code> component.\nLet's <strong>move everything related to the counter to <em>CounterContext.jsx</em></strong>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> createContext<span class=\"token punctuation\">,</span> useReducer <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">counterReducer</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">state<span class=\"token punctuation\">,</span> action</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">\"INC\"</span><span class=\"token operator\">:</span>\n        <span class=\"token keyword\">return</span> state <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">\"DEC\"</span><span class=\"token operator\">:</span>\n        <span class=\"token keyword\">return</span> state <span class=\"token operator\">-</span> <span class=\"token number\">1</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">\"ZERO\"</span><span class=\"token operator\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span>\n    <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n        <span class=\"token keyword\">return</span> state\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> CounterContext <span class=\"token operator\">=</span> <span class=\"token function\">createContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">CounterContextProvider</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>counter<span class=\"token punctuation\">,</span> counterDispatch<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useReducer</span><span class=\"token punctuation\">(</span>counterReducer<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>CounterContext<span class=\"token punctuation\">.</span>Provider value<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">[</span>counter<span class=\"token punctuation\">,</span> counterDispatch<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>CounterContext<span class=\"token punctuation\">.</span>Provider<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> CounterContext</code></pre></div>\n<p>The file now exports, in addition to the <code class=\"language-text\">CounterContext</code> object, the <code class=\"language-text\">CounterContextProvider</code> component,\nwhose value is a counter and a dispatcher used for its state management.</p>\n<p>Let's enable the context provider by making a change in <em>main.jsx</em>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> ReactDOM <span class=\"token keyword\">from</span> <span class=\"token string\">'react-dom/client'</span>\n<span class=\"token keyword\">import</span> App <span class=\"token keyword\">from</span> <span class=\"token string\">'./App'</span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> CounterContextProvider <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./CounterContext'</span></span>\nReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">createRoot</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token operator\">&lt;</span>CounterContextProvider<span class=\"token operator\">></span></span>    <span class=\"token operator\">&lt;</span>App <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>CounterContextProvider<span class=\"token operator\">></span></span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Now the context defining the value and functionality of the counter <strong>is available to <em>all</em> components of the application</strong>.</p>\n<p>The <code class=\"language-text\">App</code> component is simplified to the following form:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> Display <span class=\"token keyword\">from</span> <span class=\"token string\">'./components/Display'</span>\n<span class=\"token keyword\">import</span> Button <span class=\"token keyword\">from</span> <span class=\"token string\">'./components/Button'</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Display <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>Button type<span class=\"token operator\">=</span><span class=\"token string\">'INC'</span> label<span class=\"token operator\">=</span><span class=\"token string\">'+'</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>Button type<span class=\"token operator\">=</span><span class=\"token string\">'DEC'</span> label<span class=\"token operator\">=</span><span class=\"token string\">'-'</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>Button type<span class=\"token operator\">=</span><span class=\"token string\">'ZERO'</span> label<span class=\"token operator\">=</span><span class=\"token string\">'0'</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> App</code></pre></div>\n<p>The context is still used in the same way, e.g. the component <code class=\"language-text\">Button</code> is defined as follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useContext <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>\n<span class=\"token keyword\">import</span> CounterContext <span class=\"token keyword\">from</span> <span class=\"token string\">'../CounterContext'</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Button</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> type<span class=\"token punctuation\">,</span> label <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>counter<span class=\"token punctuation\">,</span> dispatch<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useContext</span><span class=\"token punctuation\">(</span>CounterContext<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> type <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span>label<span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Button</code></pre></div>\n<p>The <code class=\"language-text\">Button</code> component <em>only needs the <code class=\"language-text\">dispatch</code> function of the counter</em>, but it also gets the value of the counter from the context using the function <code class=\"language-text\">useContext</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>counter<span class=\"token punctuation\">,</span> dispatch<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useContext</span><span class=\"token punctuation\">(</span>CounterContext<span class=\"token punctuation\">)</span></code></pre></div>\n<p>This is not a big problem, but it is possible to make the code a bit nicer by defining a couple of helper functions in the <code class=\"language-text\">CounterContext</code> file:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> createContext<span class=\"token punctuation\">,</span> useReducer<span class=\"token punctuation\">,</span> useContext <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span></span>\n<span class=\"token keyword\">const</span> CounterContext <span class=\"token operator\">=</span> <span class=\"token function\">createContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// ...</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">useCounterValue</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> counterAndDispatch <span class=\"token operator\">=</span> <span class=\"token function\">useContext</span><span class=\"token punctuation\">(</span>CounterContext<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> counterAndDispatch<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">useCounterDispatch</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> counterAndDispatch <span class=\"token operator\">=</span> <span class=\"token function\">useContext</span><span class=\"token punctuation\">(</span>CounterContext<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> counterAndDispatch<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// ...</span></code></pre></div>\n<p>With these helper functions, the components can now selectively retrieve the parts of the context they need.\nThe <code class=\"language-text\">Display</code> component changes as follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useCounterValue <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'../CounterContext'</span></span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Display</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> counter <span class=\"token operator\">=</span> <span class=\"token function\">useCounterValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span>  <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">{</span>counter<span class=\"token punctuation\">}</span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Display</code></pre></div>\n<p>Component <code class=\"language-text\">Button</code> becomes:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useCounterDispatch <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'../CounterContext'</span></span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Button</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> type<span class=\"token punctuation\">,</span> label <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> dispatch <span class=\"token operator\">=</span> <span class=\"token function\">useCounterDispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span>  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> type <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span>label<span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Button</code></pre></div>\n<p>This code is much cleaner.\nThe <em>entire state of the application</em>, i.e. the value of the counter and the code for managing it, <strong><em>is now isolated in the file <code class=\"language-text\">CounterContext</code></em></strong>.\n<em>CounterContext.jsx</em> also has well-named and easy-to-use auxiliary functions for managing the state.</p>\n<p>The final code for the application is in <a href=\"https://github.com/comp227/hook-counter/tree/part6-3\">GitHub</a> in the branch <em>part6-3</em>.</p>\n<p>As a technical detail, notice that the helper functions <code class=\"language-text\">useCounterValue</code> and <code class=\"language-text\">useCounterDispatch</code> are defined as\n<a href=\"https://react.dev/learn/reusing-logic-with-custom-hooks\">custom hooks</a>,\nbecause calling the hook function <code class=\"language-text\">useContext</code> is <a href=\"https://legacy.reactjs.org/docs/hooks-rules.html\">possible</a> only from React components or custom hooks.\n<strong>Custom Hooks</strong> are JavaScript functions whose name must start with the string <em><code class=\"language-text\">use</code></em>.\nWe will return to custom hooks in a little more detail in <a href=\"/part7/custom_hooks\">part 7</a> of the course.</p>\n</div>\n<div class=\"tasks\">\n<h3>Exercises 6.23-6.24</h3>\n<h4>Exercise 6.23</h4>\n<p>The application has a <code class=\"language-text\">Notification</code> component for displaying notifications to the user.</p>\n<p>Implement the application's notification state management using the <code class=\"language-text\">useReducer</code> hook and context.\nThe notification should tell the user when a new joke is created or an joke is voted on:</p>\n<picture><img src=\"/static/7576248b5e92bb91410b3f2297f65f55/5a190/66new.png\" alt=\"browser showing notification for added joke\" srcset=\"/static/7576248b5e92bb91410b3f2297f65f55/772e8/66new.png 200w,\n/static/7576248b5e92bb91410b3f2297f65f55/e17e5/66new.png 400w,\n/static/7576248b5e92bb91410b3f2297f65f55/5a190/66new.png 800w,\n/static/7576248b5e92bb91410b3f2297f65f55/4cdf7/66new.png 995w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>The notification is displayed for five seconds.</p>\n<h4>Exercise 6.24</h4>\n<p>As stated in exercise 6.21, the server requires that the content of the joke to be added is at least five characters long.\n<strong><em>Now implement error handling for the insertion</em></strong>.\nIn practice, it is sufficient to display a notification to the user in case of a failed POST request:</p>\n<picture><img src=\"/static/d638927c03303c69ce04701e2506738d/5a190/67new.png\" alt=\"browser showing error notification for trying to add too short of an anecdote\" srcset=\"/static/d638927c03303c69ce04701e2506738d/772e8/67new.png 200w,\n/static/d638927c03303c69ce04701e2506738d/e17e5/67new.png 400w,\n/static/d638927c03303c69ce04701e2506738d/5a190/67new.png 800w,\n/static/d638927c03303c69ce04701e2506738d/d326d/67new.png 1197w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>The error condition should be handled in the callback function registered for it, here's\n<a href=\"https://tanstack.com/query/latest/docs/react/reference/useMutation\">how to register a function</a>.</p>\n<p>This was the last exercise for this part of the course and it's time to push your code to GitHub if you haven't already and mark the exercises that were completed on Canvas.</p>\n</div>\n<div class=\"content\">\n<h3>Which state management solution to choose?</h3>\n<p>In chapters 1-5, all state management of the application was done using React's hook <code class=\"language-text\">useState</code>.\nAsynchronous calls to the backend required the use of the <code class=\"language-text\">useEffect</code> hook in some situations.\nIn principle, <em>nothing else is needed</em>.</p>\n<p>However as we have discussed in this section, the idea of <em>prop drilling</em> or of wanting a more complex state management solution has often arisen.</p>\n<p>Over the years, several alternative solutions have been developed for state management of React applications.\nHowever, no solution has been \"final\", all have their own pros and cons, and new solutions are being developed all the time.</p>\n<p>The situation may confuse a beginner and even an experienced web developer.\nWhich solution should be used?</p>\n<p>For a simple application, <code class=\"language-text\">useState</code> is certainly a good starting point.\nIf the application is communicating with the server, the communication can be handled in the same way as in chapters 1-5, using the state of the application itself.\nRecently, however, it has become more common to move the communication and associated state management at least partially under the control of React Query (or some other similar library).\nThere are also situations where it may make sense to handle some of the state with <code class=\"language-text\">useState</code> and some with contexts.</p>\n<p>The most comprehensive and robust state management solution is <em>Redux</em>, which is a way to implement the so-called <a href=\"https://facebookarchive.github.io/flux/\">Flux</a> architecture.\nRedux is slightly older than the solutions presented in this section.\nThe rigidity of Redux has been the motivation for many new state management solutions, such as React's <code class=\"language-text\">useReducer</code>.\nSome of the criticisms of Redux's rigidity have already become obsolete thanks to the <a href=\"https://redux-toolkit.js.org/\">Redux Toolkit</a>.</p>\n<p>Over the years, there have also been other state management libraries developed that are similar to Redux,\nsuch as the newer entrant <a href=\"https://recoiljs.org/\">Recoil</a> and the slightly older <a href=\"https://mobx.js.org/\">MobX</a>.\nHowever, according to <a href=\"https://npmtrends.com/mobx-vs-recoil-vs-redux\">Npm trends</a>,\nRedux still clearly dominates, and in fact seems to be increasing its lead:</p>\n<picture><img src=\"/static/65f6ef50720bfd44cf8add5b1443e5ba/5a190/64new.png\" alt=\"graph showing redux growing in popularity over past 5 years\" srcset=\"/static/65f6ef50720bfd44cf8add5b1443e5ba/772e8/64new.png 200w,\n/static/65f6ef50720bfd44cf8add5b1443e5ba/e17e5/64new.png 400w,\n/static/65f6ef50720bfd44cf8add5b1443e5ba/5a190/64new.png 800w,\n/static/65f6ef50720bfd44cf8add5b1443e5ba/c1b63/64new.png 1200w,\n/static/65f6ef50720bfd44cf8add5b1443e5ba/29007/64new.png 1600w,\n/static/65f6ef50720bfd44cf8add5b1443e5ba/0f903/64new.png 1719w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Also, Redux does not have to be used in its entirety in an application.\nIt may make sense, for example, <em>to manage the form state outside of Redux</em>, especially in situations where the state of a form does not affect the rest of the application.\nIt is also possible to <strong><em>use Redux and React Query together in the same application</em></strong>.</p>\n<p>The question of which state management solution should be used is not at all straightforward.\n<strong>It is impossible to give a single correct answer</strong>.\nIt may also turn out that over time, the application may outgrow the selected state management solution,\n<em>even if the application has already been put into production use</em>.</p>\n<p>The best we can do is to continue to learn about what's available.</p>\n</div>","frontmatter":{"mainImage":{"publicURL":"/static/a3b7bc3fafcb5b47227616e1343970e5/part-6.svg"},"part":6,"letter":"d","lang":"en"}}},"pageContext":{"part":6,"letter":"d","lang":"en"}}}