{"componentChunkName":"component---src-templates-content-template-js","path":"/part7/class_components_miscellaneous","result":{"data":{"markdownRemark":{"html":"<div class=\"content\">\n<h3>Class Components</h3>\n<p>During the course, we have only used React components having been defined as Javascript functions.\nThis was not possible without the <a href=\"https://reactjs.org/docs/hooks-intro.html\">hook</a> functionality that came with version 16.8 of React.\nBefore, when defining a component that uses state, one had to define it using Javascript's\n<a href=\"https://reactjs.org/docs/state-and-lifecycle.html#converting-a-function-to-a-class\"><code class=\"language-text\">class</code></a> syntax.</p>\n<p>We should at least be familiar with Class Components since the world contains a lot of old React code,\nwhich will probably never be completely rewritten using the updated syntax.</p>\n<p>Let's get to know the main features of Class Components by producing yet another very familiar joke application.\nWe store the jokes in the file <em>db.json</em> using <em>json-server</em>.\nThe contents of the file are lifted from <a href=\"https://github.com/comp227/misc/blob/main/jokes.json\">here</a>.</p>\n<p>The initial version of the Class Component looks like this</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">App</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span>joke <span class=\"token keyword\">of</span> the day<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> App</code></pre></div>\n<p>The component now has a <a href=\"https://react.dev/reference/react/Component#constructor\">constructor</a>,\nin which nothing happens at the moment, and contains the method <a href=\"https://react.dev/reference/react/Component#render\"><code class=\"language-text\">render</code></a>.\nAs one might guess, <code class=\"language-text\">render</code> defines how and what is rendered to the screen.</p>\n<p>Let's define a state for the list of jokes and the currently-visible joke.\nIn contrast to when using the <a href=\"https://react.dev/reference/react/useState\"><code class=\"language-text\">useState</code> hook</a>, Class Components only contain one state.\nSo if the state is made up of multiple <em>parts</em>, they should be stored as properties of the state.\nThe state is initialized in the constructor:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">App</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span>\n\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">      jokes<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">      current<span class=\"token operator\">:</span> <span class=\"token number\">0</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">}</span></span>  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>jokes<span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>no jokes<span class=\"token operator\">...</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">}</span></span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span>joke <span class=\"token keyword\">of</span> the day<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>\n<span class=\"gatsby-highlight-code-line\">        <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span></span><span class=\"gatsby-highlight-code-line\">          <span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>jokes<span class=\"token punctuation\">[</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">}</span></span><span class=\"gatsby-highlight-code-line\">        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></span><span class=\"gatsby-highlight-code-line\">        <span class=\"token operator\">&lt;</span>button<span class=\"token operator\">></span>next<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span></span>      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The component state is in the instance variable <code class=\"language-text\">this.state</code>.\nThe state is an object having two properties:</p>\n<ol>\n<li><code class=\"language-text\">this.state.jokes</code> is the list of jokes</li>\n<li><code class=\"language-text\">this.state.current</code> is the index of the currently-shown joke.</li>\n</ol>\n<p>In Functional components, <em>the right place for fetching data from a server is inside an <a href=\"https://react.dev/reference/react/useEffect\"><strong>effect hook</strong></a></em>,\nwhich is executed when a component renders or less frequently if necessary, e.g. only in combination with the first render.</p>\n<p>The <a href=\"https://react.dev/reference/react/Component#adding-lifecycle-methods-to-a-class-component\"><em>lifecycle methods</em></a> of Class Components offer corresponding functionality.\nThe correct place to trigger the fetching of data from a server is inside the lifecycle method\n<a href=\"https://react.dev/reference/react/Component#componentdidmount\"><code class=\"language-text\">componentDidMount</code></a>,\nwhich is executed once right after the first time a component renders:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">App</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      jokes<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      current<span class=\"token operator\">:</span> <span class=\"token number\">0</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token function-variable function\">componentDidMount</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    axios<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http://localhost:3001/jokes'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> jokes<span class=\"token operator\">:</span> response<span class=\"token punctuation\">.</span>data <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span></span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The callback function of the HTTP request updates the component state using the method <a href=\"https://react.dev/reference/react/Component#setstate\"><code class=\"language-text\">setState</code></a>.\nThe method only touches the keys that have been defined in the object passed to the method as an argument.\nThe value for the key <code class=\"language-text\">current</code> remains unchanged.</p>\n<p>Calling the method <em><code class=\"language-text\">setState</code> always triggers the rerender of the Class Component</em>, i.e. calling the method <code class=\"language-text\">render</code>.</p>\n<p>We'll finish off the component with the ability to change the shown joke.\nThe following is the code for the entire component with the addition highlighted:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">App</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      jokes<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      current<span class=\"token operator\">:</span> <span class=\"token number\">0</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function-variable function\">componentDidMount</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    axios<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http://localhost:3001/jokes'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> jokes<span class=\"token operator\">:</span> response<span class=\"token punctuation\">.</span>data <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token function-variable function\">handleClick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">const</span> current <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>jokes<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> current <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span></span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>jokes<span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>no jokes<span class=\"token operator\">...</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span>joke <span class=\"token keyword\">of</span> the day<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>jokes<span class=\"token punctuation\">[</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n<span class=\"gatsby-highlight-code-line\">        <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleClick<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>next<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span></span>      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>For comparison, here is the same application as a Functional component:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>jokes<span class=\"token punctuation\">,</span> setJokes<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>current<span class=\"token punctuation\">,</span> setCurrent<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span><span class=\"token punctuation\">{</span>\n    axios<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http://localhost:3001/jokes'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">setJokes</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleClick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setCurrent</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> jokes<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>jokes<span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>no jokes<span class=\"token operator\">...</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span>joke <span class=\"token keyword\">of</span> the day<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>jokes<span class=\"token punctuation\">[</span>current<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>handleClick<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>next<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>In the case of our example, the differences were minor.\nThe main differences are highlighted in this table.</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Feature</th>\n<th align=\"left\">State components</th>\n<th align=\"left\">Functional Components</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">What is the state?</td>\n<td align=\"left\">single object</td>\n<td align=\"left\">multiple variables that each have a <code class=\"language-text\">useState</code></td>\n</tr>\n<tr>\n<td align=\"left\">How's it updated?</td>\n<td align=\"left\">via <code class=\"language-text\">setState</code></td>\n<td align=\"left\">via their separate <code class=\"language-text\">setXXXX</code> methods</td>\n</tr>\n<tr>\n<td align=\"left\">side effects?</td>\n<td align=\"left\">lifecycle methods</td>\n<td align=\"left\">various effect hooks</td>\n</tr>\n</tbody>\n</table>\n<p>In some more advanced use cases, the effect hook offers a considerably better mechanism for controlling side effects compared to the lifecycle methods of Class Components.</p>\n<p>A notable benefit of using Functional components is not having to deal with the self-referencing <code class=\"language-text\">this</code> reference of the Javascript class.</p>\n<p>Class Components arguably offer little benefit over Functional components enhanced with hooks,\nexcept for the so-called <a href=\"https://react.dev/reference/react/Component#catching-rendering-errors-with-an-error-boundary\">error boundary</a> mechanism,\nwhich currently (5th February 2023) isn't yet in use by functional components.</p>\n<p>When writing fresh code, <a href=\"https://reactjs.org/docs/hooks-faq.html#should-i-use-hooks-classes-or-a-mix-of-both\">React encourages us to switch to hooks</a>\nif the project is using React with a version number 16.8 or greater.\nOn the other hand, <a href=\"https://reactjs.org/docs/hooks-faq.html#do-i-need-to-rewrite-all-my-class-components\">there is currently no need to rewrite all old React code</a> as Functional components.</p>\n<h3>Organization of code in React application</h3>\n<p>In most applications, we followed the principle by which:</p>\n<ul>\n<li>components were placed in the directory <em>components</em>,</li>\n<li>reducers were placed in the directory <em>reducers</em>,</li>\n<li>the code responsible for communicating with the server was placed in the directory <em>services</em>.</li>\n</ul>\n<p>This way of organizing fits a smaller application just fine, but as the amount of components increases, better solutions are needed.\nThere is no one correct way to organize a project.\nThe article\n<a href=\"https://medium.com/hackernoon/the-100-correct-way-to-structure-a-react-app-or-why-theres-no-such-thing-3ede534ef1ed\">The 100% correct way to structure a React app (or why there’s no such thing)</a>\nprovides some perspective on the issue.</p>\n<h3>Frontend and backend in the same repository</h3>\n<p>During the course, we have created the frontend and backend into separate repositories.\nThis is a very typical approach.\nHowever, we did the deployment by <a href=\"/part3/deploying_app_to_internet#serving-static-files-from-the-backend\">copying</a> the bundled frontend code into the backend repository.\nA potentially better approach would have been to deploy the frontend code separately.</p>\n<p>Sometimes, there may be a situation where the entire application is to be put into a single repository.\nIn this case, a common approach is to put the <em>package.json</em> and <em>webpack.config.js</em> in the root directory,\nas well as <em>place the frontend and backend code into their own directories</em>, e.g. <em>client</em> and <em>server</em>.</p>\n<p><a href=\"https://github.com/comp227/create-app\">This repository</a> provides one possible starting point for the organization of \"single repository code\".</p>\n<h3>Changes on the server</h3>\n<p>If there are changes in the state on the server, e.g. when new shows are recommended by other users on the watchlist service,\nthe React frontend we implemented during this course will not notice these changes until the page reloads.\nA similar situation arises when the frontend triggers a time-consuming computation in the backend.\n<strong><em>How do we reflect the results of the computation to the frontend?</em></strong></p>\n<p>One way is to execute <a href=\"https://en.wikipedia.org/wiki/Polling_(computer_science)\"><strong>polling</strong></a> on the frontend,\nmeaning repeated requests to the backend API e.g. using the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/setInterval\"><code class=\"language-text\">setInterval</code></a> command.</p>\n<p>A more sophisticated way is to use <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API\"><strong>WebSockets</strong></a>\nwhich establish a two-way communication channel between the browser and the server.\nWith Websockets, the browser does not need to poll the backend.\nInstead the browser defines callback functions for when the server sends data about updating its state.</p>\n<p>WebSockets is an API provided by the browser, which has a fairly good adoption rate at this point:</p>\n<picture><img src=\"/static/dcee38930f55c2673e11f9e6953fbc42/5a190/31ea.png\" alt=\"caniuse chart showing websockets not usable by all yet\" srcset=\"/static/dcee38930f55c2673e11f9e6953fbc42/772e8/31ea.png 200w,\n/static/dcee38930f55c2673e11f9e6953fbc42/e17e5/31ea.png 400w,\n/static/dcee38930f55c2673e11f9e6953fbc42/5a190/31ea.png 800w,\n/static/dcee38930f55c2673e11f9e6953fbc42/c1b63/31ea.png 1200w,\n/static/dcee38930f55c2673e11f9e6953fbc42/29007/31ea.png 1600w,\n/static/dcee38930f55c2673e11f9e6953fbc42/019a6/31ea.png 1818w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>To cover all browsers, instead of directly using the WebSocket API, one could use the <a href=\"https://socket.io/\">Socket.io</a> library,\nwhich provides various <strong>fallback</strong> options in case the browser does not have full support for WebSockets.</p>\n<h3>Virtual DOM</h3>\n<p>The concept of the Virtual DOM often comes up when discussing React.\nWhat is it all about? As mentioned in <a href=\"/part0/fundamentals_of_web_apps#document-object-model-or-dom\">part 0</a>,\nbrowsers provide a <a href=\"https://developer.mozilla.org/fi/docs/DOM\">DOM API</a>\nthrough which the JavaScript running in the browser can modify the elements defining the appearance of the page.</p>\n<p>When a software developer uses React, they rarely manipulate the DOM.\nThe function defining the React component returns a set of <a href=\"https://reactjs.org/docs/glossary.html#elements\">React elements</a>.\nAlthough some of the elements look like normal HTML elements</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> element <span class=\"token operator\">=</span> <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span>Hello<span class=\"token punctuation\">,</span> world<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span></code></pre></div>\n<p>they are also just JavaScript-based React elements at their core.</p>\n<p>The React elements defining the appearance of the components of the application make up the\n<a href=\"https://reactjs.org/docs/faq-internals.html#what-is-the-virtual-dom\">Virtual DOM</a>,\nwhich is stored in system memory during runtime.</p>\n<p>With the help of the <a href=\"https://react.dev/reference/react-dom\">ReactDOM</a> library,\nthe virtual DOM defined by the components is rendered to a real DOM that can be shown by the browser via the DOM API:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">createRoot</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>App <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>When the state of the application changes, a <strong><em>new virtual DOM gets defined by the components</em></strong>.\nReact has the previous version of the virtual DOM in memory and instead of directly rendering the new virtual DOM using the DOM API,\n<em>React computes the optimal way to update the DOM</em> (remove, add or modify elements in the DOM) such that the DOM reflects the new virtual DOM.</p>\n<h3>On the role of React in applications</h3>\n<p>In the material, we may not have put enough emphasis on the fact that <em>React is primarily a library for managing the creation of views for an application</em>.\nIn a traditional\n<a href=\"https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller\">Model View Controller pattern</a>\nReact would be a <strong>View</strong>.\nReact has a more narrow area of application than e.g. <a href=\"https://angular.io/\">Angular</a>,\nwhich is an all-encompassing Frontend MVC framework.\nTherefore, React is not called a <em>framework</em>, but a <strong>library</strong>.</p>\n<p>In small applications, data handled by the application is stored in the state of the React components, so in this scenario,\nthe state of the components can be thought of as <strong>models</strong> of an MVC architecture.</p>\n<p>However, MVC architecture is not usually mentioned when talking about React applications.\nFurthermore, if we are using Redux, then our applications follow the <a href=\"https://facebook.github.io/flux/docs/in-depth-overview\">Flux</a> architecture\nand the role of React is even more focused on creating the views.\nThe business logic of the application is handled using the Redux state and its action creators.\nIf we're using <a href=\"/part6/communicating_with_a_server_in_a_redux_application#asynchronous-actions-and-redux-thunk\">Redux Thunk</a> familiar from part 6,\nthen the business logic can be almost completely separated from the React code.</p>\n<p>Because both React and <a href=\"https://facebook.github.io/flux/docs/in-depth-overview\">Flux</a> were created at Facebook,\none could say that using React only as a UI library is the intended use case, with Flux taking care of the logic.</p>\n<blockquote>\n<p>Keep in mind that the Flux architecture adds some overhead to the application.\nSo if we're making a small application or prototype,\nit's ok to use just React, since <a href=\"https://en.wikipedia.org/wiki/Overengineering\">over-engineering</a> rarely yields an optimal result.</p>\n</blockquote>\n<p><a href=\"/part6/react_query_use_reducer_and_the_context\">Part 6</a> covers the newer trends of state management in React.\nReact's hook functions <code class=\"language-text\">useReducer</code> and <code class=\"language-text\">useContext</code> provide a kind of lightweight version of Redux.\n<strong><em>React Query</em></strong>, on the other hand, is a library that solves many of the problems associated with handling state on the server,\neliminating the need for a React application to store data retrieved from the server directly in the frontend state.</p>\n<h3>React/node-application security</h3>\n<p>So far during the course, we have not touched on information security much.\nUnfortunately we don't have the space to give it its proper coverage in this course.\nNonetheless, there are other courses here at Pacific and other MOOC courses like <a href=\"https://cybersecuritybase.mooc.fi/module-2.1\">Securing Software</a> for this important topic.</p>\n<p>We will, however, take a look now at some security topics that relate to COMP 227.</p>\n<p>The Open Web Application Security Project, otherwise known as <a href=\"https://www.owasp.org\">OWASP</a>,\npublishes an annual list of the most common security risks in Web applications.\nThe most recent list can be found <a href=\"https://owasp.org/www-project-top-ten/\">here</a>.\nThe same risks can be found from one year to another.\nLet's review a couple of these threats.</p>\n<h4>Security Threat - Injection</h4>\n<p>Near the top of the list, we find <strong>injection</strong>,\nwhich means that e.g. text sent using a form in an application is interpreted completely differently than the software developer had intended.\nThe most famous type of injection is probably <a href=\"https://bobby-tables.com\">SQL injection</a>.</p>\n<p><img src=\"https://imgs.xkcd.com/comics/exploits_of_a_mom.png\" alt=\"xkcd bobby tables comic\">\n<em>From <a href=\"https://xkcd.com/327/\">xkcd</a></em></p>\n<p>In case you haven't seen many of the (great explanations out there) [https://www.explainxkcd.com/wiki/index.php/Little<em>Bobby</em>Tables],\nlet's review.\nImagine you have some form and you have this query for searching users.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> query <span class=\"token operator\">=</span> <span class=\"token string\">\"SELECT * FROM Users WHERE name = '\"</span> <span class=\"token operator\">+</span> userName <span class=\"token operator\">+</span> <span class=\"token string\">\"';\"</span></code></pre></div>\n<p>Now pretend our mischievous Powercat came in and typed this in your form.</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">Powercat'<span class=\"token punctuation\">;</span> DROP TABLE Users<span class=\"token punctuation\">;</span> --</code></pre></div>\n<p>so that the name would contain a single quote <code class=\"language-text\">&#39;</code>, which is the beginning and end character of a SQL string.\nAs a result of this, two SQL operations would be executed, the second of which would destroy the database table <code class=\"language-text\">Users</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> Users <span class=\"token keyword\">WHERE</span> name <span class=\"token operator\">=</span> <span class=\"token string\">'Powercat'</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">DROP</span> <span class=\"token keyword\">TABLE</span> Users<span class=\"token punctuation\">;</span> <span class=\"token comment\">--'</span></code></pre></div>\n<p>SQL injections can be prevented using <a href=\"https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html#defense-option-1-prepared-statements-with-parameterized-queries\">parameterized queries</a>.\nWith them, user input isn't mixed with the SQL query, but the database itself inserts the input values at placeholders in the query (usually <code class=\"language-text\">?</code>).</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SELECT * FROM Users WHERE name = ?\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>userName<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Injection attacks are also possible in NoSQL databases.\nHowever, mongoose helps by <a href=\"https://zanon.io/posts/nosql-injection-in-mongodb\">sanitizing</a> the queries.\nMore on the topic can be found e.g. <a href=\"https://blog.websecurify.com/2014/08/hacking-nodejs-and-mongodb\">here</a>.</p>\n<h4>Security Threat - XSS</h4>\n<p><strong>Cross-site scripting (XSS)</strong> is an attack where it is possible to inject malicious JavaScript code into a legitimate web application.\nThe malicious code would then be executed in the browser of the victim.\nIf we try to inject the following into e.g. our initial demo application:</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n  <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Evil XSS attack'</span><span class=\"token punctuation\">)</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>the code is not executed, but is only rendered as 'text' on the page:</p>\n<picture><img src=\"/static/06e70ee9d016a0b2a7a8c99049251d74/5a190/32e.png\" alt=\"browser showing tasks with XSS attempt\" srcset=\"/static/06e70ee9d016a0b2a7a8c99049251d74/772e8/32e.png 200w,\n/static/06e70ee9d016a0b2a7a8c99049251d74/e17e5/32e.png 400w,\n/static/06e70ee9d016a0b2a7a8c99049251d74/5a190/32e.png 800w,\n/static/06e70ee9d016a0b2a7a8c99049251d74/46e51/32e.png 1003w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>since React <a href=\"https://reactjs.org/docs/introducing-jsx.html#jsx-prevents-injection-attacks\">takes care of sanitizing data in variables</a>.\nSome versions of React <a href=\"https://medium.com/dailyjs/exploiting-script-injection-flaws-in-reactjs-883fb1fe36c1\">have been vulnerable</a> to XSS attacks.\nThe security holes have of course been patched, but there is no guarantee that there couldn't be anymore.</p>\n<p>One needs to remain vigilant when using libraries; if there are security updates to those libraries, it is advisable to update those libraries in one's applications.\nI would also recommend that you continue updating node.\nWhile we did not start that here, this is a good reason for using nvm, since we can more easily make the switch.\nSecurity updates for Express are found in the <a href=\"https://expressjs.com/en/advanced/security-updates.html\">library's documentation</a>\nand the ones for Node are found in <a href=\"https://nodejs.org/en/blog/\">this blog</a>.</p>\n<p>You can check how up-to-date your dependencies are using the command</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> outdated --depth <span class=\"token number\">0</span></code></pre></div>\n<p>A one-year-old project that is used in <a href=\"/part8\">part 8</a> of this course already has quite a few outdated dependencies:</p>\n<picture><img src=\"/static/0a26762f9c813da92db751bf9368f3fc/5a190/33x.png\" alt=\"npm outdated output of patientia\" srcset=\"/static/0a26762f9c813da92db751bf9368f3fc/772e8/33x.png 200w,\n/static/0a26762f9c813da92db751bf9368f3fc/e17e5/33x.png 400w,\n/static/0a26762f9c813da92db751bf9368f3fc/5a190/33x.png 800w,\n/static/0a26762f9c813da92db751bf9368f3fc/c1b63/33x.png 1200w,\n/static/0a26762f9c813da92db751bf9368f3fc/29007/33x.png 1600w,\n/static/0a26762f9c813da92db751bf9368f3fc/5c684/33x.png 1829w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>The dependencies can be brought up to date by updating the file <em>package.json</em>.\nThe best way to do that is by using a tool called <strong><em>npm-check-updates</em></strong>.\nIt can be installed globally by running the command:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> i -g npm-check-updates</code></pre></div>\n<p>Using this tool, the up-to-dateness of dependencies is checked in the following way:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ npm-check-updates\nChecking <span class=\"token punctuation\">..</span>.<span class=\"token punctuation\">\\</span>ultimate-hooks<span class=\"token punctuation\">\\</span>package.json\n<span class=\"token punctuation\">[</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token punctuation\">]</span> <span class=\"token number\">9</span>/9 <span class=\"token number\">100</span>%\n\n @testing-library/react       ^13.0.0  →  ^13.1.1\n @testing-library/user-event  ^14.0.4  →  ^14.1.1\n react-scripts                  <span class=\"token number\">5.0</span>.0  →    <span class=\"token number\">5.0</span>.1\n\nRun ncu -u to upgrade package.json</code></pre></div>\n<p>The file <em>package.json</em> is brought up to date by running the command <code class=\"language-text\">ncu -u</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ ncu -u\nUpgrading <span class=\"token punctuation\">..</span>.<span class=\"token punctuation\">\\</span>ultimate-hooks<span class=\"token punctuation\">\\</span>package.json\n<span class=\"token punctuation\">[</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token punctuation\">]</span> <span class=\"token number\">9</span>/9 <span class=\"token number\">100</span>%\n\n @testing-library/react       ^13.0.0  →  ^13.1.1\n @testing-library/user-event  ^14.0.4  →  ^14.1.1\n react-scripts                  <span class=\"token number\">5.0</span>.0  →    <span class=\"token number\">5.0</span>.1\n\nRun <span class=\"token function\">npm</span> <span class=\"token function\">install</span> to <span class=\"token function\">install</span> new versions.</code></pre></div>\n<p>Then it is time to update the dependencies by running the command <code class=\"language-text\">npm install</code>.\nHowever, old versions of the dependencies are not necessarily a security risk.</p>\n<p>The npm <a href=\"https://docs.npmjs.com/cli/audit\">audit</a> command can be used to check the security of dependencies.\nIt compares the version numbers of the dependencies in your application to a list of the version numbers of dependencies containing known security threats in a centralized error database.</p>\n<p>Running <code class=\"language-text\">npm audit</code> on the same project prints a long list of complaints and suggested fixes.\nBelow is a part of the report:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">$ patientia npm audit\n\n<span class=\"token operator\">...</span> many lines removed <span class=\"token operator\">...</span>\n\nminimatch  <span class=\"token operator\">&lt;</span><span class=\"token number\">3.0</span><span class=\"token number\">.5</span>\nSeverity<span class=\"token operator\">:</span> high\nminimatch ReDoS vulnerability <span class=\"token operator\">-</span> https<span class=\"token operator\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>github<span class=\"token punctuation\">.</span>com<span class=\"token operator\">/</span>advisories<span class=\"token operator\">/</span><span class=\"token constant\">GHSA</span><span class=\"token operator\">-</span>f8q6<span class=\"token operator\">-</span>p94x<span class=\"token operator\">-</span><span class=\"token number\">37</span>v3\nfix available via <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">npm audit fix</span><span class=\"token template-punctuation string\">`</span></span>\nnode_modules<span class=\"token operator\">/</span>recursive<span class=\"token operator\">-</span>readdir<span class=\"token operator\">/</span>node_modules<span class=\"token operator\">/</span>minimatch\n  recursive<span class=\"token operator\">-</span>readdir  <span class=\"token number\">1.2</span><span class=\"token number\">.0</span> <span class=\"token operator\">-</span> <span class=\"token number\">2.2</span><span class=\"token number\">.2</span>\n  Depends on vulnerable versions <span class=\"token keyword\">of</span> minimatch\n  node_modules<span class=\"token operator\">/</span>recursive<span class=\"token operator\">-</span>readdir\n\nterser  <span class=\"token number\">5.0</span><span class=\"token number\">.0</span> <span class=\"token operator\">-</span> <span class=\"token number\">5.14</span><span class=\"token number\">.1</span>\nSeverity<span class=\"token operator\">:</span> high\nTerser insecure use <span class=\"token keyword\">of</span> regular expressions before v4<span class=\"token punctuation\">.</span><span class=\"token number\">8.1</span> and v5<span class=\"token punctuation\">.</span><span class=\"token number\">14.2</span> leads to ReDoS <span class=\"token operator\">-</span> https<span class=\"token operator\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>github<span class=\"token punctuation\">.</span>com<span class=\"token operator\">/</span>advisories<span class=\"token operator\">/</span><span class=\"token constant\">GHSA</span><span class=\"token operator\">-</span><span class=\"token number\">4</span>wf5<span class=\"token operator\">-</span>vphf<span class=\"token operator\">-</span>c2xc\nfix available via <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">npm audit fix</span><span class=\"token template-punctuation string\">`</span></span>\nnode_modules<span class=\"token operator\">/</span>terser\n\n<span class=\"token number\">14</span> <span class=\"token function\">vulnerabilities</span> <span class=\"token punctuation\">(</span><span class=\"token number\">13</span> high<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span> critical<span class=\"token punctuation\">)</span>\n\n\nTo address issues that <span class=\"token keyword\">do</span> not require attention<span class=\"token punctuation\">,</span> run<span class=\"token operator\">:</span>\n  npm audit fix\n\nTo address all <span class=\"token function\">issues</span> <span class=\"token punctuation\">(</span>including breaking changes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> run<span class=\"token operator\">:</span>\n  npm audit fix <span class=\"token operator\">--</span>force</code></pre></div>\n<p>After only one year, the code is full of small security threats.\nLuckily, there are only 2 critical threats.\nLet's run <code class=\"language-text\">npm audit fix</code> as the report suggests:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">$ npm audit fix\n\nadded <span class=\"token number\">9</span> packages<span class=\"token punctuation\">,</span> removed <span class=\"token number\">2</span> packages<span class=\"token punctuation\">,</span> changed <span class=\"token number\">31</span> packages<span class=\"token punctuation\">,</span> and audited <span class=\"token number\">1345</span> packages <span class=\"token keyword\">in</span> <span class=\"token number\">4</span>s\n<span class=\"token comment\">// many lines removed</span>\n\n<span class=\"token number\">6</span> high severity vulnerabilities\n\nTo address all <span class=\"token function\">issues</span> <span class=\"token punctuation\">(</span>including breaking changes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> run<span class=\"token operator\">:</span>\n  npm audit fix <span class=\"token operator\">--</span>force</code></pre></div>\n<p>6 threats remain because, by default, <code class=\"language-text\">audit fix</code> does not update dependencies if their <strong><em>major</em></strong> version number has increased.\nUpdating these dependencies could lead to the whole application breaking down.</p>\n<p>The source for the critical bug is the library <a href=\"https://www.npmjs.com/package/nth-check\">nth-check</a></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">nth<span class=\"token operator\">-</span>check  <span class=\"token operator\">&lt;</span><span class=\"token number\">2.0</span><span class=\"token number\">.1</span>\nSeverity<span class=\"token operator\">:</span> high\nInefficient Regular Expression Complexity <span class=\"token keyword\">in</span> nth<span class=\"token operator\">-</span>check <span class=\"token operator\">-</span> https<span class=\"token operator\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>github<span class=\"token punctuation\">.</span>com<span class=\"token operator\">/</span>advisories<span class=\"token operator\">/</span><span class=\"token constant\">GHSA</span><span class=\"token operator\">-</span>rp65<span class=\"token operator\">-</span><span class=\"token number\">9</span>cf3<span class=\"token operator\">-</span>cjxr\nfix available via <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">npm audit fix --force</span><span class=\"token template-punctuation string\">`</span></span>\nWill install react<span class=\"token operator\">-</span>scripts@<span class=\"token number\">2.1</span><span class=\"token number\">.3</span><span class=\"token punctuation\">,</span> which is a breaking change</code></pre></div>\n<p>Running <code class=\"language-text\">npm audit fix --force</code> would upgrade the library version but would also upgrade the library <em>react-scripts</em>.\nThat could potentially break down our development environment, and could lead us into dependency hell.\nAnother package manager that I think does a better job with managing securities and updates is <a href=\"https://yarnpkg.com/\">yarn</a>, and in a future course revision we may use it.\nHowever, for now, we will leave the library upgrades for later...</p>\n<h4>Security Threat - Broken Authentication/Access Control</h4>\n<p>Two of the threats mentioned in the list from OWASP are:</p>\n<ul>\n<li><strong>Identification and Authentication Failures <em>(Broken Authentication)</em></strong></li>\n<li><strong>Broken Access Control</strong> (related)</li>\n</ul>\n<p>The token-based authentication we have been using is fairly robust if the application is being used on the traffic-encrypting HTTPS protocol.\nWhen implementing access control, one should e.g. remember to not only check a user's identity in the browser but also on the server.\nBad security would be to prevent some actions to be taken only by hiding the execution options in the code of the browser.</p>\n<p>On Mozilla's MDN, there is a very good <a href=\"https://developer.mozilla.org/en-US/docs/Learn/Server-side/First_steps/Website_security\">Website security guide</a>,\nwhich brings up this very important topic:</p>\n<picture><img src=\"/static/3e3f58e072c2b3fc15968380025b60ed/5a190/34.png\" alt=\"screenshot of website security from MDN\" srcset=\"/static/3e3f58e072c2b3fc15968380025b60ed/772e8/34.png 200w,\n/static/3e3f58e072c2b3fc15968380025b60ed/e17e5/34.png 400w,\n/static/3e3f58e072c2b3fc15968380025b60ed/5a190/34.png 800w,\n/static/3e3f58e072c2b3fc15968380025b60ed/024d6/34.png 961w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>The documentation for Express includes a section on security:\n<a href=\"https://expressjs.com/en/advanced/best-practice-security.html\">Production Best Practices: Security</a>, which is worth a read.\nIt is also recommended to add a library called <a href=\"https://helmetjs.github.io/\">Helmet</a> to the backend.\nIt includes a set of middleware that eliminates some security vulnerabilities in Express applications.</p>\n<p>Using the ESlint <a href=\"https://github.com/nodesecurity/eslint-plugin-security\">security-plugin</a> is also worth doing.</p>\n<h3>Current trends</h3>\n<p>Finally, let's take a look at some technology of tomorrow (or, actually, already today),\nand the directions in which Web development is heading.</p>\n<h4>Typed versions of JavaScript</h4>\n<p>Sometimes, the <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Dynamic_typing\">dynamic typing</a> of JavaScript variables creates annoying bugs.\nIn part 5, we talked briefly about <a href=\"/part5/props_children_and_proptypes#prop-types\">PropTypes</a>:\na mechanism which allows one to enforce type-checking for props passed to React components.</p>\n<p>Lately, there has been a notable uplift in the interest in <a href=\"https://en.wikipedia.org/wiki/Type_system#Static_type_checking\">static type checking</a>.\nAt the moment, the most popular typed version of Javascript is <a href=\"https://www.typescriptlang.org/\">Typescript</a> which has been developed by Microsoft.\nTypescript is covered in <a href=\"/part8\">part 8</a>.</p>\n<h4>Server-side rendering, isomorphic applications and universal code</h4>\n<p>The browser is not the only domain where components defined using React can be rendered.\nThe rendering can also be done on the <a href=\"https://react.dev/reference/react-dom/server\">server</a>.\nThis kind of approach is increasingly being used, such that,\nwhen accessing the application for the first time, the server serves a pre-rendered page made with React.\nFrom here onwards, the operation of the application continues, as usual,\nmeaning the browser executes React, which manipulates the DOM shown by the browser.\nThe rendering that is done on the server goes by the name: <strong>server-side rendering</strong>.</p>\n<p>One motivation for server-side rendering is Search Engine Optimization (SEO).\nSearch engines have traditionally been very bad at recognizing JavaScript-rendered content.\nHowever, the situation remains fluid and ever-changing.\nIf you're interested, take a look at <a href=\"https://www.javascriptstuff.com/react-seo/\">this</a>\nand <a href=\"https://medium.freecodecamp.org/seo-vs-react-is-it-neccessary-to-render-react-pages-in-the-backend-74ce5015c0c9\">this</a>.</p>\n<p>Of course, server-side rendering is not anything specific to React or even JavaScript.\nUsing the same programming language throughout the stack in theory simplifies the execution of the concept because the same code can be run on both the front and backend.</p>\n<p>Along with server-side rendering, there has been talk of so-called <strong>isomorphic applications</strong> and <strong>universal code</strong>,\nalthough there has been some debate about their definitions.\nAccording to some <a href=\"https://medium.com/@ghengeveld/isomorphism-vs-universal-javascript-4b47fb481beb\">definitions</a>,\nan isomorphic web application performs rendering on both frontend and backend.\nOn the other hand, universal code is code that can be executed in most environments, meaning both frontend and backend.</p>\n<p>React and Node provide a desirable option for implementing an isomorphic application as universal code.</p>\n<p>Writing universal code directly using React is currently still pretty cumbersome.\nLately, a library called <a href=\"https://github.com/vercel/next.js\">Next.js</a>,\nwhich is implemented on top of React, has garnered some attention and is an option for making universal applications.</p>\n<h4>Progressive web apps</h4>\n<p>Lately, people have started using the term <a href=\"https://developers.google.com/web/progressive-web-apps/\">progressive web app</a> (PWA) launched by Google.</p>\n<p>In short, we are talking about web applications working as well as possible on every platform and taking advantage of the best parts of those platforms.\nThe smaller screen of mobile devices must not hamper the usability of the application.\nPWAs should also work flawlessly in offline mode or with a slow internet connection.\nOn mobile devices, they must be installable just like any other application.\nAll the network traffic in a PWA should be encrypted.</p>\n<h4>Microservice architecture</h4>\n<p>During this course, we have only scratched the surface of the server end of things.\nIn our applications, we had a <strong>monolithic</strong> backend,\nmeaning one application making up a whole and running on a single server, serving only a few API endpoints.</p>\n<p>As an application grows, the monolithic backend approach starts turning problematic both in terms of performance and maintainability.</p>\n<p>A <a href=\"https://martinfowler.com/articles/microservices.html\">microservice architecture</a> or (<strong>microservices</strong>)\nis a way of composing the backend of an application from many separate, independent services,\nwhich communicate with each other over the network.\nAn individual microservice's purpose is to take care of a particular logical functional whole.\nIn a pure microservice architecture, the services do not use a shared database.</p>\n<p>For example, the watchlist application could consist of two services: one handling the user and another taking care of the shows.\nThe responsibility of the user service would be user registration and user authentication,\nwhile the show service would take care of operations related to the shows.</p>\n<p>The image below visualizes the difference between the structure of an application based on a microservice architecture and one based on a more traditional monolithic structure:</p>\n<p><picture><img src=\"/static/7ac849ef3e3a8e68ea5d75da6701ad55/5a190/36.png\" alt=\"microservices vs traditional approach diagram\" srcset=\"/static/7ac849ef3e3a8e68ea5d75da6701ad55/772e8/36.png 200w,\n/static/7ac849ef3e3a8e68ea5d75da6701ad55/e17e5/36.png 400w,\n/static/7ac849ef3e3a8e68ea5d75da6701ad55/5a190/36.png 800w,\n/static/7ac849ef3e3a8e68ea5d75da6701ad55/1cfc2/36.png 900w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<em>From <a href=\"https://docs.oracle.com/en/solutions/learn-architect-microservice/\">Oracle</a></em></p>\n<p>The role of the frontend does not differ much between the two models.\nThere is often a so-called <a href=\"http://microservices.io/patterns/apigateway\">API gateway</a> between the microservices and the frontend,\nwhich provides an illusion of a more traditional \"everything on the same server\" API.\n<a href=\"https://medium.com/netflix-techblog/optimizing-the-netflix-api-5c9ac715cf19\">Netflix</a>,\namong others, uses this type of approach.</p>\n<p>Microservice architectures emerged and evolved for the needs of large internet-scale applications.\nThe trend was set by Amazon far before the appearance of the term microservice.\n<a href=\"https://nordicapis.com/the-bezos-api-mandate-amazons-manifesto-for-externalization/\">Tech folklore legend</a>\npoint to a critical initial email that folks believe Jeff Bezos sent to all employees in 2002:</p>\n<blockquote>\n<p>All teams will henceforth expose their data and functionality through service interfaces.</p>\n<p>Teams must communicate with each other through these interfaces.</p>\n<p>There will be no other form of inter-process communication allowed:\nno direct linking, no direct reads of another team’s data store, no shared-memory model, no back-doors whatsoever.\nThe only communication allowed is via service interface calls over the network.</p>\n<p>It doesn’t matter what technology you use.</p>\n<p>All service interfaces, without exception, must be designed from the ground up to be externalize-able.\nThat is to say, the team must plan and design to be able to expose the interface to developers in the outside world.</p>\n<p>No exceptions.</p>\n<p>Anyone who doesn’t do this will be fired.\nThank you; have a nice day!</p>\n</blockquote>\n<p>Nowadays, one of the biggest proponents in the use of microservices is <a href=\"https://www.infoq.com/presentations/netflix-chaos-microservices\">Netflix</a>.</p>\n<p>The use of microservices has steadily been gaining hype to be kind of a <a href=\"https://en.wikipedia.org/wiki/No_Silver_Bullet\">silver bullet</a> of today,\nwhich is being offered as a solution to almost every kind of problem.\nHowever, there are several challenges when it comes to applying a microservice architecture,\nand it might make sense to go <a href=\"https://martinfowler.com/bliki/MonolithFirst.html\">monolith first</a> by initially making a traditional all-encompassing backend.\nOr maybe <a href=\"https://martinfowler.com/articles/dont-start-monolith.html\">not</a>.\nThere are a bunch of different opinions on the subject.\nBoth links lead to famous software author Martin Fowler's site;\ns we can see, even the wise are not entirely sure which one of the right ways is more right.</p>\n<p>If you're interested in learning more about microservices, there are a <a href=\"https://www.google.com/search?q=how+to+learn+more+about+microservices+react\">multitude or resources</a>\nout there to help.</p>\n<h4>Serverless</h4>\n<p>After the release of Amazon's <a href=\"https://aws.amazon.com/lambda/\">lambda</a> service at the end of 2014,\na new trend started to emerge in web application development: <a href=\"https://serverless.com/\">serverless</a>.</p>\n<p>The main thing about lambda, and nowadays also Google's <a href=\"https://cloud.google.com/functions/\">Cloud functions</a>\nas well as <a href=\"https://azure.microsoft.com/en-us/services/functions/\">similar functionality in Azure</a>,\nis that it enables <em>the execution of individual functions</em> in the cloud.\nBefore, the smallest executable unit in the cloud was a single <strong>process</strong>, e.g. a runtime environment running a Node backend.</p>\n<p>e.g. Using Amazon's <a href=\"https://aws.amazon.com/api-gateway/\">API gateway</a>\nit is possible to make serverless applications where the requests to the defined HTTP API GET responses come directly from cloud functions.\nUsually, the functions already operate using stored data in the databases of the cloud service.</p>\n<p>Serverless is not about there not being a server in applications, but about how the server is defined.\n<em>Software developers can shift their programming efforts to a higher level of abstraction.</em>\nThere is no longer a need to programmatically define the routing of HTTP requests, database relations, etc.,\nsince the cloud infrastructure provides all of this.\nCloud functions also lend themselves to creating a well-scaling system,\ne.g. Amazon's Lambda can execute a massive amount of cloud functions per second.\nAll of this happens automatically through the infrastructure and there is no need to initiate new servers, etc.</p>\n<h3>Useful libraries and interesting links</h3>\n<p>The JavaScript developer community has produced a large variety of useful libraries.\nIf you are developing anything more substantial, you should check if existing solutions are already available.\nBelow are some recommended libraries.</p>\n<p>If your application has to handle complicated data, <a href=\"https://www.npmjs.com/package/lodash\">lodash</a>,\nwhich we recommended in <a href=\"/part4/structure_of_backend_application_introduction_to_testing#exercises-4-3-4-7\">part 4</a>,\nis a good library to use.\nIf you prefer the functional programming style, you might consider using <a href=\"https://ramdajs.com/\">ramda</a>.</p>\n<p>If you are handling times and dates, <a href=\"https://github.com/date-fns/date-fns\">date-fns</a> offers good tools for that.</p>\n<p>If you have complex forms in your apps, have a look at whether <a href=\"https://react-hook-form.com/\">React Hook Form</a> would be a good fit.\nIf your application displays graphs, there are multiple options to choose from.\nBoth <a href=\"http://recharts.org/en-US/\">recharts</a> and <a href=\"https://github.com/highcharts/highcharts-react\">highcharts</a> are well-recommended.</p>\n<p>The <a href=\"https://github.com/mweststrate/immer\">Immer</a> provides immutable implementations of some data structures.\nThe library could be of use when using Redux, since as we <a href=\"/part6/flux_architecture_and_redux#pure-functions-immutable\">remember</a> in part 6,\nreducers must be pure functions, meaning they must not modify the store's state but instead have to replace it with a new one when a change occurs.</p>\n<p>The <a href=\"https://github.com/mweststrate/immer\">Immer</a> library provides immutable implementations of some data structures.\nThe library could be of use when using Redux,\nsince as we <a href=\"/part6/flux_architecture_and_redux#pure-functions-immutable\">remember</a> in part 6,\nreducers must be pure functions, meaning they must not modify the store's state but instead have to replace it with a new one when a change occurs.</p>\n<p><a href=\"https://redux-saga.js.org/\">Redux-saga</a> provides an alternative way to make asynchronous actions for\n<a href=\"/part6/communicating_with_a_server_in_a_redux_application#asynchronous-actions-and-redux-thunk\">Redux Thunk</a> familiar from part 6.\nSome embrace the hype and like it.\nI'm meh.</p>\n<p>For single-page applications, the gathering of analytics data on the interaction between the users and the page is\n<a href=\"https://developers.google.com/analytics/devguides/collection/gtagjs/single-page-applications\">more challenging</a>\nthan for traditional web applications where the entire page is loaded.\nThe <a href=\"https://github.com/react-ga/react-ga\">React Google Analytics</a> library offers a solution.</p>\n<p>You can take advantage of your React know-how when developing mobile applications using Facebook's extremely popular\n<a href=\"https://facebook.github.io/react-native/\">React Native</a> library, which is the topic of <a href=\"/part9\">part 9</a> of the course.</p>\n<p>When it comes to the tools used for the management and bundling of JavaScript projects, the community has been very fickle.\nBest practices have changed rapidly (the years are approximations):</p>\n<ul>\n<li>2011 <a href=\"https://www.npmjs.com/package/bower\">Bower</a></li>\n<li>2012 <a href=\"https://www.npmjs.com/package/grunt\">Grunt</a></li>\n<li>2013-14 <a href=\"https://www.npmjs.com/package/gulp\">Gulp</a></li>\n<li>2012-14 <a href=\"https://www.npmjs.com/package/browserify\">Browserify</a></li>\n<li>2015- <a href=\"https://www.npmjs.com/package/webpack\">Webpack</a></li>\n<li>2017- <a href=\"https://www.npmjs.com/package/esbuild\">esbuild</a></li>\n</ul>\n<p>Hipsters seem to have lost their interest in tool development after webpack started to dominate the markets.\nA few years ago, <a href=\"https://parceljs.org\">Parcel</a> started to make the rounds marketing itself as simple (which Webpack is not) and faster than Webpack.\nHowever, after a promising start, Parcel has not gathered any steam.</p>\n<p>Recently, <a href=\"https://esbuild.github.io/\">esbuild</a> has been on a relatively high rise and is already seriously challenging Webpack.\nNonetheless for now, Webpack remains popular.</p>\n<p>The site <a href=\"https://reactpatterns.com/\">https://reactpatterns.com/</a> provides a concise list of best practices for React, some of which are already familiar from this course.\nAnother similar list is <a href=\"https://vasanthk.gitbooks.io/react-bits/\">react bits</a>.</p>\n<p><a href=\"https://www.reactiflux.com/\">Reactiflux</a> is a big chat community of React developers on Discord.\nIt could be one possible place to get support after the course has concluded.\nFor example, numerous libraries have their own channels.</p>\n<p>If you know some recommendable links or libraries, make a pull request!</p>\n</div>","frontmatter":{"mainImage":{"publicURL":"/static/2184b1c35920cfc7a09e10660dea04eb/part-7.svg"},"part":7,"letter":"e","lang":"en"}}},"pageContext":{"part":7,"letter":"e","lang":"en"}}}