{"componentChunkName":"component---src-templates-content-template-js","path":"/part7/custom_hooks","result":{"data":{"markdownRemark":{"html":"<div class=\"content\">\n<h3>Hooks</h3>\n<p>React offers 15 different <a href=\"https://react.dev/reference/react\"><strong>built-in hooks</strong></a>,\nof which the most popular ones are the <a href=\"https://react.dev/reference/react/useState\"><code class=\"language-text\">useState</code></a>\nand <a href=\"https://react.dev/reference/react/useEffect\"><code class=\"language-text\">useEffect</code></a>.\nWe have already used both hooks extensively.</p>\n<p>In <a href=\"/part5/props_children_and_proptypes#references-to-components-with-ref\">part 5</a> we used the\n<a href=\"https://react.dev/reference/react/useImperativeHandle\"><code class=\"language-text\">useImperativeHandle</code> hook</a>\nwhich allows components to provide their functions to other components.\nIn <a href=\"/part6/react_query_use_reducer_and_the_contex\">part 6</a> we used\n<a href=\"https://react.dev/reference/react/useReducer\"><code class=\"language-text\">useReducer</code></a> and <a href=\"https://react.dev/reference/react/useContext\"><code class=\"language-text\">useContext</code></a> to implement a Redux-like state management.</p>\n<p>Within the last couple of years, many React libraries have begun to offer hook-based APIs.\n<a href=\"/part6/flux_architecture_and_redux\">In part 6</a> we used the <a href=\"https://react-redux.js.org/api/hooks#useselector\"><code class=\"language-text\">useSelector</code></a>\nand <a href=\"https://react-redux.js.org/api/hooks#usedispatch\"><code class=\"language-text\">useDispatch</code></a>\nhooks from the react-redux library to share our redux-store and dispatch function to our components.</p>\n<p>The <a href=\"https://reactrouter.com/en/main/start/tutorial\">React Router's API</a> that we introduced in the\n<a href=\"/part7/react_router\">previous part</a> is also partially <strong><em>hook-based</em></strong>.\nIts hooks can be used to access URL parameters and the <code class=\"language-text\">navigation</code> object, which allows for manipulating the browser URL programmatically.</p>\n<p>As mentioned in <a href=\"/part1/a_more_complex_state_debugging_react_apps#rules-of-hooks\">part 1</a>,\nhooks are not normal functions, and when using those we have to adhere to certain <a href=\"https://react.dev/warnings/invalid-hook-call-warning\">rules or limitations</a>.\nLet's recap the rules of using hooks, copied verbatim from the official React documentation:</p>\n<blockquote>\n<p><strong>Donâ€™t call Hooks inside loops, conditions, or nested functions.</strong>\nInstead, always use Hooks at the top level of your React function, before any early returns.\nYou can only call Hooks while React is rendering a function component.</p>\n<ul>\n<li>âœ… Call them at the top level in the body of a <a href=\"https://react.dev/learn/your-first-component\">function component</a>.</li>\n<li>âœ… Call them at the top level in the body of a <a href=\"https://react.dev/learn/reusing-logic-with-custom-hooks\">custom Hook</a>\n...</li>\n</ul>\n<p>Itâ€™s not supported to call Hooks (functions starting with use) in any other cases, for example:</p>\n<ul>\n<li>ðŸ”´ Do not call Hooks inside conditions or loops.</li>\n<li>ðŸ”´ Do not call Hooks after a conditional return statement.</li>\n<li>ðŸ”´ Do not call Hooks in event handlers.</li>\n<li>ðŸ”´ Do not call Hooks in class components.</li>\n<li>ðŸ”´ Do not call Hooks inside functions passed to useMemo, useReducer, or useEffect.</li>\n</ul>\n</blockquote>\n<p>There's an existing <a href=\"https://www.npmjs.com/package/eslint-plugin-react-hooks\">ESlint</a> rule that can be used to verify that the application uses hooks correctly.</p>\n<p>To use <a href=\"https://github.com/vitejs/vite/discussions/5788\">this rule with vite</a>, make sure you install the rule and plugin in your project.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> i -D eslint eslint-plugin-react-hooks</code></pre></div>\n<p>You'll also want to add this rule to your <em>package.json</em></p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">//...</span>\n  <span class=\"token property\">\"eslintConfig\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"extends\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"plugin:react-hooks/recommended\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Once the rule is configured, the <em>react-hooks</em> rule will complain if hooks are used incorrectly.</p>\n<picture><img src=\"/static/f1122bd9e07693529df66b6e8acf9e9a/5a190/60ea.png\" alt=\"vscode error useState being called conditionally\" srcset=\"/static/f1122bd9e07693529df66b6e8acf9e9a/772e8/60ea.png 200w,\n/static/f1122bd9e07693529df66b6e8acf9e9a/e17e5/60ea.png 400w,\n/static/f1122bd9e07693529df66b6e8acf9e9a/5a190/60ea.png 800w,\n/static/f1122bd9e07693529df66b6e8acf9e9a/c1b63/60ea.png 1200w,\n/static/f1122bd9e07693529df66b6e8acf9e9a/67a79/60ea.png 1408w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>If you do not see such an error here, then make sure that you have turned on <strong><em>Automatic ESLint configuration</em></strong> in <strong><em>File->New Projects Setup->Settings for New Projects</em></strong>.</p>\n<h3>Custom hooks</h3>\n<p>React offers the option to create <a href=\"https://react.dev/learn/reusing-logic-with-custom-hooks\">custom hooks</a>.\nAccording to React:</p>\n<blockquote>\n<p><em>Building your own Hooks lets you extract component logic into reusable functions.</em></p>\n</blockquote>\n<p><strong>Custom hooks</strong> are regular JavaScript functions that can use any other hooks,\nas long as they adhere to the <a href=\"/part1/a_more_complex_state_debugging_react_apps#rules-of-hooks\">rules of hooks</a>.\nAdditionally, the name of custom hooks must start with the word <code class=\"language-text\">use</code>.</p>\n<p>We implemented a counter application in <a href=\"/part1/component_state_event_handlers#event-handling\">part 1</a> that can have its value incremented, decremented, or reset.\nThe code of the application is as follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useState <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>counter<span class=\"token punctuation\">,</span> setCounter<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>counter<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setCounter</span><span class=\"token punctuation\">(</span>counter <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n        plus\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setCounter</span><span class=\"token punctuation\">(</span>counter <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n        minus\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>      \n      <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setCounter</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n        zero\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Let's extract the <em>counter logic into a custom hook</em>.\nThe code for the hook is as follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">useCounter</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>value<span class=\"token punctuation\">,</span> setValue<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">increase</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setValue</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">decrease</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setValue</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">zero</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setValue</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    value<span class=\"token punctuation\">,</span> \n    increase<span class=\"token punctuation\">,</span>\n    decrease<span class=\"token punctuation\">,</span>\n    zero\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Our custom hook uses the <code class=\"language-text\">useState</code> hook internally to create its state.\nThe hook returns an object, the properties of which include the value of the counter as well as functions for manipulating the value.</p>\n<p>React components can use the hook as shown below:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> counter <span class=\"token operator\">=</span> <span class=\"token function\">useCounter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>counter<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>counter<span class=\"token punctuation\">.</span>increase<span class=\"token punctuation\">}</span><span class=\"token operator\">></span></span>        plus\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>counter<span class=\"token punctuation\">.</span>decrease<span class=\"token punctuation\">}</span><span class=\"token operator\">></span></span>        minus\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>      \n<span class=\"gatsby-highlight-code-line\">      <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>counter<span class=\"token punctuation\">.</span>zero<span class=\"token punctuation\">}</span><span class=\"token operator\">></span></span>        zero\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>By doing this we can extract the state of the <code class=\"language-text\">App</code> component and its manipulation entirely into the <code class=\"language-text\">useCounter</code> hook.\nManaging the counter state and logic is now the responsibility of the custom hook.</p>\n<p>The same hook could be <em>reused</em> in the application that was keeping track of the number of clicks made to the left and right buttons:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> left <span class=\"token operator\">=</span> <span class=\"token function\">useCounter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> right <span class=\"token operator\">=</span> <span class=\"token function\">useCounter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span>left<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>left<span class=\"token punctuation\">.</span>increase<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n        left\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>right<span class=\"token punctuation\">.</span>increase<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n        right\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span>right<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The application creates <strong><em>two completely separate counters</em></strong>.\nThe first one is assigned to the variable <code class=\"language-text\">left</code> and the other to the variable <code class=\"language-text\">right</code>.</p>\n<p>Dealing with forms in React can be complex.\nThe following application presents the user with a form that requests the user to input their name, birthday, and height:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">,</span> setName<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>born<span class=\"token punctuation\">,</span> setBorn<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>height<span class=\"token punctuation\">,</span> setHeight<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>form<span class=\"token operator\">></span>\n        name<span class=\"token operator\">:</span> \n        <span class=\"token operator\">&lt;</span>input\n          type<span class=\"token operator\">=</span><span class=\"token string\">'text'</span>\n          value<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">}</span>\n          onChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setName</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span> \n        <span class=\"token operator\">/</span><span class=\"token operator\">></span> \n        <span class=\"token operator\">&lt;</span>br<span class=\"token operator\">/</span><span class=\"token operator\">></span> \n        birthdate<span class=\"token operator\">:</span>\n        <span class=\"token operator\">&lt;</span>input\n          type<span class=\"token operator\">=</span><span class=\"token string\">'date'</span>\n          value<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>born<span class=\"token punctuation\">}</span>\n          onChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setBorn</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n        <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>br <span class=\"token operator\">/</span><span class=\"token operator\">></span> \n        height<span class=\"token operator\">:</span>\n        <span class=\"token operator\">&lt;</span>input\n          type<span class=\"token operator\">=</span><span class=\"token string\">'number'</span>\n          value<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>height<span class=\"token punctuation\">}</span>\n          onChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setHeight</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n        <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>form<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n        <span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">}</span> <span class=\"token punctuation\">{</span>born<span class=\"token punctuation\">}</span> <span class=\"token punctuation\">{</span>height<span class=\"token punctuation\">}</span> \n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Every field of the form has its own state.\nTo keep the state of the form synchronized with the data provided by the user,\n<em>we have to register an appropriate <code class=\"language-text\">onChange</code> handler for each of the <code class=\"language-text\">input</code> elements</em>.</p>\n<p>Let's <strong>define our own custom <code class=\"language-text\">useField</code> hook</strong> that simplifies the state management of the form:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">useField</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">type</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>value<span class=\"token punctuation\">,</span> setValue<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">onChange</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setValue</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    type<span class=\"token punctuation\">,</span>\n    value<span class=\"token punctuation\">,</span>\n    onChange\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The hook function receives the type of the input field as a parameter.\nThe function returns <em>all of the attributes required by the <code class=\"language-text\">input</code></em>: its <code class=\"language-text\">type</code>, <code class=\"language-text\">value</code> and the <code class=\"language-text\">onChange</code> handler.</p>\n<p>Here's how the hook can be used:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> name <span class=\"token operator\">=</span> <span class=\"token function\">useField</span><span class=\"token punctuation\">(</span><span class=\"token string\">'text'</span><span class=\"token punctuation\">)</span></span>  <span class=\"token comment\">// ...</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>form<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>input\n<span class=\"gatsby-highlight-code-line\">          type<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">}</span></span><span class=\"gatsby-highlight-code-line\">          value<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">}</span></span><span class=\"gatsby-highlight-code-line\">          onChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">.</span>onChange<span class=\"token punctuation\">}</span></span>        <span class=\"token operator\">/</span><span class=\"token operator\">></span> \n        <span class=\"token comment\">// ...</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>form<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>Spread attributes</h3>\n<p>We could simplify things a bit further.\nSince the <code class=\"language-text\">name</code> object has exactly all of the attributes that the <code class=\"language-text\">input</code> element expects to receive as props,\nwe can pass the props to the element using the\n<a href=\"https://react.dev/learn/updating-objects-in-state#copying-objects-with-the-spread-syntax\"><strong>spread syntax</strong></a> in the following way:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>input <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>name<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span> </code></pre></div>\n<p>As the <a href=\"https://react.dev/learn/updating-objects-in-state#copying-objects-with-the-spread-syntax\">example</a> in the React documentation states,\nthe following two ways of passing props to a component achieve the exact same result:</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Explicit assignment</th>\n<th align=\"left\">Using Spread syntax</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><pre>&#x3C;Greeting firstName='Randy'<br/>   lastName='Lau' /></pre></td>\n<td align=\"left\"><pre>const person = {<br/>  firstName: 'Randy',<br/>  lastName: 'Lau'<br/>}<br/><br/>&#x3C;Greeting {...person} /></pre></td>\n</tr>\n</tbody>\n</table>\n<p>The application gets simplified into the following format:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> name <span class=\"token operator\">=</span> <span class=\"token function\">useField</span><span class=\"token punctuation\">(</span><span class=\"token string\">'text'</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> born <span class=\"token operator\">=</span> <span class=\"token function\">useField</span><span class=\"token punctuation\">(</span><span class=\"token string\">'date'</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> height <span class=\"token operator\">=</span> <span class=\"token function\">useField</span><span class=\"token punctuation\">(</span><span class=\"token string\">'number'</span><span class=\"token punctuation\">)</span></span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>form<span class=\"token operator\">></span>\n        name<span class=\"token operator\">:</span> \n<span class=\"gatsby-highlight-code-line\">        <span class=\"token operator\">&lt;</span>input  <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>name<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span></span>        <span class=\"token operator\">&lt;</span>br<span class=\"token operator\">/</span><span class=\"token operator\">></span> \n        birthdate<span class=\"token operator\">:</span>\n        <span class=\"token operator\">&lt;</span>input <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>born<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>br <span class=\"token operator\">/</span><span class=\"token operator\">></span> \n        height<span class=\"token operator\">:</span>\n        <span class=\"token operator\">&lt;</span>input <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>height<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>form<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n<span class=\"gatsby-highlight-code-line\">        <span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">}</span> <span class=\"token punctuation\">{</span>born<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">}</span> <span class=\"token punctuation\">{</span>height<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">}</span></span>      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>When we encapsulate the byzantine details for synchronizing the form's state inside our hook, which simplifies our form.</p>\n<p>Custom hooks are not only a tool for reuse; they also <strong>provide a better way for dividing our code into smaller modular parts</strong>.</p>\n<h3>More about hooks</h3>\n<p>The internet is starting to fill up with more and more helpful material related to hooks.\nThe following sources are worth checking out:</p>\n<ul>\n<li><a href=\"https://github.com/rehooks/awesome-react-hooks\">Awesome React Hooks Resources</a></li>\n<li><a href=\"https://usehooks.com/\">Easy to understand React Hook recipes by Gabe Ragland</a></li>\n<li><a href=\"https://overreacted.io/why-do-hooks-rely-on-call-order/\">Why Do React Hooks Rely on Call Order?</a></li>\n</ul>\n</div>\n<div class=\"tasks\">\n<h3>Exercises 7.4-7.8</h3>\n<p>We'll continue with the app from <a href=\"/part7/react_router#exercises-7-1-7-3\">exercises</a> of the chapter <a href=\"/part7/react_router\">react router</a>.</p>\n<h4>7.4: jokes and hooks Step 1</h4>\n<p>Simplify the joke creation form of your application with the <code class=\"language-text\">useField</code> custom hook we defined earlier.</p>\n<p>One natural place to save the custom hooks of your application is in the <em>/src/hooks/index.js</em> file.</p>\n<p>If you use the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Description\">named export</a> instead of the default export:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useState <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>\n\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">useField</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">type</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span>  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>value<span class=\"token punctuation\">,</span> setValue<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">onChange</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setValue</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    type<span class=\"token punctuation\">,</span>\n    value<span class=\"token punctuation\">,</span>\n    onChange\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// modules can have several named exports</span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">useAnotherHook</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span>  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Then <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import\">importing</a> happens in the following way:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span>  <span class=\"token punctuation\">{</span> useField <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./hooks'</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n  <span class=\"token keyword\">const</span> username <span class=\"token operator\">=</span> <span class=\"token function\">useField</span><span class=\"token punctuation\">(</span><span class=\"token string\">'text'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4>7.5: jokes and hooks Step 2</h4>\n<p>Add a button to the form that you can use to clear all the input fields:</p>\n<picture><img src=\"/static/d9111d4d25598db016b1ac31c8670797/5a190/61ea.png\" alt=\"browser jokes with reset button\" srcset=\"/static/d9111d4d25598db016b1ac31c8670797/772e8/61ea.png 200w,\n/static/d9111d4d25598db016b1ac31c8670797/e17e5/61ea.png 400w,\n/static/d9111d4d25598db016b1ac31c8670797/5a190/61ea.png 800w,\n/static/d9111d4d25598db016b1ac31c8670797/c1b63/61ea.png 1200w,\n/static/d9111d4d25598db016b1ac31c8670797/46115/61ea.png 1290w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Expand the functionality of the <code class=\"language-text\">useField</code> hook so that it offers a new <strong><em>reset</em></strong> operation for clearing the field.</p>\n<p>Depending on your solution, you may see the following warning in your console:</p>\n<picture><img src=\"/static/c4f6d266117f4d881d1df60a4ca3b9f5/5a190/62ea.png\" alt=\"devtools console warning invalid value for reset prop\" srcset=\"/static/c4f6d266117f4d881d1df60a4ca3b9f5/772e8/62ea.png 200w,\n/static/c4f6d266117f4d881d1df60a4ca3b9f5/e17e5/62ea.png 400w,\n/static/c4f6d266117f4d881d1df60a4ca3b9f5/5a190/62ea.png 800w,\n/static/c4f6d266117f4d881d1df60a4ca3b9f5/c1b63/62ea.png 1200w,\n/static/c4f6d266117f4d881d1df60a4ca3b9f5/29007/62ea.png 1600w,\n/static/c4f6d266117f4d881d1df60a4ca3b9f5/b4904/62ea.png 1768w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>We will return to this warning in the next exercise.</p>\n<h4>7.6: jokes and hooks Step 3</h4>\n<p>If your solution did not cause a warning to appear in the console, you have already finished this exercise.</p>\n<p>If you see the warning in the console, make the necessary changes to get rid of the <em>Invalid value for prop `reset` on &#x3C;input> tag</em> console warning.</p>\n<p>The reason for this warning is that after making the changes to your application, the following expression:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>input <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>content<span class=\"token punctuation\">}</span><span class=\"token operator\">/</span><span class=\"token operator\">></span></code></pre></div>\n<p>Essentially, is the same as this:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>input\n  value<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>content<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">}</span> \n  type<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>content<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">}</span>\n  onChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>content<span class=\"token punctuation\">.</span>onChange<span class=\"token punctuation\">}</span>\n<span class=\"gatsby-highlight-code-line\">  reset<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>content<span class=\"token punctuation\">.</span>reset<span class=\"token punctuation\">}</span></span><span class=\"token operator\">/</span><span class=\"token operator\">></span></code></pre></div>\n<p>The <code class=\"language-text\">input</code> element should not be given a <code class=\"language-text\">reset</code> attribute.</p>\n<p>One simple fix would be to not use the spread syntax and write all of the forms like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>input\n  value<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>username<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">}</span> \n  type<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>username<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">}</span>\n  onChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>username<span class=\"token punctuation\">.</span>onChange<span class=\"token punctuation\">}</span>\n<span class=\"token operator\">/</span><span class=\"token operator\">></span></code></pre></div>\n<p>If we were to do this, we would lose much of the benefit provided by the <code class=\"language-text\">useField</code> hook.\nInstead, <em>come up with a solution that fixes the issue, but is still easy to use with spread syntax</em>.</p>\n<h4>7.7: country hook</h4>\n<p>Let's return to exercises <a href=\"/part2/adding_styles_to_react_app#exercises-2-18-2-20\">2.18-20</a>.</p>\n<p>We're going to start another repo by visiting <a href=\"http://go.djosv.com/227lab7-2\">http://go.djosv.com/227lab7-2</a></p>\n<p>The application can be used to search for a country's details from the <a href=\"https://restcountries.com/\">https://restcountries.com/</a> interface.\nIf a country is found, the details of the country are displayed:</p>\n<picture><img src=\"/static/9d75f399421922bf3825e5df40082e5c/5a190/69ea.png\" alt=\"browser displaying country details\" srcset=\"/static/9d75f399421922bf3825e5df40082e5c/772e8/69ea.png 200w,\n/static/9d75f399421922bf3825e5df40082e5c/e17e5/69ea.png 400w,\n/static/9d75f399421922bf3825e5df40082e5c/5a190/69ea.png 800w,\n/static/9d75f399421922bf3825e5df40082e5c/afd0b/69ea.png 1153w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>If no country is found, a message is displayed to the user:</p>\n<picture><img src=\"/static/7a5a9adc8886965c1f6d4ea99a39b788/5a190/70ea.png\" alt=\"browser showing country not found\" srcset=\"/static/7a5a9adc8886965c1f6d4ea99a39b788/772e8/70ea.png 200w,\n/static/7a5a9adc8886965c1f6d4ea99a39b788/e17e5/70ea.png 400w,\n/static/7a5a9adc8886965c1f6d4ea99a39b788/5a190/70ea.png 800w,\n/static/7a5a9adc8886965c1f6d4ea99a39b788/78597/70ea.png 947w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>The application is otherwise complete, but in this exercise, you have to implement a custom hook <code class=\"language-text\">useCountry</code>,\nwhich can be used to search for the details of the country given to the hook as a parameter.</p>\n<p>Use the API endpoint <a href=\"https://restcountries.com/#api-endpoints-v3-full-name\">full name</a>\nto fetch a country's details in a <code class=\"language-text\">useEffect</code> hook within your custom hook.</p>\n<p>Notice that in this exercise, you must enter useEffect's\n<a href=\"https://react.dev/reference/react/useEffect#parameters\">second parameter</a>\narray to control when the effect function is executed.\nReview <a href=\"/part2/adding_styles_to_react_app#couple-of-important-remarks\">this section of part 2</a> for more info on how the second parameter could be used.</p>\n<h4>7.8: ultimate hooks</h4>\n<p>The code of the application responsible for communicating with the backend of the task application of the previous parts looks like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> axios <span class=\"token keyword\">from</span> <span class=\"token string\">'axios'</span>\n<span class=\"token keyword\">const</span> baseUrl <span class=\"token operator\">=</span> <span class=\"token string\">'/api/tasks'</span>\n\n<span class=\"token keyword\">let</span> token <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">setToken</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">newToken</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  token <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">bearer </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>newToken<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getAll</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> axios<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>baseUrl<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">.</span>data\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">create</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token parameter\">newObject</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> config <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    headers<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> Authorization<span class=\"token operator\">:</span> token <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> axios<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span>baseUrl<span class=\"token punctuation\">,</span> newObject<span class=\"token punctuation\">,</span> config<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">.</span>data\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">update</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">id<span class=\"token punctuation\">,</span> newObject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> axios<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span> baseUrl <span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>id<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> newObject<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">.</span>data\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{</span> getAll<span class=\"token punctuation\">,</span> create<span class=\"token punctuation\">,</span> update<span class=\"token punctuation\">,</span> setToken <span class=\"token punctuation\">}</span></code></pre></div>\n<p>We notice that the code is in no way specific to the fact that our application deals with tasks.\nExcluding the value of the <code class=\"language-text\">baseUrl</code> variable, the same code could be reused in the watchlist application for dealing with the communication with the backend.</p>\n<p>Extract the code for communicating with the backend into its own <code class=\"language-text\">useResource</code> hook.\nIt is sufficient to implement fetching all resources and creating a new resource.</p>\n<p>You can do the exercise for the project by going to <a href=\"https://go.djosv.com/227lab7-3\">https://go.djosv.com/227lab7-3</a>.\nThe <code class=\"language-text\">App</code> component for the project is the following:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> content <span class=\"token operator\">=</span> <span class=\"token function\">useField</span><span class=\"token punctuation\">(</span><span class=\"token string\">'text'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> name <span class=\"token operator\">=</span> <span class=\"token function\">useField</span><span class=\"token punctuation\">(</span><span class=\"token string\">'text'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> number <span class=\"token operator\">=</span> <span class=\"token function\">useField</span><span class=\"token punctuation\">(</span><span class=\"token string\">'text'</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>tasks<span class=\"token punctuation\">,</span> taskService<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useResource</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http://localhost:3005/tasks'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>persons<span class=\"token punctuation\">,</span> personService<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useResource</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http://localhost:3005/persons'</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleTaskSubmit</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    event<span class=\"token punctuation\">.</span><span class=\"token function\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    taskService<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> content<span class=\"token operator\">:</span> content<span class=\"token punctuation\">.</span>value <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n \n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handlePersonSubmit</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    event<span class=\"token punctuation\">.</span><span class=\"token function\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    personService<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> name<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">,</span> email<span class=\"token operator\">:</span> email<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>h2<span class=\"token operator\">></span>tasks<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h2<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>form onSubmit<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>handleTaskSubmit<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>input <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>content<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>button<span class=\"token operator\">></span>create<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>form<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>ol<span class=\"token operator\">></span>\n        <span class=\"token punctuation\">{</span>tasks<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">t</span> <span class=\"token operator\">=></span> <span class=\"token operator\">&lt;</span>li key<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>t<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token punctuation\">{</span>t<span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>li<span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ol<span class=\"token operator\">></span>\n\n      <span class=\"token operator\">&lt;</span>h2<span class=\"token operator\">></span>persons<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h2<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>form onSubmit<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>handlePersonSubmit<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n        name <span class=\"token operator\">&lt;</span>input <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>name<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>br<span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        email <span class=\"token operator\">&lt;</span>input <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>email<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>button<span class=\"token operator\">></span>create<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>form<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>ul<span class=\"token operator\">></span>\n        <span class=\"token punctuation\">{</span>persons<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">p</span> <span class=\"token operator\">=></span> <span class=\"token operator\">&lt;</span>li key<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>p<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token punctuation\">{</span>p<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>a href<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">mailto:</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>p<span class=\"token punctuation\">.</span>number<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token punctuation\">{</span>p<span class=\"token punctuation\">.</span>number<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>a<span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>li<span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ul<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The <code class=\"language-text\">useResource</code> custom hook returns an array of two items just like the state hooks.\nThe first item of the array contains all of the individual resources\nand the second item of the array is an object that can be used for manipulating the resource collection, like creating new ones.</p>\n<p>If you implement the hook correctly, it can be used for both tasks and emails (start the server with the <code class=\"language-text\">npm run server</code> command at port 3005).</p>\n<p>While the email link and having the tasks be a list here is not required, it's included here simple to make the use case more interesting/compelling.</p>\n<picture><img src=\"/static/ed5edd3e8752214d83180ae5bcdb83e1/5a190/17.png\" alt=\"browser showing tasks and persons\" srcset=\"/static/ed5edd3e8752214d83180ae5bcdb83e1/772e8/17.png 200w,\n/static/ed5edd3e8752214d83180ae5bcdb83e1/e17e5/17.png 400w,\n/static/ed5edd3e8752214d83180ae5bcdb83e1/5a190/17.png 800w,\n/static/ed5edd3e8752214d83180ae5bcdb83e1/60b3a/17.png 1179w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n</div>","frontmatter":{"mainImage":{"publicURL":"/static/2184b1c35920cfc7a09e10660dea04eb/part-7.svg"},"part":7,"letter":"b","lang":"en"}}},"pageContext":{"part":7,"letter":"b","lang":"en"}}}