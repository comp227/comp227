{"componentChunkName":"component---src-templates-content-template-js","path":"/part8/first_steps_with_type_script","result":{"data":{"markdownRemark":{"html":"<div class=\"content\">\n<p>After the brief introduction to the main principles of TypeScript, we are now ready to start our journey toward becoming FullStack TypeScript developers.\nRather than giving you a thorough introduction to all aspects of TypeScript,\nwe will focus in this part on the most common issues that arise when developing Express backends or React frontends with TypeScript.\nIn addition to language features, we will also have a strong emphasis on tooling.</p>\n<h3>Setting things up</h3>\n<p>Luckily there is not much setup here as WebStorm works natively with TypeScript.\nJust go ahead and download this new empty repo by visiting this site:\n<a href=\"http://go.djosv.com/227labtsintro\">http://go.djosv.com/227labtsintro</a></p>\n<p>As mentioned earlier, <strong><em>TypeScript code is not executable by itself</em></strong>.\nIt has to be first compiled into executable JavaScript.\nWhen TypeScript is compiled into JavaScript, the code becomes subject to <strong>type erasure</strong>.\nThis means that type annotations, interfaces, type aliases, and other type system constructs are removed and the result is pure ready-to-run JavaScript.</p>\n<p>In a production environment, the need for compilation often means that you have to set up a <strong>build step</strong>.\nDuring the build step, all TypeScript code is compiled into JavaScript in a separate folder, and the <em>production environment then runs the code from that folder</em>.\nIn a development environment, it is often easier to make use of real-time compilation and auto-reloading so one can see the resulting changes more quickly.</p>\n<p>Let's start writing our first TypeScript app.\nTo keep things simple, let's consider using the npm package <a href=\"https://github.com/TypeStrong/ts-node\"><strong><em>ts-node</em></strong></a>.\nIt compiles and executes the specified TypeScript file immediately so that there is no need for a separate compilation step.</p>\n<p>You <em>could</em> install both <em><code class=\"language-text\">ts-node</code></em> and the official <em><code class=\"language-text\">typescript</code></em> package globally by running:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> i -g ts-node typescript</code></pre></div>\n<p>However, if you can't or don't want to install global packages, you can create an npm project which has the required dependencies and run your scripts in it.\nLet's take this approach.</p>\n<p>As we recall from <a href=\"/part3\">part 3</a>,\nan npm project is set by running the command <code class=\"language-text\">npm init</code> in an empty directory.\nYou can do this now from inside your repository.\nAfterward, we can install the dependencies by running:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> i -D ts-node typescript</code></pre></div>\n<p>and setting up <em>scripts</em> within the package.json:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ..</span>\n  <span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token property\">\"ts-node\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ts-node\"</span></span>  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// ..</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>You can now use <em><code class=\"language-text\">ts-node</code></em> within this directory by running <code class=\"language-text\">npm run ts-node</code>.\nNotice that if you are using <em><code class=\"language-text\">ts-node</code></em> through <em>package.json</em>,\ncommand-line arguments that include short or long-form options for the <code class=\"language-text\">npm run script</code> need to be prefixed with <code class=\"language-text\">--</code>.\nSo if you want to run file.ts with <em><code class=\"language-text\">ts-node</code></em> and options <code class=\"language-text\">-s</code> and <code class=\"language-text\">--someoption</code>, the whole command is:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">npm</span> run ts-node file.ts -- -s --someoption</code></pre></div>\n<p>It is worth mentioning that TypeScript also provides an <a href=\"https://www.typescriptlang.org/play/index.html\">online playground</a>,\nwhere you can quickly try out TypeScript code and instantly see the resulting JavaScript and possible compilation errors.</p>\n<blockquote>\n<p><strong>Pertinent:</strong> The playground might contain different tsconfig rules (which will be introduced later) than your local environment,\nwhich is why you might see different warnings there compared to your local environment.\nThe playground's tsconfig is modifiable through the <strong><em>TS Config</em></strong> dropdown menu.</p>\n</blockquote>\n<h4>Configuration and coding style</h4>\n<p>Let's add a configuration file <em>tsconfig.json</em> to the project.\nIn WebStorm you can generate one via <strong><em>File->New->tsconfig.json file</em></strong>.\nThen, add the noImplicitAny field to the <code class=\"language-text\">compilerOptions</code> object</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"compilerOptions\"</span><span class=\"token operator\">:</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n    <span class=\"token string\">\"sourceMap\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token string\">\"noImplicitAny\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span></span>  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The <em>tsconfig.json</em> file is used to define:</p>\n<ul>\n<li>how the TypeScript compiler should interpret the code</li>\n<li>how strictly the compiler should work</li>\n<li>which files to watch or ignore,</li>\n<li>and <a href=\"https://www.typescriptlang.org/docs/handbook/tsconfig-json.html\">much more</a></li>\n</ul>\n<p>For now, we will add the compiler option <a href=\"https://www.typescriptlang.org/tsconfig#noImplicitAny\"><code class=\"language-text\">noImplicitAny</code></a>,\nwhich will not require that we specify types for all variables.</p>\n<p>JavaScript can be written in a multitude of ways; it's an accommodating language.\nFor example, we have named vs anonymous functions, using <code class=\"language-text\">const</code> and <code class=\"language-text\">let</code> or var, and the use of <em>semicolons</em>.\nWe will continue to use semicolons here.\nIt is not a TypeScript-specific pattern but a general coding style decision taken when creating any kind of JavaScript project.\nWhether to use them or not is usually in the hands of the programmer,\nbut here you'll be expected to use semicolons and adjust to the coding style in the exercises for this part.\nThis section may have some other differences in coding conventions compared to the rest of the course as well,\ne.g. in the directory naming conventions.</p>\n<p>To make our lives easier, let's have WebStorm help us with the semicolons.\nOpen up your settings (<strong><em>Ctrl-Alt-S</em></strong>), and navigate to <strong><em>Editor->Code Style->Typescript</em></strong>.\nFrom there, select the <em>Punctuation</em> tab and ensure that our use semicolon is set to always:</p>\n<picture><img src=\"/static/8fa45a4542dbd2e265e63873b7b5b337/5a190/semicolon.png\" alt=\"WebStorm settings for always semicolons in typescript\" srcset=\"/static/8fa45a4542dbd2e265e63873b7b5b337/772e8/semicolon.png 200w,\n/static/8fa45a4542dbd2e265e63873b7b5b337/e17e5/semicolon.png 400w,\n/static/8fa45a4542dbd2e265e63873b7b5b337/5a190/semicolon.png 800w,\n/static/8fa45a4542dbd2e265e63873b7b5b337/c1b63/semicolon.png 1200w,\n/static/8fa45a4542dbd2e265e63873b7b5b337/f0811/semicolon.png 1367w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Then from there type save in the search box, which should leave you down to <strong><em>Tools->Actions on Save</em></strong>.\nMake sure that the Reformat code option is checked.\nIt's up to you whether you want to have the other actions saved.\nFor me, I just have Run eslint --fix enabled from before.\nOnce those options have been enabled, click OK.\nThis now means that when we do an explicit save (like a <strong><em>Ctrl-S</em></strong>), then semicolons will automatically be applied, so we let the IDE handle our new coding conventions.</p>\n<h4>Your first TypeScript program</h4>\n<p>Let's start by creating a simple Multiplier.\nStart by making a new typescript file.\nWith your project folder highlighted, select <strong><em>File->New->TypeScript File</em></strong>.\nName the file <em>multiplier</em> and then add the following code.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">multiplicator</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> printText</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>printText<span class=\"token punctuation\">,</span>  a <span class=\"token operator\">*</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">multiplicator</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Multiplied numbers 2 and 4, the result is:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>It looks exactly as it would in JavaScript.\nAs you can see, this is still ordinary basic JavaScript with no additional TS features.\nIt compiles and runs nicely with <code class=\"language-text\">npm run ts-node -- multiplier.ts</code>, as it would with Node.</p>\n<p>But what happens if we end up passing the wrong <strong><em>types</em></strong> of arguments to the multiplicator function?</p>\n<p>Let's replace the multiplicator call with this line.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">multiplicator</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"how about a string?\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Multiplied a string and 4, the result is:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Now when we run the code, the output is: <code class=\"language-text\">Multiplied a string and 4, the result is: NaN</code>.</p>\n<p>Wouldn't it be nice if the language itself could prevent us from ending up in situations like this?\nThis is where we see the first benefits of TypeScript.\nLet's add types to the parameters and see where it takes us.</p>\n<p>TypeScript natively supports multiple types including <code class=\"language-text\">number</code>, <code class=\"language-text\">string</code> and <code class=\"language-text\">Array</code>.\nSee the comprehensive list <a href=\"https://www.typescriptlang.org/docs/handbook/2/everyday-types.html\">here</a>.\nMore complex custom types can also be created.</p>\n<p>The first two parameters of our function are the <code class=\"language-text\">number</code> and the <code class=\"language-text\">string</code>\n<a href=\"https://www.typescriptlang.org/docs/handbook/2/everyday-types.html#the-primitives-string-number-and-boolean\">primitives</a>,\nrespectively.\nLet's add the types to the parameters.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">multiplicator</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token operator\">:</span> number<span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> number<span class=\"token punctuation\">,</span> printText<span class=\"token operator\">:</span> string</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>printText<span class=\"token punctuation\">,</span>  a <span class=\"token operator\">*</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">multiplicator</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"how about a string?\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Multiplied a string and 4, the result is:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Now the code is no longer valid JavaScript but it is TypeScript.\nWhen we try to run the code, we notice that it does not compile:</p>\n<picture><img src=\"/static/76fc3016aac2d5cd08d68747486b466e/5a190/2a.png\" alt=\"terminal output showing error assigning string to number\" srcset=\"/static/76fc3016aac2d5cd08d68747486b466e/772e8/2a.png 200w,\n/static/76fc3016aac2d5cd08d68747486b466e/e17e5/2a.png 400w,\n/static/76fc3016aac2d5cd08d68747486b466e/5a190/2a.png 800w,\n/static/76fc3016aac2d5cd08d68747486b466e/c1b63/2a.png 1200w,\n/static/76fc3016aac2d5cd08d68747486b466e/874d1/2a.png 1310w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>One of the best things about TypeScript's editor support is that you don't necessarily need to even run the code to see the issues.\nWebStorm informs you immediately when you are trying to use an incorrect type:</p>\n<picture><img src=\"/static/ef9f604c1c17c102fdc262d77ed4939c/5a190/2.png\" alt=\"vscode showing same error about string as number\" srcset=\"/static/ef9f604c1c17c102fdc262d77ed4939c/772e8/2.png 200w,\n/static/ef9f604c1c17c102fdc262d77ed4939c/e17e5/2.png 400w,\n/static/ef9f604c1c17c102fdc262d77ed4939c/5a190/2.png 800w,\n/static/ef9f604c1c17c102fdc262d77ed4939c/18c13/2.png 1005w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<h3>Creating your first custom type</h3>\n<p>Let's modify our <em>multiplicator</em> into a slightly more versatile <strong><em>calculator</em></strong> that also supports addition and division.\nTo help drive this point home, I'm going to create a new file called <em>calculator.ts</em>.\nThe calculator should accept two numbers and one operation as arguments.\nThe operation:</p>\n<ul>\n<li>tells the calculator what to do with the two numbers;</li>\n<li>\n<p>is one of these values:</p>\n<ul>\n<li><code class=\"language-text\">multiply</code></li>\n<li><code class=\"language-text\">add</code></li>\n<li><code class=\"language-text\">divide</code></li>\n</ul>\n</li>\n</ul>\n<p>In JavaScript, the code would require additional validation to make sure the last argument is indeed a <code class=\"language-text\">string</code>.\nTypeScript offers a way to define specific types for inputs.\nThose definitions detail what type of input is acceptable.\nFurthermore, TypeScript can show the info on the accepted values already at the editor level.</p>\n<p>We can create a <strong>type</strong> using the TypeScript native keyword <code class=\"language-text\">type</code>.\nLet's describe the <code class=\"language-text\">Operation</code> type:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">type Operation <span class=\"token operator\">=</span> <span class=\"token string\">\"multiply\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"add\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"divide\"</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Now the <code class=\"language-text\">Operation</code> type accepts only those three strings we wanted.\nUsing the OR operator <code class=\"language-text\">|</code> we can define a variable to accept multiple values by creating a\n<a href=\"https://www.typescriptlang.org/docs/handbook/2/everyday-types.html#union-types\">union type</a>.\nIn this case, we used exact strings, AKA\n<a href=\"https://www.typescriptlang.org/docs/handbook/2/everyday-types.html#literal-types\"><strong>string literal types</strong></a>.\nHowever, with unions, you could also make the compiler accept multiple general types.\nFor example, we could accept a string or a number by writing: <code class=\"language-text\">string | number</code>.</p>\n<p>The <code class=\"language-text\">type</code> keyword defines a new name for a type:\n<a href=\"https://www.typescriptlang.org/docs/handbook/2/everyday-types.html#type-aliases\"><strong>a type alias</strong></a>.\nSince the defined type is a union of three possible values, it is handy to name it appropriately.</p>\n<p>Let's place this code into our <em>calculator.ts</em> file now:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">type Operation <span class=\"token operator\">=</span> <span class=\"token string\">\"multiply\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"add\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"divide\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">calculator</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token operator\">:</span> number<span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> number<span class=\"token punctuation\">,</span> op<span class=\"token operator\">:</span> Operation</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>op <span class=\"token operator\">===</span> <span class=\"token string\">\"multiply\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> a <span class=\"token operator\">*</span> b<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>op <span class=\"token operator\">===</span> <span class=\"token string\">\"add\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>op <span class=\"token operator\">===</span> <span class=\"token string\">\"divide\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>b <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token string\">\"cannot divide by 0!\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> a <span class=\"token operator\">/</span> b<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Now, when we hover on top of the <code class=\"language-text\">Operation</code> type in the calculator function, we can immediately see suggestions on what to do with it:</p>\n<picture><img src=\"/static/44b55277e575ae8accde71223d506f50/0f79a/3.png\" alt=\"vs code suggestion operation 3 types\" srcset=\"/static/44b55277e575ae8accde71223d506f50/772e8/3.png 200w,\n/static/44b55277e575ae8accde71223d506f50/e17e5/3.png 400w,\n/static/44b55277e575ae8accde71223d506f50/0f79a/3.png 689w\" sizes=\"(max-width: 689px) 100vw, 689px\"></picture>\n<p>And if we try to use a value that is not within the <code class=\"language-text\">Operation</code> type, we get the familiar red warning signal and extra info from our editor:</p>\n<picture><img src=\"/static/c04bcdbcfd79d0393ba7f73eb0bddec2/5a190/4x.png\" alt=\"vscode warning when trying to have &#x22;yolo&#x22; as Operation\" srcset=\"/static/c04bcdbcfd79d0393ba7f73eb0bddec2/772e8/4x.png 200w,\n/static/c04bcdbcfd79d0393ba7f73eb0bddec2/e17e5/4x.png 400w,\n/static/c04bcdbcfd79d0393ba7f73eb0bddec2/5a190/4x.png 800w,\n/static/c04bcdbcfd79d0393ba7f73eb0bddec2/c1b63/4x.png 1200w,\n/static/c04bcdbcfd79d0393ba7f73eb0bddec2/45487/4x.png 1341w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>This is already pretty nice, but one thing we haven't touched yet is typing the return value of a function.\nUsually, you want to know what a function returns, and it would be nice to have a guarantee that it returns what it says it does.\nLet's add a return value <code class=\"language-text\">number</code> to the calculator function:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">type Operation <span class=\"token operator\">=</span> <span class=\"token string\">\"multiply\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"add\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"divide\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> calculator <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>a<span class=\"token operator\">:</span> number<span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> number<span class=\"token punctuation\">,</span> op<span class=\"token operator\">:</span> Operation<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token parameter\">number</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>op <span class=\"token operator\">===</span> <span class=\"token string\">\"multiply\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> a <span class=\"token operator\">*</span> b<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>op <span class=\"token operator\">===</span> <span class=\"token string\">\"add\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>op <span class=\"token operator\">===</span> <span class=\"token string\">\"divide\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>b <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token string\">\"this cannot be done\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> a <span class=\"token operator\">/</span> b<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The compiler complains straight away because, in one case, the function returns a string.\nThere are a couple of ways to fix this.\nWe could extend the return type to allow string values, like so:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> calculator <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>a<span class=\"token operator\">:</span> number<span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> number<span class=\"token punctuation\">,</span> op<span class=\"token operator\">:</span> Operation<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> number <span class=\"token operator\">|</span> <span class=\"token parameter\">string</span> <span class=\"token operator\">=></span>  <span class=\"token punctuation\">{</span> \n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Or we could create a return type, which includes both possible types, much like our Operation type:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">type Result <span class=\"token operator\">=</span> string <span class=\"token operator\">|</span> number<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> calculator <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>a<span class=\"token operator\">:</span> number<span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> number<span class=\"token punctuation\">,</span> op<span class=\"token operator\">:</span> Operation<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token parameter\">Result</span> <span class=\"token operator\">=></span>  <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>But now the question becomes... *is it <strong>really</strong> okay for the function to return a <code class=\"language-text\">string</code>*?</p>\n<p>When your code can end up in a situation it tries to divide by 0,\nsomething has probably gone wrong and an error should be thrown and handled where the function was called.\nWhen you are deciding to return values you weren't originally expecting,\nthe warnings you see from TypeScript prevent you from making rushed decisions and help you to keep your code working as expected.</p>\n<p>Remember that even though we have defined types for our parameters,\nthe generated JavaScript used at runtime does not contain the type checks.\nSo if, for example, the <code class=\"language-text\">Operation</code> parameter's value comes from an external interface,\n<strong><em>there is no definite guarantee that it will be one of the allowed values</em></strong>.\nTherefore, we should include error handling and be prepared for the unexpected to happen.\nWhen our programs will accept many values but raise errors for anything else,\nwe should use the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/switch\"><code class=\"language-text\">switch</code></a>\nstatement over an <code class=\"language-text\">if</code>-<code class=\"language-text\">else</code>.</p>\n<p>The code of our calculator should look something like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">type Operation <span class=\"token operator\">=</span> <span class=\"token string\">\"multiply\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"add\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"divide\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> calculator <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>a<span class=\"token operator\">:</span> number<span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> number<span class=\"token punctuation\">,</span> op<span class=\"token operator\">:</span> Operation<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token parameter\">number</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span>  <span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>op<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">\"multiply\"</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword\">return</span> a <span class=\"token operator\">*</span> b<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">\"divide\"</span><span class=\"token operator\">:</span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>b <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Cannot divide by 0!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>      <span class=\"token keyword\">return</span> a <span class=\"token operator\">/</span> b<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">\"add\"</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Operation is not multiply, add, or divide!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">calculator</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">\"divide\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token operator\">:</span> unknown<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> errorMessage <span class=\"token operator\">=</span> <span class=\"token string\">\"Something went wrong: \"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>error <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    errorMessage <span class=\"token operator\">+=</span> error<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>errorMessage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>Type narrowing</h3>\n<p>The default type of the <code class=\"language-text\">catch</code> block parameter <code class=\"language-text\">error</code> is <em><code class=\"language-text\">unknown</code></em>.\nTypescript version 3 introduced <a href=\"https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-0.html#new-unknown-top-type\"><code class=\"language-text\">unknown</code></a>\nto be the type-safe counterpart of <code class=\"language-text\">any</code>.\nWe can assign any variable with <code class=\"language-text\">unknown</code>.\nHowever, we cannot assign an <code class=\"language-text\">unknown</code> variable to just any variable.\nVariables with the <code class=\"language-text\">unknown</code> type are only assignable to other variables of type <code class=\"language-text\">unknown</code> and <code class=\"language-text\">any</code>;\nunless there is a type assertion or a control flow-based narrowing.\nLikewise, no operations are permitted on an <code class=\"language-text\">unknown</code> without first asserting or narrowing it to a more specific type.</p>\n<p>Both the possible causes of exception (wrong operator or division by zero)\nwill throw an <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error\"><code class=\"language-text\">Error</code></a> object with an error message,\nthat our program prints to the user.</p>\n<p>If our code would be JavaScript, we could print the error message by just referring to the field\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/message\"><code class=\"language-text\">message</code></a> of the object <code class=\"language-text\">error</code> as follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">calculator</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">\"divide\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Something went wrong: '</span><span class=\"token punctuation\">,</span> error<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>Since the default type of the <code class=\"language-text\">error</code> object in TypeScript is <code class=\"language-text\">unknown</code>,\nwe have to <a href=\"https://www.typescriptlang.org/docs/handbook/2/narrowing.html\">narrow</a> the type to access the field:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">calculator</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">\"divide\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token operator\">:</span> <span class=\"token builtin\">unknown</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> errorMessage <span class=\"token operator\">=</span> <span class=\"token string\">\"Something went wrong: \"</span>\n  <span class=\"token comment\">// here we can not use error.message</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>error <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>    <span class=\"token comment\">// the type is narrowed and we can refer to error.message</span>\n<span class=\"gatsby-highlight-code-line\">    errorMessage <span class=\"token operator\">+=</span> error<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">;</span></span>  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// here we can not use error.message</span>\n\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>errorMessage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Here the narrowing was done with an <a href=\"https://www.typescriptlang.org/docs/handbook/2/narrowing.html#instanceof-narrowing\"><code class=\"language-text\">instanceof</code> narrowing</a>,\nwhich is just one of the many ways to narrow a type.\nWe shall see many others later in this part.</p>\n<h3>Accessing command line arguments</h3>\n<p>We can improve our current program by using command-line arguments instead of always having to change the code to calculate stuff.</p>\n<p>Let's try it out, as we would in a regular Node application, by accessing <code class=\"language-text\">process.argv</code>.\nSince we are using a recent npm-version (7.0 or later),\nthere are no problems but with an older setup errors will be raised.</p>\n<p>So what is the problem with older setups?</p>\n<h3>@types/{npm_package}</h3>\n<p>Let's return to the basic idea of TypeScript.\nTypeScript expects all globally-used code to be typed, as it does for your code when your project has a reasonable configuration.\nThe TypeScript library itself contains only typings for the code of the TypeScript package.\nIt is possible to write custom typings for a library, but that is rarely needed - since the TypeScript community has done it for us!</p>\n<p>As with npm, the TypeScript world also celebrates open-source code.\nThe community is active and continuously reacting to updates and changes in commonly used npm packages.\nYou can almost always find the typings for npm packages, so you don't have to create types for all of your thousands of dependencies alone.</p>\n<p>Usually, types for existing packages can be found from the <em><code class=\"language-text\">@types</code></em> organization within npm,\nand you can add the relevant types to your project by installing an npm package with\nthe name of your package with a <em><code class=\"language-text\">@types/</code></em> prefix.\nFor example:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> i -D @types/react @types/express @types/lodash @types/jest @types/mongoose</code></pre></div>\n<p>and so on and so on.\nThe <code class=\"language-text\">@types/*</code> are maintained by <a href=\"https://github.com/DefinitelyTyped/DefinitelyTyped\"><em>Definitely typed</em></a>,\na community project to maintain types of everything in one place.</p>\n<p>Sometimes, an npm package can also include its types within the code and,\nin that case, installing the corresponding <code class=\"language-text\">@types/*</code> is not necessary.</p>\n<blockquote>\n<p><strong>Pertinent:</strong> Since the typings are only used before compilation,\nthe typings are <em>not</em> needed in the production build and they should <strong>always</strong> be in the <em><code class=\"language-text\">devDependencies</code></em> of the <em>package.json</em>.</p>\n</blockquote>\n<p>Since the global variable <code class=\"language-text\">process</code> is defined by Node itself, we get its typings from the package <em><code class=\"language-text\">@types/node</code></em>.</p>\n<p>Since version 10.0 <em><code class=\"language-text\">ts-node</code></em> has defined <em><code class=\"language-text\">@types/node</code></em> as a\n<a href=\"https://docs.npmjs.com/cli/v8/configuring-npm/package-json#peerdependencies\">peer dependency</a>.\nIf the version of npm is at least 7.0, the peer dependencies of a project are automatically installed by npm.\nIf you have an older npm, the peer dependency must be installed explicitly:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">npm</span> i -D @types/node</code></pre></div>\n<p>When the package <em><code class=\"language-text\">@types/node</code></em> is installed, the compiler does not complain about the variable <code class=\"language-text\">process</code>.\nNotice that there is <strong>no need to <code class=\"language-text\">require</code> the types as a header in the code</strong>, the installation of the package is enough!</p>\n<h3>Improving the project</h3>\n<p>Next, let's add an npm script to run our <strong><em>calculator</em></strong> program:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"fs-open\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"version\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"1.0.0\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"description\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"main\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"index.ts\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"ts-node\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ts-node\"</span><span class=\"token punctuation\">,</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token property\">\"multiply\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ts-node multiplier.ts\"</span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token property\">\"calculate\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ts-node calculator.ts\"</span></span>  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"author\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"license\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ISC\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"devDependencies\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"ts-node\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^10.5.0\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"typescript\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^4.5.5\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>We can get the multiplier to work with command-line parameters with the following changes:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">multiplicator</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token operator\">:</span> number<span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> number<span class=\"token punctuation\">,</span> printText<span class=\"token operator\">:</span> string</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>printText<span class=\"token punctuation\">,</span> a <span class=\"token operator\">*</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> a<span class=\"token operator\">:</span> number <span class=\"token operator\">=</span> <span class=\"token function\">Number</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> b<span class=\"token operator\">:</span> number <span class=\"token operator\">=</span> <span class=\"token function\">Number</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">multiplicator</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Multiplied </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>a<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> and </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>b<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">, the result is:</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>And we can run it with:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">npm</span> run multiply <span class=\"token number\">5</span> <span class=\"token number\">2</span></code></pre></div>\n<p>If the program is run with parameters that are not of the right type, e.g.</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">npm</span> run multiply <span class=\"token number\">5</span> lol</code></pre></div>\n<p>it <em>works</em> but gives us a potentially unexpected answer:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">Multiplied <span class=\"token number\">5</span> and NaN, the result is: NaN</code></pre></div>\n<p>The result is <code class=\"language-text\">NaN</code> because <code class=\"language-text\">Number(&quot;lol&quot;)</code> returns <code class=\"language-text\">NaN</code>,\n<strong><em>which is of type <code class=\"language-text\">number</code></em></strong>, so TypeScript has no power to rescue us from this kind of situation.</p>\n<p>To prevent this kind of behavior, we have to <strong><em>validate the data given to us from the command line</em></strong>.</p>\n<p>The improved version of the multiplicator looks like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">MultiplyValues</span> <span class=\"token punctuation\">{</span>\n  value1<span class=\"token operator\">:</span> number<span class=\"token punctuation\">;</span>\n  value2<span class=\"token operator\">:</span> number<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> parseArguments <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>args<span class=\"token operator\">:</span> string<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token parameter\">MultiplyValues</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&lt;</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Not enough arguments\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Too many arguments\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">isNaN</span><span class=\"token punctuation\">(</span><span class=\"token function\">Number</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span><span class=\"token function\">isNaN</span><span class=\"token punctuation\">(</span><span class=\"token function\">Number</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n      value1<span class=\"token operator\">:</span> <span class=\"token function\">Number</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      value2<span class=\"token operator\">:</span> <span class=\"token function\">Number</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Provided values were not numbers!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">multiplicator</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token operator\">:</span> number<span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> number<span class=\"token punctuation\">,</span> printText<span class=\"token operator\">:</span> string</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>printText<span class=\"token punctuation\">,</span>  a <span class=\"token operator\">*</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> value1<span class=\"token punctuation\">,</span> value2 <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">parseArguments</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">multiplicator</span><span class=\"token punctuation\">(</span>value1<span class=\"token punctuation\">,</span> value2<span class=\"token punctuation\">,</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Multiplied </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>value1<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> and </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>value2<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">, the result is:</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token operator\">:</span> unknown<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> errorMessage <span class=\"token operator\">=</span> <span class=\"token string\">\"Something bad happened.\"</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>error <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    errorMessage <span class=\"token operator\">+=</span> <span class=\"token string\">\" Error: \"</span> <span class=\"token operator\">+</span> error<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>errorMessage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>When we now run the program:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">npm</span> run multiply <span class=\"token number\">1</span> lol</code></pre></div>\n<p>we get an error message:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">Something bad happened. Error: Provided values were not numbers<span class=\"token operator\">!</span></code></pre></div>\n<p>Let's examine the above code closely.\nThe most important addition is the function <code class=\"language-text\">parseArguments</code>.\nThe function ensures that the parameters given to <code class=\"language-text\">multiplicator</code> are of the right type.\nIf not, an exception is thrown with a descriptive error message.</p>\n<p>Let's review the <code class=\"language-text\">parseArguments</code> function definition:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> parseArguments <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>args<span class=\"token operator\">:</span> string<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token parameter\">MultiplyValues</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Notice the parameter <code class=\"language-text\">args</code> is an <a href=\"https://www.typescriptlang.org/docs/handbook/2/everyday-types.html#arrays\">array</a> of strings.</p>\n<p>The return value of the function has the type <code class=\"language-text\">MultiplyValues</code>, which is defined as follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">MultiplyValues</span> <span class=\"token punctuation\">{</span>\n  value1<span class=\"token operator\">:</span> number<span class=\"token punctuation\">;</span>\n  value2<span class=\"token operator\">:</span> number<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The definition utilizes TypeScript's <a href=\"https://www.typescriptlang.org/docs/handbook/2/everyday-types.html#interfaces\"><strong>Interface</strong></a> keyword,\nwhich is one way to define the <em>shape</em> an object should have.\nIn our case, it is quite obvious that the return value should be an object with the two properties <code class=\"language-text\">value1</code> and <code class=\"language-text\">value2</code>, both being of type <code class=\"language-text\">number</code>.</p>\n<h3>The alternative array syntax</h3>\n<p>Notice that there is also an alternative syntax for <a href=\"https://www.typescriptlang.org/docs/handbook/2/everyday-types.html#arrays\">arrays</a> in TypeScript.\nInstead of writing</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> values<span class=\"token operator\">:</span> number<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> </code></pre></div>\n<p>we could use the <strong><em>generics syntax</em></strong> and write</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> values<span class=\"token operator\">:</span> Array<span class=\"token operator\">&lt;</span>number<span class=\"token operator\">></span><span class=\"token punctuation\">;</span> </code></pre></div>\n<p>In this course, we shall mostly be following the convention enforced by the ESlint rule\n<a href=\"https://typescript-eslint.io/rules/array-type/#array-simple\">array-simple</a>\nthat suggests to use <code class=\"language-text\">[]</code> syntax for simple arrays and <code class=\"language-text\">&lt;&gt;</code> syntax for the more complex ones.\nSee <a href=\"https://typescript-eslint.io/rules/array-type/#array-simple\">the ESlint array-simple rule documentation</a> for examples.</p>\n</div>\n<div class=\"tasks\">\n<h3>Exercises 8.1-8.3</h3>\n<h4>setup</h4>\n<p>Exercises 8.1-8.7. will all be made in the same project folder.</p>\n<p>Please start by visiting <a href=\"http://go.djosv.com/227lab8\">http://go.djosv.com/227lab8</a> and importing the project into WebStorm.</p>\n<p>Then, create the project in an empty directory with <code class=\"language-text\">npm init</code> and install the <em>ts-node</em> and <em>typescript</em> packages.\nAlso, create the file <em>tsconfig.json</em> in the directory with the following content:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"compilerOptions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"module\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"commonjs\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"target\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"es5\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"sourceMap\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token property\">\"noImplicitAny\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span></span>  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"exclude\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token string\">\"node_modules\"</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The compiler option <a href=\"https://www.typescriptlang.org/tsconfig#noImplicitAny\"><code class=\"language-text\">noImplicitAny</code></a> makes it mandatory to have types for all variables used.\nThis option is currently a default, but it lets us define it explicitly.</p>\n<h4>8.1 Body mass index</h4>\n<p>Create the code of this exercise in the file <em>bmiCalculator.ts</em>.</p>\n<p>Write a function <code class=\"language-text\">calculateBMI</code> that calculates a <a href=\"https://en.wikipedia.org/wiki/Body_mass_index\">BMI</a>\nbased on a given height (in centimeters) and weight (in kilograms) and then returns a message that suits the results.</p>\n<p>Call the function in the same file with hard-coded parameters and print out the result.\nThe code</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">calculateBMI</span><span class=\"token punctuation\">(</span><span class=\"token number\">180</span><span class=\"token punctuation\">,</span> <span class=\"token number\">74</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>should print the following message:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">Normal <span class=\"token punctuation\">(</span>healthy weight<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Create an npm script for running the program with the command <code class=\"language-text\">npm run calculateBMI</code>.</p>\n<h4>8.2 Exercise calculator</h4>\n<p>Create the code of this exercise in file <em>exerciseCalculator.ts</em>.</p>\n<p>Write a function <code class=\"language-text\">calculateExercises</code> that calculates the average time of <strong><em>daily exercise hours</em></strong>\nand compares it to the <strong><em>target amount</em></strong> of daily hours and returns an object that includes the following values:</p>\n<ul>\n<li>the number of days</li>\n<li>the number of training days</li>\n<li>the original target value</li>\n<li>the calculated average time</li>\n<li>boolean value describing if the target was reached</li>\n<li>a rating between the numbers 1-3 that tells how well the hours are met.\nYou can decide on the metric on your own.</li>\n<li>a text value explaining the rating, you can come up with the explanations</li>\n</ul>\n<p>The daily exercise hours are given to the function as an <a href=\"https://www.typescriptlang.org/docs/handbook/basic-types.html#array\">array</a>\nthat contains the number of exercise hours for each day in the training period.\nE.g. a week with 3 hours of training on Monday, none on Tuesday, 2 hours on Wednesday, 4.5 hours on Thursday and so on\nwould be represented by the following array:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4.5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>For the Result object, you should create an <a href=\"https://www.typescriptlang.org/docs/handbook/interfaces.html\">interface</a>.</p>\n<p>If you call the function with parameters <code class=\"language-text\">[3, 0, 2, 4.5, 0, 3, 1]</code> and <code class=\"language-text\">2</code>, it should return:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span> periodLength<span class=\"token operator\">:</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span>\n  trainingDays<span class=\"token operator\">:</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span>\n  success<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n  rating<span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n  ratingDescription<span class=\"token operator\">:</span> <span class=\"token string\">\"not too bad but could be better\"</span><span class=\"token punctuation\">,</span>\n  target<span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n  average<span class=\"token operator\">:</span> <span class=\"token number\">1.9285714285714286</span> <span class=\"token punctuation\">}</span></code></pre></div>\n<p>Create an npm script, <code class=\"language-text\">npm run calculateExercises</code>, to call the function with hard-coded values.</p>\n<h4>8.3 Command line</h4>\n<p>Change the previous exercises so that you can give the parameters of <code class=\"language-text\">bmiCalculator</code> and <code class=\"language-text\">exerciseCalculator</code> as command-line arguments.</p>\n<p>Your program could work eg. as follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">$ <span class=\"token function\">npm</span> run calculateBmi <span class=\"token number\">180</span> <span class=\"token number\">91</span>\n\nOverweight</code></pre></div>\n<p>and:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">$ <span class=\"token function\">npm</span> run calculateExercises <span class=\"token number\">2</span> <span class=\"token number\">1</span> <span class=\"token number\">0</span> <span class=\"token number\">2</span> <span class=\"token number\">4.5</span> <span class=\"token number\">0</span> <span class=\"token number\">3</span> <span class=\"token number\">1</span> <span class=\"token number\">0</span> <span class=\"token number\">4</span>\n\n<span class=\"token punctuation\">{</span> periodLength: <span class=\"token number\">9</span>,\n  trainingDays: <span class=\"token number\">6</span>,\n  success: false,\n  rating: <span class=\"token number\">2</span>,\n  ratingDescription: <span class=\"token string\">\"not too bad but could be better\"</span>,\n  target: <span class=\"token number\">2</span>,\n  average: <span class=\"token number\">1.7222222222222223</span> <span class=\"token punctuation\">}</span></code></pre></div>\n<p>In the example, the <em>first argument</em> is the target value.</p>\n<p>Handle exceptions and errors appropriately.\nThe <em>exerciseCalculator</em> should accept inputs of varied lengths.\nDetermine by yourself how you manage to collect all needed input.</p>\n<p>A couple of things to notice:</p>\n<p>If you define helper functions in other modules, you should use the\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules\">JavaScript module system</a>,\nthat is, the one we have used with React where importing is done with</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> isNotNumber <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./utils\"</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>and exporting</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> isNotNumber <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>argument<span class=\"token operator\">:</span> any<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token parameter\">boolean</span> <span class=\"token operator\">=></span>\n  <span class=\"token function\">isNaN</span><span class=\"token punctuation\">(</span><span class=\"token function\">Number</span><span class=\"token punctuation\">(</span>argument<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">default</span> <span class=\"token keyword\">export</span> <span class=\"token string\">\"this is the default...\"</span></code></pre></div>\n<blockquote>\n<p>Pertinent: somehow surprisingly TypeScript does not allow to define the same variable in many files at a \"block scope\", that is, outside functions (or classes):</p>\n<picture><img src=\"/static/38e688e08a60b63de905404ccfeab052/5a190/60new.png\" alt=\"browser showing pong from localhost:3000/ping\" srcset=\"/static/38e688e08a60b63de905404ccfeab052/772e8/60new.png 200w,\n/static/38e688e08a60b63de905404ccfeab052/e17e5/60new.png 400w,\n/static/38e688e08a60b63de905404ccfeab052/5a190/60new.png 800w,\n/static/38e688e08a60b63de905404ccfeab052/19a6b/60new.png 1191w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>This is not <em>quite</em> true.\nThis <strong><em>rule applies only to files that are treated as scripts</em></strong>.\nA file is a <strong>script</strong> if it does not contain any <code class=\"language-text\">export</code> or <code class=\"language-text\">import</code> statements.\nIf a file has those, then the file is treated as a <a href=\"https://www.typescriptlang.org/docs/handbook/modules.html\"><strong>module</strong></a>,\n<strong><em>and</em></strong> the variables do not get defined in the block scope.</p>\n</blockquote>\n</div>\n<div class=\"content\">\n<h3>More about tsconfig</h3>\n<p>We have so far used only one tsconfig rule <a href=\"https://www.typescriptlang.org/tsconfig#noImplicitAny\">noImplicitAny</a>.\nIt's a good place to start, but now it's time to look into the config file a little deeper.</p>\n<p>As mentioned, the <a href=\"https://www.typescriptlang.org/docs/handbook/tsconfig-json.html\">tsconfig.json</a> file\ncontains all your core configurations on how you want TypeScript to work in your project.</p>\n<p>Let's specify the following configurations in our <em>tsconfig.json</em> file:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"compilerOptions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"target\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ES2022\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"strict\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"noUnusedLocals\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token property\">\"noUnusedParameters\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></span>    <span class=\"token property\">\"noImplicitReturns\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"noFallthroughCasesInSwitch\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token property\">\"noImplicitAny\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></span>    <span class=\"token property\">\"esModuleInterop\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"moduleResolution\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"node\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Do not worry too much about the <code class=\"language-text\">compilerOptions</code>; they will be under closer inspection later on.</p>\n<p>You can find explanations for each of the configurations from:</p>\n<ul>\n<li>the TypeScript documentation</li>\n<li>the really handy <a href=\"https://www.typescriptlang.org/tsconfig\">tsconfig page</a></li>\n<li>\n<p>the no-frills tsconfig <a href=\"http://json.schemastore.org/tsconfig\">schema definition</a></p>\n<ul>\n<li>it's no-frills because the page output is in JSON.</li>\n</ul>\n</li>\n</ul>\n<h3>Adding Express to the mix</h3>\n<p>Currently, our project is functional; it's set up and has two executable calculators in it.\nHowever, since we aim to learn full-stack web development, let's begin working with HTTP Requests.</p>\n<p>First, install Express:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> i express</code></pre></div>\n<p>and add the <strong><em>start</em></strong> script to package.json:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ..</span>\n  <span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"ts-node\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ts-node\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"multiply\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ts-node multiplier.ts\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"calculate\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ts-node calculator.ts\"</span><span class=\"token punctuation\">,</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token property\">\"start\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ts-node index.ts\"</span></span>  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// ..</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Now we can create the file <em>index.ts</em>, and write the HTTP GET <code class=\"language-text\">ping</code> endpoint to it:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> express <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"express\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">express</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/ping\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pong\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token constant\">PORT</span> <span class=\"token operator\">=</span> <span class=\"token number\">3003</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token constant\">PORT</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Server running on port </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token constant\">PORT</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Everything else seems to be working just fine but, as you'd expect, <strong><em>the <code class=\"language-text\">req</code> and <code class=\"language-text\">res</code> parameters of <code class=\"language-text\">app.get</code> need typing</em></strong>.\nAlso, if you hover over the <code class=\"language-text\">require</code> statement on line 1 in WebStorm, you'll notice that WebStorm provides us with a message converting the line to an import.</p>\n<picture><img src=\"/static/0e64d9c22fe0b9b2d23811e8682b787b/5a190/6.png\" alt=\"vscode warning to change require to import\" srcset=\"/static/0e64d9c22fe0b9b2d23811e8682b787b/772e8/6.png 200w,\n/static/0e64d9c22fe0b9b2d23811e8682b787b/e17e5/6.png 400w,\n/static/0e64d9c22fe0b9b2d23811e8682b787b/5a190/6.png 800w,\n/static/0e64d9c22fe0b9b2d23811e8682b787b/c4b7c/6.png 903w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>The subtle suggestion is that the <code class=\"language-text\">&#39;require&#39; call may be converted to an import</code>.\nThis suggestion is a suggestion to use a more modern call for typescript, and as such, this error is currently not being highlighted as a warning.\nTo turn it into a warning, we can open up the settings by using the <strong><em>Show Context Actions</em></strong> keyboard shortcut (or by right-clicking) and selecting the edit inspection setting.</p>\n<picture><img src=\"/static/951aba26a4f3aae2a5ed547c2864bc3a/5a190/quickfixinspection.png\" alt=\"WebStorm using context actions to turn on errors\" srcset=\"/static/951aba26a4f3aae2a5ed547c2864bc3a/772e8/quickfixinspection.png 200w,\n/static/951aba26a4f3aae2a5ed547c2864bc3a/e17e5/quickfixinspection.png 400w,\n/static/951aba26a4f3aae2a5ed547c2864bc3a/5a190/quickfixinspection.png 800w,\n/static/951aba26a4f3aae2a5ed547c2864bc3a/c1b63/quickfixinspection.png 1200w,\n/static/951aba26a4f3aae2a5ed547c2864bc3a/ccf0c/quickfixinspection.png 1428w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Once there, you are taken to WebStorm's settings, where in your case, you may see that all of the ES2015 migration aids category is mostly unselected.\nWebStorm provides an explanation for why we would want the change in the upper right area.\nOn noticing that most of the inspections are not being raised as warnings, let's change that.\nClick the category <strong><em>ES2015 Migration aids</em></strong> and change the severity to a weak warning, as we show in the column below.</p>\n<picture><img src=\"/static/aa23a15461129a99c269416f937d0a33/5a190/typescript_warnings.png\" alt=\"WebStorm inspection settings\" srcset=\"/static/aa23a15461129a99c269416f937d0a33/772e8/typescript_warnings.png 200w,\n/static/aa23a15461129a99c269416f937d0a33/e17e5/typescript_warnings.png 400w,\n/static/aa23a15461129a99c269416f937d0a33/5a190/typescript_warnings.png 800w,\n/static/aa23a15461129a99c269416f937d0a33/66465/typescript_warnings.png 1097w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Once you do that, you'll now see that the require statement in underlined with a weak warning indicator.\nLet's again use the quick actions keyboard shortcut (make sure to practice this!) to select the first option.</p>\n<picture><img src=\"/static/4b33afd184362b8ccb76fe8a8ab16404/5a190/quickfiximport.png\" alt=\"WebStorm using the context actions\" srcset=\"/static/4b33afd184362b8ccb76fe8a8ab16404/772e8/quickfiximport.png 200w,\n/static/4b33afd184362b8ccb76fe8a8ab16404/e17e5/quickfiximport.png 400w,\n/static/4b33afd184362b8ccb76fe8a8ab16404/5a190/quickfiximport.png 800w,\n/static/4b33afd184362b8ccb76fe8a8ab16404/9d5da/quickfiximport.png 871w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Completing the action replaces the first line with this:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> express <span class=\"token keyword\">from</span> <span class=\"token string\">\"express\"</span><span class=\"token punctuation\">;</span></code></pre></div>\n<blockquote>\n<p><strong>FYI:</strong>: Make sure to utilize the context actions and quick fixes that WebStorm provides.\nKeep your eyes open for these helpers/quick fixes; listening to your editor usually makes your code better and easier to read.\nThe automatic fixes for issues can be a major time saver as well.</p>\n</blockquote>\n<p>Now we run into another problem that WebStorm is not explicitly letting on, the compiler is complaining about the import statement.\nOnce again, the editor is our best friend when trying to find out what the issue is:</p>\n<picture><img src=\"/static/bbf25d95e2ab9c4bffabc01e851d2641/5a190/7.png\" alt=\"vscode error about not finding express\" srcset=\"/static/bbf25d95e2ab9c4bffabc01e851d2641/772e8/7.png 200w,\n/static/bbf25d95e2ab9c4bffabc01e851d2641/e17e5/7.png 400w,\n/static/bbf25d95e2ab9c4bffabc01e851d2641/5a190/7.png 800w,\n/static/bbf25d95e2ab9c4bffabc01e851d2641/c1b63/7.png 1200w,\n/static/bbf25d95e2ab9c4bffabc01e851d2641/010c2/7.png 1425w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>We haven't installed types for <em>express</em>.\nLet's do what the suggestion says.\nYou can type this line from the terminal.</p>\n<blockquote>\n<p><em>If you decided to run it from WebStorm, it may save it as a regular dependency instead of a dev dependency.</em></p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> i -D @types/express</code></pre></div>\n<p>And almost no more errors! Let's take a look at what changed.</p>\n<p>At first, when we were using the <code class=\"language-text\">require</code> statement, and then we hovered over over <code class=\"language-text\">res</code>,\nyou'll notice that WebStorm interprets everything express-related to be of type <code class=\"language-text\">any</code>.</p>\n<picture><img src=\"/static/c378026fe92ad4db5e73b92d194b7b37/5a190/8a.png\" alt=\"ide showing problem of implicitly having any type\" srcset=\"/static/c378026fe92ad4db5e73b92d194b7b37/772e8/8a.png 200w,\n/static/c378026fe92ad4db5e73b92d194b7b37/e17e5/8a.png 400w,\n/static/c378026fe92ad4db5e73b92d194b7b37/5a190/8a.png 800w,\n/static/c378026fe92ad4db5e73b92d194b7b37/96e86/8a.png 1089w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>However, as soon as we used <code class=\"language-text\">import</code>, the editor knows the actual types:</p>\n<picture><img src=\"/static/8d8072ec64e819eee96a93b81261a52e/5a190/9x.png\" alt=\"ide showing req is of type Request\" srcset=\"/static/8d8072ec64e819eee96a93b81261a52e/772e8/9x.png 200w,\n/static/8d8072ec64e819eee96a93b81261a52e/e17e5/9x.png 400w,\n/static/8d8072ec64e819eee96a93b81261a52e/5a190/9x.png 800w,\n/static/8d8072ec64e819eee96a93b81261a52e/84cc5/9x.png 898w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Which import statement to use depends on the export method used in the imported package.</p>\n<p>A good rule of thumb is to try importing a module using the <code class=\"language-text\">import</code> statement first.\nWe will always use this method in the <em>frontend</em>.\nIf <code class=\"language-text\">import</code> does not work, try a combined method: <code class=\"language-text\">import ... = require(&quot;...&quot;)</code>.</p>\n<p>We strongly suggest you read more about TypeScript modules <a href=\"https://www.typescriptlang.org/docs/handbook/modules.html\">here</a>.</p>\n<p>There is one more problem with the code:</p>\n<picture><img src=\"/static/ca16d06d8ff31c955a47ebed982af3ea/5a190/9b.png\" alt=\"vscode showing req declared but never read\" srcset=\"/static/ca16d06d8ff31c955a47ebed982af3ea/772e8/9b.png 200w,\n/static/ca16d06d8ff31c955a47ebed982af3ea/e17e5/9b.png 400w,\n/static/ca16d06d8ff31c955a47ebed982af3ea/5a190/9b.png 800w,\n/static/ca16d06d8ff31c955a47ebed982af3ea/33c9c/9b.png 1133w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>This is because we banned unused parameters in our <em>tsconfig.json</em>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"compilerOptions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"target\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ES2022\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"strict\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"noUnusedLocals\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token string\">\"noUnusedParameters\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></span>    <span class=\"token string\">\"noImplicitReturns\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"noFallthroughCasesInSwitch\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"esModuleInterop\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This configuration might create problems if you have <em>library-wide predefined functions</em>\nthat require declaring a variable even if it's not used at all, as is the case here.\nFortunately, this issue has already been solved on the configuration level.\nOnce again hovering over the issue gives us a solution.\nThis time we can just click the quick fix button:</p>\n<picture><img src=\"/static/24fc26248ebe6939ae942941f2dcd235/5a190/14a.png\" alt=\"vscode quickfix to add underscore to variable\" srcset=\"/static/24fc26248ebe6939ae942941f2dcd235/772e8/14a.png 200w,\n/static/24fc26248ebe6939ae942941f2dcd235/e17e5/14a.png 400w,\n/static/24fc26248ebe6939ae942941f2dcd235/5a190/14a.png 800w,\n/static/24fc26248ebe6939ae942941f2dcd235/ad12c/14a.png 856w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>If it is absolutely impossible to get rid of an unused variable,\nyou can <strong><em>prefix it with an underscore</em></strong> to inform the compiler you have thought about it and there is nothing you can do.</p>\n<p>Let's rename the <code class=\"language-text\">req</code> variable to <code class=\"language-text\">_req</code>.\nFinally, we are ready to start the application.\nIt seems to work fine:</p>\n<picture><img src=\"/static/2ee673257d35b40c8e2f803b1bfae85c/5a190/11a.png\" alt=\"browser result showing pong on /ping\" srcset=\"/static/2ee673257d35b40c8e2f803b1bfae85c/772e8/11a.png 200w,\n/static/2ee673257d35b40c8e2f803b1bfae85c/e17e5/11a.png 400w,\n/static/2ee673257d35b40c8e2f803b1bfae85c/5a190/11a.png 800w,\n/static/2ee673257d35b40c8e2f803b1bfae85c/2ad15/11a.png 801w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<h4>Speeding up development</h4>\n<p>To speed up development, we should enable <strong>auto-restarting</strong> our server to improve our workflow.\nIn this course, we have already used <em>nodemon</em>, but <em>ts-node</em> has an alternative called <strong><em>ts-node-dev</em></strong>.\nIt is meant to be used only with a development environment that takes care of recompilation on every change, so restarting the application won't be necessary.</p>\n<p>Let's install <strong><em>ts-node-dev</em></strong> to our development dependencies:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> i -D ts-node-dev</code></pre></div>\n<p>Add a script to <em>package.json</em>:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n  <span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// ...</span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token property\">\"dev\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ts-node-dev index.ts\"</span><span class=\"token punctuation\">,</span></span>  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>And now, by running <code class=\"language-text\">npm run dev</code>, we have an auto-restarting development environment for our project!\nIf you now make a change, you'll notice that the server restarts, which means we can make a change wait a second and then refresh our browser, and we'll see the changes.</p>\n</div>\n<div class=\"tasks\">\n<h3>Exercises 8.4-8.5</h3>\n<h4>8.4 Express</h4>\n<p>Add Express to your dependencies and create an HTTP GET endpoint <strong><code class=\"language-text\">hello</code></strong> that answers <code class=\"language-text\">&quot;Hello COMP 227!&quot;</code></p>\n<p>The web app should be started with the commands <code class=\"language-text\">npm start</code> in production mode and <code class=\"language-text\">npm run dev</code> in development mode.\nThe latter should also use <strong><em><code class=\"language-text\">ts-node-dev</code></em></strong> to run the app.</p>\n<p>Replace also your existing <em>tsconfig.json</em> file with the following content:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"compilerOptions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"noImplicitAny\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"noImplicitReturns\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"strictNullChecks\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"strictPropertyInitialization\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"strictBindCallApply\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"noUnusedLocals\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"noUnusedParameters\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"noImplicitThis\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"alwaysStrict\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"esModuleInterop\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"declaration\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Make sure there aren't any errors!</p>\n<h4>8.5 WebBMI</h4>\n<p>Add an endpoint for the BMI calculator that can be used by doing an HTTP GET request to the endpoint <strong><em><code class=\"language-text\">bmi</code></em></strong>\nand specifying the input with <a href=\"https://en.wikipedia.org/wiki/Query_string\">query string parameters</a>.\nFor example, to get the BMI of a person with a height of 180 and a weight of 72, the URL is <a href=\"http://localhost:3002/bmi?height=180&#x26;weight=72\">http://localhost:3002/bmi?height=180&#x26;weight=72</a>.</p>\n<p>The response is a JSON of the form:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n  weight<span class=\"token operator\">:</span> <span class=\"token number\">72</span><span class=\"token punctuation\">,</span>\n  height<span class=\"token operator\">:</span> <span class=\"token number\">180</span><span class=\"token punctuation\">,</span>\n  bmi<span class=\"token operator\">:</span> <span class=\"token string\">\"Normal (healthy weight)\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>See the <a href=\"https://expressjs.com/en/5x/api.html#req.query\">Express documentation</a> for info on how to access the query parameters.</p>\n<p>If the query parameters of the request are of the wrong type or missing, a response with proper status code and an error message is given:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n  error<span class=\"token operator\">:</span> <span class=\"token string\">\"malformatted parameters\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Do not copy the calculator code to file <em>index.ts</em>;\ninstead, make it a <a href=\"https://www.typescriptlang.org/docs/handbook/modules.html\">TypeScript module</a> that can be imported into <em>index.ts</em>.</p>\n</div>\n<div class=\"content\">\n<h3>The horrors of <code class=\"language-text\">any</code></h3>\n<p>Now that we have our first endpoints completed, you may notice <em>we have used barely any TypeScript in these small examples</em>.\nWhen examining the code a bit closer, we can see a few dangers lurking there.</p>\n<p>Let's add the HTTP POST endpoint <strong><em><code class=\"language-text\">calculate</code></em></strong> to our app:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> calculator <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./calculator\"</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>express<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// ...</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/calculate\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> value1<span class=\"token punctuation\">,</span> value2<span class=\"token punctuation\">,</span> op <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token function\">calculator</span><span class=\"token punctuation\">(</span>value1<span class=\"token punctuation\">,</span> value2<span class=\"token punctuation\">,</span> op<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> result <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>To get this working, we must add an <code class=\"language-text\">export</code> to the function <code class=\"language-text\">calculator</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> calculator <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>a<span class=\"token operator\">:</span> number<span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> number<span class=\"token punctuation\">,</span> op<span class=\"token operator\">:</span> Operation<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token parameter\">number</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></code></pre></div>\n<p>When you hover over the <code class=\"language-text\">calculate</code> function, you can see the typing of the <code class=\"language-text\">calculator</code> even though the code itself does not contain any typings:</p>\n<picture><img src=\"/static/4cb25f7dac59a4b568624e0778f1073b/5a190/12a21.png\" alt=\"vscode showing calculator types when mouse over function\" srcset=\"/static/4cb25f7dac59a4b568624e0778f1073b/772e8/12a21.png 200w,\n/static/4cb25f7dac59a4b568624e0778f1073b/e17e5/12a21.png 400w,\n/static/4cb25f7dac59a4b568624e0778f1073b/5a190/12a21.png 800w,\n/static/4cb25f7dac59a4b568624e0778f1073b/ef6b9/12a21.png 832w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>But if you hover over the parameters which were parsed from the request, an issue arises:</p>\n<picture><img src=\"/static/a2ca4452a6d89852afa6f84d8f2883b8/5a190/13a21.png\" alt=\"vscode problematically showing any when hovering over values parsed in to calculate\" srcset=\"/static/a2ca4452a6d89852afa6f84d8f2883b8/772e8/13a21.png 200w,\n/static/a2ca4452a6d89852afa6f84d8f2883b8/e17e5/13a21.png 400w,\n/static/a2ca4452a6d89852afa6f84d8f2883b8/5a190/13a21.png 800w,\n/static/a2ca4452a6d89852afa6f84d8f2883b8/38124/13a21.png 953w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p><strong><em>All of the variables have the type <code class=\"language-text\">any</code>.</em></strong>\nIt is not all that surprising, as no one has given them a type yet.\nThere are a couple of ways to fix this, but first, we have to consider why this is accepted and where the type <code class=\"language-text\">any</code> came from.</p>\n<p>In TypeScript, <em>every untyped variable whose type cannot be inferred implicitly becomes type</em>\n<a href=\"https://www.typescriptlang.org/docs/handbook/2/everyday-types.html#any\"><code class=\"language-text\">any</code></a>.\nAny is <em>wild card</em> type which stands for <strong>whatever</strong> type.\nVariables implicitly become an <code class=\"language-text\">any</code> type when one *forgets to type <strong>functions*</strong>.</p>\n<p>We can also explicitly type things <code class=\"language-text\">any</code>.\nThe only difference between the implicit and explicit any type is <em>how the code looks</em>; the compiler does not care about the difference.</p>\n<p>Programmers however see the code differently when <code class=\"language-text\">any</code> is explicitly enforced than when it is implicitly inferred.\n<strong>Implicit <code class=\"language-text\">any</code> typings are usually considered problematic</strong>.\nCoders quite often use <code class=\"language-text\">any</code> as a placeholder and later forget to assign types (or they were just too lazy to do it).\nUsing <code class=\"language-text\">any</code> also means that the full power of TypeScript is not properly exploited.</p>\n<p>This is why the configuration rule <a href=\"https://www.typescriptlang.org/tsconfig#noImplicitAny\">noImplicitAny</a> exists on the compiler level,\nand it is highly recommended to keep it on at all times.\nIn the rare occasions when you truly cannot know what the type of a variable is, you should explicitly state that in the code:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> a <span class=\"token operator\">:</span> any <span class=\"token operator\">=</span> <span class=\"token comment\">/* no clue what the type will be! */</span><span class=\"token punctuation\">.</span></code></pre></div>\n<p>We already have <code class=\"language-text\">noImplicitAny: true</code> configured in our example, so why does the compiler not complain about the implicit <code class=\"language-text\">any</code> types?\nThe reason is that the <code class=\"language-text\">body</code> field of an Express <a href=\"https://expressjs.com/en/5x/api.html#req\">Request</a> object <strong>is explicitly typed <code class=\"language-text\">any</code></strong>.\nThe same is true for the <code class=\"language-text\">request.query</code> field that Express uses for the query parameters.</p>\n<p><em>What if we would like to restrict developers from using the <code class=\"language-text\">any</code> type?</em>\nFortunately, we have methods other than <em>tsconfig.json</em> to enforce a coding style.\nWhat we can do is use <strong><em>ESlint</em></strong> to manage\nour code.\nLet's install ESlint and its TypeScript extensions:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">npm</span> i -D eslint @typescript-eslint/eslint-plugin @typescript-eslint/parser</code></pre></div>\n<p>We will configure ESlint to <a href=\"https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/no-explicit-any.md\">disallow explicit any</a>.\nWrite the following rules to <em>.eslintrc.cjs</em>:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"parser\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"@typescript-eslint/parser\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"parserOptions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"ecmaVersion\"</span><span class=\"token operator\">:</span> <span class=\"token number\">11</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"sourceType\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"module\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"plugins\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"@typescript-eslint\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"rules\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token property\">\"@typescript-eslint/no-explicit-any\"</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span></span>  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>(Newer versions of ESlint have this rule on by default, so you don't necessarily need to add it separately.)</p>\n<p>Let us also set up a <strong>lint</strong> npm script to inspect the files with <em>.ts</em> extension by modifying the <em>package.json</em> file:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n  <span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"start\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ts-node index.ts\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"dev\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ts-node-dev index.ts\"</span><span class=\"token punctuation\">,</span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token property\">\"lint\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"eslint --ext .ts .\"</span></span>      <span class=\"token comment\">//  ...</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Finally, we'll need to enable the eslint configuration in our settings (<strong><em>Ctrl-Alt-S</em></strong>).\nRemember that the configuration to turn on in <strong><em>Languages &#x26; Frameworks->JavaScript->Code Quality Tools->ESLint</em></strong>.\nSelect the option <strong>Automatic ESLint configuration</strong> and check <strong><em>Run eslint --fix on save</em></strong>.\nNow lint will complain if we try to define a variable of type <code class=\"language-text\">any</code>:</p>\n<picture><img src=\"/static/0a15e0d0082903f41a4e618a61a3a0f0/5a190/13b.png\" alt=\"vscode showing ESlint complaining about using the any type\" srcset=\"/static/0a15e0d0082903f41a4e618a61a3a0f0/772e8/13b.png 200w,\n/static/0a15e0d0082903f41a4e618a61a3a0f0/e17e5/13b.png 400w,\n/static/0a15e0d0082903f41a4e618a61a3a0f0/5a190/13b.png 800w,\n/static/0a15e0d0082903f41a4e618a61a3a0f0/ad997/13b.png 1012w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p><a href=\"https://github.com/typescript-eslint/typescript-eslint\">@typescript-eslint</a> has a lot of TypeScript-specific ESlint rules,\nbut you can also use all basic ESlint rules in TypeScript projects.\nFor now, we should probably go with the recommended settings,\nand we will modify the rules as we go along whenever we find something we want to change the behavior of.</p>\n<p>On top of the recommended settings, we should try to get familiar with the coding style required in this part and <strong><em>set the semicolon at the end of each line of code to <code class=\"language-text\">required</code></em></strong>.</p>\n<p>So we will use the following <em>.eslintrc.cjs</em></p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"extends\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token string\">\"eslint:recommended\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"plugin:@typescript-eslint/recommended\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"plugin:@typescript-eslint/recommended-requiring-type-checking\"</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"plugins\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"@typescript-eslint\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"env\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"node\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"es6\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"rules\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"@typescript-eslint/semi\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"error\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"@typescript-eslint/explicit-function-return-type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"off\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"@typescript-eslint/explicit-module-boundary-types\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"off\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"@typescript-eslint/restrict-template-expressions\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"off\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"@typescript-eslint/restrict-plus-operands\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"off\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"@typescript-eslint/no-unused-vars\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token string\">\"error\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span> <span class=\"token property\">\"argsIgnorePattern\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^_\"</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"no-case-declarations\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"off\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"parser\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"@typescript-eslint/parser\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"parserOptions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"project\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"./tsconfig.json\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>You may have a few semicolons missing, but those are easy to add, and WebStorm should be able to add them when a file is saved.\nWe also have to solve the ESlint issues concerning the <code class=\"language-text\">any</code> type:</p>\n<picture><img src=\"/static/ac840b69eb378ed4ad658f6a6e0c9c93/5a190/50x.png\" alt=\"vscode error unsafe assignment of any value\" srcset=\"/static/ac840b69eb378ed4ad658f6a6e0c9c93/772e8/50x.png 200w,\n/static/ac840b69eb378ed4ad658f6a6e0c9c93/e17e5/50x.png 400w,\n/static/ac840b69eb378ed4ad658f6a6e0c9c93/5a190/50x.png 800w,\n/static/ac840b69eb378ed4ad658f6a6e0c9c93/c1b63/50x.png 1200w,\n/static/ac840b69eb378ed4ad658f6a6e0c9c93/0c3d0/50x.png 1414w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>We should disable some ESlint rules to get the data from the request body.</p>\n<p>Disabling <em><code class=\"language-text\">@typescript-eslint/no-unsafe-assignment</code></em> for the destructuring assignment\nand calling the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/Number\">Number</a> constructor to values is nearly enough:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">app<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/calculate\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token comment\">// eslint-disable-next-line @typescript-eslint/no-unsafe-assignment </span></span>  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> value1<span class=\"token punctuation\">,</span> value2<span class=\"token punctuation\">,</span> op <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">;</span>\n\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token function\">calculator</span><span class=\"token punctuation\">(</span><span class=\"token function\">Number</span><span class=\"token punctuation\">(</span>value1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">Number</span><span class=\"token punctuation\">(</span>value2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> op<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> result <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>However this still leaves one problem to deal with, the last parameter in the function call (<code class=\"language-text\">op</code>) is not safe:</p>\n<picture><img src=\"/static/cce29f96c60be50044d163a275933274/5a190/51x.png\" alt=\"vscode showing unsafe argument of any type assigned to parameter of type Operation\" srcset=\"/static/cce29f96c60be50044d163a275933274/772e8/51x.png 200w,\n/static/cce29f96c60be50044d163a275933274/e17e5/51x.png 400w,\n/static/cce29f96c60be50044d163a275933274/5a190/51x.png 800w,\n/static/cce29f96c60be50044d163a275933274/c1b63/51x.png 1200w,\n/static/cce29f96c60be50044d163a275933274/d4e7f/51x.png 1416w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>One option is to just disable the ESlint rule to make the error disappear:</p>\n<blockquote>\n<p><em>again you should be able to move your cursor to <code class=\"language-text\">op</code> and use the keyboard shortcut for context actions to disable the rule</em></p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">app<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/calculate\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// eslint-disable-next-line @typescript-eslint/no-unsafe-assignment</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> value1<span class=\"token punctuation\">,</span> value2<span class=\"token punctuation\">,</span> op <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">;</span>\n\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token comment\">// eslint-disable-next-line @typescript-eslint/no-unsafe-argument</span></span>  <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token function\">calculator</span><span class=\"token punctuation\">(</span><span class=\"token function\">Number</span><span class=\"token punctuation\">(</span>value1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">Number</span><span class=\"token punctuation\">(</span>value2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> op<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> result <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>We no longer have any ESLint errors but we don't have any validation.\nEven though we are using TypeScript, we should not rely on the user to give us proper values.\nWe need to validate the post data and provide a proper error message when the data is invalid:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">app<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/calculate\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// eslint-disable-next-line @typescript-eslint/no-unsafe-assignment</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> value1<span class=\"token punctuation\">,</span> value2<span class=\"token punctuation\">,</span> op <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">;</span>\n\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token operator\">!</span>value1 <span class=\"token operator\">||</span> <span class=\"token function\">isNaN</span><span class=\"token punctuation\">(</span><span class=\"token function\">Number</span><span class=\"token punctuation\">(</span>value1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">400</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> error<span class=\"token operator\">:</span> <span class=\"token string\">\"...\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span></span>\n  <span class=\"token comment\">// more validations here...</span>\n\n  <span class=\"token comment\">// eslint-disable-next-line @typescript-eslint/no-unsafe-argument</span>\n  <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token function\">calculator</span><span class=\"token punctuation\">(</span><span class=\"token function\">Number</span><span class=\"token punctuation\">(</span>value1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">Number</span><span class=\"token punctuation\">(</span>value2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> op<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> result <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Notice that we also added the <code class=\"language-text\">return</code> syntax in the function for information we send.\nWe will revisit shortly some techniques for how the <code class=\"language-text\">any</code> typed data (eg. the input an app receives from the user) can be <strong><em>narrowed</em></strong> to a more specific type (such as <code class=\"language-text\">number</code>).\n<em>When we properly narrow types, we won't need to silence the ESlint rules</em>.</p>\n<h3>Type assertion</h3>\n<p>Using a <a href=\"https://www.typescriptlang.org/docs/handbook/2/everyday-types.html#type-assertions\">type assertion</a>\nis a simple but <a href=\"https://ts.dev/style/#type-and-non-nullability-assertions\"><em>unsafe way</em></a> to keep the TypeScript compiler and Eslint quiet.\nLet us export the type Operation in <em>calculator.ts</em>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> type Operation <span class=\"token operator\">=</span> <span class=\"token string\">\"multiply\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"add\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"divide\"</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Now we can import <code class=\"language-text\">Operation</code> and use a <strong>type assertion</strong> to tell the TypeScript compiler what type <code class=\"language-text\">op</code> has:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> calculator<span class=\"token punctuation\">,</span> Operation <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./calculator\"</span><span class=\"token punctuation\">;</span></span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/calculate\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// eslint-disable-next-line @typescript-eslint/no-unsafe-assignment</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> value1<span class=\"token punctuation\">,</span> value2<span class=\"token punctuation\">,</span> op <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// validate the data here</span>\n\n  <span class=\"token comment\">// assert the type</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> operation <span class=\"token operator\">=</span> op <span class=\"token keyword\">as</span> Operation<span class=\"token punctuation\">;</span></span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token function\">calculator</span><span class=\"token punctuation\">(</span><span class=\"token function\">Number</span><span class=\"token punctuation\">(</span>value1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">Number</span><span class=\"token punctuation\">(</span>value2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> operation<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n  <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> result <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>The defined constant <code class=\"language-text\">operation</code> has now the type <code class=\"language-text\">Operation</code> and the compiler is perfectly happy.\nNotice we removed the Eslint rule comment before the call to <code class=\"language-text\">calculator()</code>.\nFurthermore, the type assertion can be done when an argument is passed to the function, removing the need for the <code class=\"language-text\">operation</code> variable:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">app<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/calculate\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// eslint-disable-next-line @typescript-eslint/no-unsafe-assignment</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> value1<span class=\"token punctuation\">,</span> value2<span class=\"token punctuation\">,</span> op <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// validate the data here</span>\n\n  <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token function\">calculator</span><span class=\"token punctuation\">(</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token function\">Number</span><span class=\"token punctuation\">(</span>value1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">Number</span><span class=\"token punctuation\">(</span>value2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> op <span class=\"token keyword\">as</span> Operation</span>  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n\n  <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> result <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Using a type assertion (or quieting an Eslint rule) is risky.\nIt leaves the TypeScript compiler off the hook, the compiler just trusts that we as developers know what we are doing.\nIf the asserted type does <strong><em>not</em></strong> have the right kind of value, the result will be a runtime error,\nso one must be pretty careful when validating the data if a type assertion is used.</p>\n<p>In the next chapter, we shall have a look at <a href=\"https://www.typescriptlang.org/docs/handbook/2/narrowing.html\">type narrowing</a>,\nwhich will provide a safer way of specifying types for external data.</p>\n</div>\n<div class=\"tasks\">\n<h3>Exercises 8.6-8.7</h3>\n<h4>8.6 Eslint</h4>\n<p>Configure your project to use the above ESlint settings and fix all the warnings.</p>\n<h4>8.7 WebExercises</h4>\n<p>Add an endpoint to your app for the exercise calculator.\nIt should be used by doing an HTTP POST request to the endpoint <strong><em><a href=\"http://localhost:3002/exercises\">http://localhost:3002/exercises</a></em></strong> with the input in the request body:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"daily_exercises\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2.5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"target\"</span><span class=\"token operator\">:</span> <span class=\"token number\">2.5</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The response is a JSON of the following form:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"periodLength\"</span><span class=\"token operator\">:</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"trainingDays\"</span><span class=\"token operator\">:</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"success\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"rating\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"ratingDescription\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"bad\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"target\"</span><span class=\"token operator\">:</span> <span class=\"token number\">2.5</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"average\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1.2142857142857142</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>If the body of the request is not in the right form, a response with the proper status code and an error message are given.\nThe error message is either</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n  error<span class=\"token operator\">:</span> <span class=\"token string\">\"parameters missing\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>or</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n  error<span class=\"token operator\">:</span> <span class=\"token string\">\"malformatted parameters\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>depending on the error.\nThe latter happens if the input values do not have the right type, i.e. they are not numbers or convertible to numbers.</p>\n<p>In this exercise, you might find it beneficial to use the <strong><code class=\"language-text\">explicit any</code></strong> type when handling the data in the request body.\nOur ESlint configuration is preventing this but you may unset this rule for a particular line by inserting the following comment as the previous line:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// eslint-disable-next-line @typescript-eslint/no-explicit-any</span></code></pre></div>\n<p>You might also get in trouble with rules <strong><em><code class=\"language-text\">no-unsafe-member-access</code></em></strong> and <strong><em><code class=\"language-text\">no-unsafe-assignment</code></em></strong>.\nThese rules may be ignored in this exercise.</p>\n<p>Notice that you need to have a correct setup to get the request body; see <a href=\"/part3/node_js_and_express#receiving-data\">part 3</a>.</p>\n</div>","frontmatter":{"mainImage":{"publicURL":"/static/ed8ae98c5d885b4d1928a681eefbe7c4/part-8.svg"},"part":8,"letter":"b","lang":"en"}}},"pageContext":{"part":8,"letter":"b","lang":"en"}}}