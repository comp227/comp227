{"componentChunkName":"component---src-templates-content-template-js","path":"/part8/typing_an_express_app","result":{"data":{"markdownRemark":{"html":"<div class=\"content\">\n<p>Now that we have a basic understanding of how TypeScript works and how to create small projects with it, it's time to start creating something useful.\nLet's create a new project with slightly more realistic use cases.\nJust go ahead and download this new empty repo by visiting this site:\n<a href=\"http://go.djosv.com/227labts\">http://go.djosv.com/227labts</a></p>\n<p>One major change from the previous part is that <strong><em>we're not going to use ts-node anymore</em></strong>.\nIt's a useful tool for starting out, but we should switch to the official TypeScript compiler that comes with the <em>typescript</em> npm package.\nThe official compiler generates and packages JavaScript files from the .ts files\nso that the <em>production version</em> has no Typescript.\nThis is what we want because browsers and Node can't execute TypeScript code directly.</p>\n<h3>Setting up the project</h3>\n<p>We will create a project for Miles Prower (<a href=\"https://en.wikipedia.org/wiki/Tails_(Sonic_the_Hedgehog)\">Tails</a>),\nwho loves flying small planes but has a difficult time managing his flight history.\nHe doesn't necessarily need a user interface, but he'd like to use some custom software with HTTP requests\nand retain the possibility of later adding a web-based user interface to the application.</p>\n<p>Let's start by creating our first real project: <em>Tails' flight diaries</em>.\nAs usual, run <code class=\"language-text\">npm init</code> and install the <strong><em>typescript</em></strong> package as a dev dependency.</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"> <span class=\"token function\">npm</span> i -D typescript</code></pre></div>\n<p>TypeScript's Native Compiler (<em>tsc</em>) can help us initialize our project by generating our <em>tsconfig.json</em> file.\nFirst, we need to add the <strong><em>tsc</em></strong> command to the list of executable scripts in <em>package.json</em> (unless you have installed <em>typescript</em> globally).\nEven if you installed TypeScript globally, you should always add it as a dev dependency to your project.</p>\n<p>The npm script for running <em>tsc</em> is set as follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ..</span>\n  <span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token property\">\"tsc\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"tsc\"</span></span>  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// ..</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This bare <code class=\"language-text\">tsc</code> command is often added to <code class=\"language-text\">scripts</code> so that other scripts can use it.\nDon't be surprised to find it set up within the project like this.</p>\n<p>We can now initialize our <em>tsconfig.json</em> by running:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"> <span class=\"token function\">npm</span> run tsc -- --init</code></pre></div>\n<blockquote>\n<p><strong><em>Notice the extra <code class=\"language-text\">--</code> before the actual argument!</em></strong>\nArguments before <code class=\"language-text\">--</code> are linked to the <strong><em>npm</em></strong> command,\nwhile the ones after that are linked to the command that is run through the script (i.e. <em>tsc</em> in this case).</p>\n</blockquote>\n<p>The <em>tsconfig.json</em> file we just created contains a lengthy list of every configuration available to us.\nHowever, most of them are commented out.\nStudying this file can help you find some configuration options you might need.\nIt is also completely okay to keep the commented lines, in case you might need them someday.</p>\n<p>At the moment, we want to uncomment line 52 (outDir) and set it to <code class=\"language-text\">./build/</code>,\nand also uncomment 88-89 (locals/parameters) and 91-92 (returns/switch).\nOnce uncommented those should all be set to true.</p>\n<p>Ideally we want to make sure the following are active:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"compilerOptions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"target\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ES6\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"outDir\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"./build/\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"module\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"commonjs\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"strict\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"noUnusedLocals\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"noUnusedParameters\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"noImplicitReturns\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"noFallthroughCasesInSwitch\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"esModuleInterop\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Let's go through each configuration:</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">option</th>\n<th align=\"left\">meaning</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><strong><code class=\"language-text\">target</code></strong></td>\n<td align=\"left\">the <em>ECMAScript</em> version to use when generating JavaScript. ES6 is supported by most browsers, so it is a good and safe option.</td>\n</tr>\n<tr>\n<td align=\"left\"><strong><code class=\"language-text\">outDir</code></strong></td>\n<td align=\"left\">location where the compiled code should be placed</td>\n</tr>\n<tr>\n<td align=\"left\"><strong><code class=\"language-text\">module</code></strong></td>\n<td align=\"left\">the system we'd like to use for the compiled code. Because we are using node, we specify <strong><em>CommonJS</em></strong>. This means we can use the old <code class=\"language-text\">require</code> syntax instead of the <code class=\"language-text\">import</code> one, which is not supported in older versions of <em>Node</em>, such as version 10.</td>\n</tr>\n<tr>\n<td align=\"left\"><strong><code class=\"language-text\">noUnusedLocals</code></strong><br/><strong><code class=\"language-text\">noUnusedParameters</code></strong></td>\n<td align=\"left\">prevents having unused local variables and/or unused parameters</td>\n</tr>\n<tr>\n<td align=\"left\"><strong><code class=\"language-text\">noImplicitReturns</code></strong></td>\n<td align=\"left\">checks all code paths in a function to ensure they return a value</td>\n</tr>\n<tr>\n<td align=\"left\"><strong><code class=\"language-text\">noFallthroughCasesInSwitch</code></strong></td>\n<td align=\"left\">ensures that, in a <strong><em>switch case</em></strong>, each case ends either with a <code class=\"language-text\">return</code> or a <code class=\"language-text\">break</code> statement</td>\n</tr>\n<tr>\n<td align=\"left\"><strong><code class=\"language-text\">esModuleInterop</code></strong></td>\n<td align=\"left\">allows interoperability between CommonJS and ES Modules; see more in the <a href=\"https://www.staging-typescript.org/tsconfig#esModuleInterop\">documentation</a></td>\n</tr>\n</tbody>\n</table>\n<p>Lastly, <strong><code class=\"language-text\">strict</code></strong> is a shorthand for multiple separate options:\n<code class=\"language-text\">noImplicitAny</code>, <code class=\"language-text\">noImplicitThis</code>, <code class=\"language-text\">alwaysStrict</code>, <code class=\"language-text\">strictBindCallApply</code>, <code class=\"language-text\">strictNullChecks</code>, <code class=\"language-text\">strictFunctionTypes</code> and <code class=\"language-text\">strictPropertyInitialization</code>.\nThey guide our coding style to use the TypeScript features more strictly.\nFor us, perhaps the most important is the already-familiar <a href=\"https://www.staging-typescript.org/tsconfig#noImplicitAny\"><strong><code class=\"language-text\">noImplicitAny</code></strong></a>.\nIt prevents implicitly setting type <code class=\"language-text\">any</code>, which can for example happen if you don't type the parameters of a function.\nDetails about the rest of the configurations can be found in the <a href=\"https://www.staging-typescript.org/tsconfig#strict\">tsconfig documentation</a>.\nUsing <code class=\"language-text\">strict</code> is suggested by the official documentation.</p>\n<p>Now that we have set our configuration, we can continue by installing <em>express</em> and, of course, also <em>@types/express</em>.\nAlso, since we intend to grow this project over time, we will use ESlint from the very beginning:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">npm</span> i express\n<span class=\"token function\">npm</span> i -D eslint @types/express @typescript-eslint/eslint-plugin @typescript-eslint/parser</code></pre></div>\n<p>Now our <em>package.json</em> should look like something like this, with differing versions depending on which node version you are using</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"flight-diary\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"version\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"1.0.0\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"description\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"main\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"index.js\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"tsc\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"tsc\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"author\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Powercat\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"license\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ISC\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"devDependencies\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"@types/express\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^4.17.17\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"@typescript-eslint/eslint-plugin\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^5.52.0\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"@typescript-eslint/parser\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^5.52.0\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"eslint\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^8.34.0\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"typescript\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^4.9.5\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"dependencies\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"express\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^4.18.2\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"devDependencies\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"@types/express\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^4.17.18\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"@typescript-eslint/eslint-plugin\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^6.7.3\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"@typescript-eslint/parser\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^6.7.3\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"eslint\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^8.50.0\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Let's also create a <em>.eslintrc.cjs</em> file with the following content:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"extends\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token string\">\"eslint:recommended\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"plugin:@typescript-eslint/recommended\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"plugin:@typescript-eslint/recommended-requiring-type-checking\"</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"plugins\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"@typescript-eslint\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"env\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"browser\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"es6\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"node\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"rules\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"@typescript-eslint/semi\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"error\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"@typescript-eslint/explicit-function-return-type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"off\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"@typescript-eslint/explicit-module-boundary-types\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"off\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"@typescript-eslint/restrict-template-expressions\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"off\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"@typescript-eslint/restrict-plus-operands\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"off\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"@typescript-eslint/no-unsafe-member-access\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"off\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"@typescript-eslint/no-unused-vars\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token string\">\"error\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span> <span class=\"token property\">\"argsIgnorePattern\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^_\"</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"no-case-declarations\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"off\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"parser\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"@typescript-eslint/parser\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"parserOptions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"project\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"./tsconfig.json\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Now we just need to set up our development environment, and we are ready to start writing some serious code.\nThere are many different options for this.\nOne option could be to use the familiar <em>nodemon</em> with <em>ts-node</em>.\nHowever, as we saw earlier, <em>ts-node-dev</em> does the same thing, so we will use that instead.\nSo, let's install <em>ts-node-dev</em>:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">npm</span> i -D ts-node-dev</code></pre></div>\n<p>We finally define a few more npm scripts, and voilà, we are ready to begin:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n  <span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"tsc\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"tsc\"</span><span class=\"token punctuation\">,</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token property\">\"dev\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ts-node-dev index.ts\"</span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token property\">\"lint\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"eslint --ext .ts .\"</span></span>  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>As you can see, there is a lot of stuff to go through before beginning the actual coding.\nWhen you are working on a real project, pay special attention to establishing your development process.\nTake the time needed to create a good setup for yourself and your team, so that everything runs smoothly in the long run.</p>\n<h3>Let there be code</h3>\n<p>Now we can finally start coding!\nAs always, we start by creating a <em>ping</em> endpoint, just to make sure everything is working.</p>\n<p>Here's the contents of the <em>index.ts</em> file:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> express <span class=\"token keyword\">from</span> <span class=\"token string\">'express'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">express</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>express<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token constant\">PORT</span> <span class=\"token operator\">=</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/ping'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">_req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'someone pinged here'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">'pong'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token constant\">PORT</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Server running on port </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token constant\">PORT</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>If we run the app with <code class=\"language-text\">npm run dev</code>, we can verify that a request to <a href=\"http://localhost:3000/ping\">http://localhost:3000/ping</a> gives the response <strong><em>pong</em></strong>, so our configuration is set!</p>\n<p>When starting the app with <code class=\"language-text\">npm run dev</code>, it runs in development mode.\nThe development mode is not suitable at all when we later operate the app in production.</p>\n<p>Let's create a <strong>production build</strong> by running the TypeScript compiler.\nSince we have defined the <em>outdir</em> in our tsconfig.json, nothing's left but to run the script <code class=\"language-text\">npm run tsc</code>.</p>\n<p>Just like magic, a native runnable JavaScript production build of the Express backend is created in file <em>index.js</em> inside the directory <em>build</em>.\nThe compiled code looks like this</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token string\">\"use strict\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> __importDefault <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>__importDefault<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">mod</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>mod <span class=\"token operator\">&amp;&amp;</span> mod<span class=\"token punctuation\">.</span>__esModule<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> mod <span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token string\">\"default\"</span><span class=\"token operator\">:</span> mod <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>exports<span class=\"token punctuation\">,</span> <span class=\"token string\">\"__esModule\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> value<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> express_1 <span class=\"token operator\">=</span> <span class=\"token function\">__importDefault</span><span class=\"token punctuation\">(</span><span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"express\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> express_1<span class=\"token punctuation\">.</span>default<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>express_1<span class=\"token punctuation\">.</span>default<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">PORT</span> <span class=\"token operator\">=</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">;</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/ping'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">_req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'someone pinged here'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">'pong'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token constant\">PORT</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Server running on port </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token constant\">PORT</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>If we run ESlint now, it will unfortunately interpret the compiler-generated files in the <em>build</em> directory.\nWe can prevent this by creating a <em>.eslintignore</em> file, which tells ESlint what to ignore.\nThis file behaves similar to git and <em>.gitignore</em>; you only need to list <code class=\"language-text\">build/</code> in the file.\nWe may still get warnings in WebStorm as we would also need to configure its settings to follow ESLint, but we will avoid that for now.</p>\n<p>Let's add an npm script for running the application in production mode:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n  <span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"tsc\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"tsc\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"dev\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ts-node-dev index.ts\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"lint\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"eslint --ext .ts .\"</span><span class=\"token punctuation\">,</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token property\">\"start\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"node build/index.js\"</span></span>  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>When we run the app with <code class=\"language-text\">npm start</code>, we can verify that the production build also works:</p>\n<picture><img src=\"/static/ad6e372ebeab79aae22648da54502e46/5a190/15a.png\" alt=\"browser showing pong from localhost:3000/ping\" srcset=\"/static/ad6e372ebeab79aae22648da54502e46/772e8/15a.png 200w,\n/static/ad6e372ebeab79aae22648da54502e46/e17e5/15a.png 400w,\n/static/ad6e372ebeab79aae22648da54502e46/5a190/15a.png 800w,\n/static/ad6e372ebeab79aae22648da54502e46/fe9f1/15a.png 883w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Now we have a working pipeline for developing our project.\nThe pipeline also ensures good code quality with the help of our compiler and ESlint.\nWith this base, we can start creating an app that we could deploy into a production environment.</p>\n</div>\n<div class=\"tasks\">\n<h3>Exercises 8.8-8.9</h3>\n<h4>Before you start the exercises</h4>\n<p>For this set of exercises, you will be developing a backend for an existing project called <strong>Patientia</strong>,\nwhich is a simple medical record application for doctors who handle diagnoses and basic health information of their patients.</p>\n<p>The <a href=\"https://classroom.github.com/a/Jggqp2fY\">frontend</a> has already been built by outsider experts and your job is to create a backend to support the existing code.</p>\n<h4>WARNING about IDEs</h4>\n<p>Quite often WebStorm or VSCode lose track of what is really happening in the code and it shows type or style-related warnings despite having fixed the code.\nIf this happens (to me it has happened quite often), just restart the TypeScript service and the editor as a last resort.\nIt is also good to double-check that everything really works by running the compiler and the ESlint from the command line with commands:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> run tsc\n<span class=\"token function\">npm</span> run lint</code></pre></div>\n<p>The command line will provide you with valid results.\nSo, be a little suspicious of the editor. 👀</p>\n<h4>8.8: Patientia backend, Step 1</h4>\n<p>From the <em>labts</em> repo that you cloned from <a href=\"http://go.djosv.com/227labts\">http://go.djosv.com/227labts</a>, initialize a new backend project that will work with the frontend in a new subfolder, named <em>medbackend</em>.\nConfigure ESlint and tsconfig with the same configurations as proposed in the material.\nDefine an endpoint that answers HTTP GET requests for route <strong><em>/api/ping</em></strong>.</p>\n<p>The project should be runnable with npm scripts, both in development mode and, as compiled code, in production mode.</p>\n<h4>8.9: Patientia backend, Step 2</h4>\n<p>Accept the <a href=\"https://classroom.github.com/a/Jggqp2fY\">patientia assignment</a></p>\n<p>Start the project with the help of the README file.</p>\n<p>You can run this command if you get an error message when trying to start the frontend:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">npm</span> update chokidar</code></pre></div>\n<p>You should be able to use the frontend without a functioning backend.</p>\n<p>Ensure that the backend answers the ping request that the <em>frontend</em> has made on startup.\nCheck the developer tools to make sure it works (<em>you don't want it to fail, like it does below</em>):</p>\n<picture><img src=\"/static/21b54a9306ff72e4b9f12f411a97bec9/5a190/16a.png\" alt=\"dev tools showing ping failed\" srcset=\"/static/21b54a9306ff72e4b9f12f411a97bec9/772e8/16a.png 200w,\n/static/21b54a9306ff72e4b9f12f411a97bec9/e17e5/16a.png 400w,\n/static/21b54a9306ff72e4b9f12f411a97bec9/5a190/16a.png 800w,\n/static/21b54a9306ff72e4b9f12f411a97bec9/c1b63/16a.png 1200w,\n/static/21b54a9306ff72e4b9f12f411a97bec9/c929c/16a.png 1218w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>You might also want to have a look at the <strong><em>console</em></strong> tab.\nIf something fails, <a href=\"/part3\">part 3</a> of the course shows how the problem can be solved.</p>\n</div>\n<div class=\"content\">\n<h3>Implementing the functionality</h3>\n<p>Finally, we are ready to start writing some code.</p>\n<p>Let's start from the basics.\nTails wants to be able to keep track of his experiences on his flight journeys.</p>\n<p>He wants to be able to save <em>diary entries</em>, which contain:</p>\n<ul>\n<li>The date of the entry</li>\n<li>Weather conditions (good, windy, rainy or stormy)</li>\n<li>Visibility (good, ok or poor)</li>\n<li>Free text detailing the experience</li>\n</ul>\n<p>We have obtained some sample data, which we will use as a base to build on.\nThe data is saved in JSON format and can be found <a href=\"https://github.com/comp227/misc/blob/main/diaryentries.json\">here</a>.</p>\n<p>The data looks like the following:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"date\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"2017-01-01\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"weather\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"rainy\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"visibility\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"poor\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"comment\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Pretty scary flight, I'm glad I'm alive\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"date\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"2017-04-01\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"weather\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"sunny\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"visibility\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"good\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"comment\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Everything went better than expected, no sign of Dr. Robotnik\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">]</span></code></pre></div>\n<p>Let's start by creating an endpoint that returns all flight diary entries.</p>\n<p>First, we need to make some decisions on how to structure our source code.\nWe should not mix configuration files with source code, so place source code under the <em>src</em> directory.\nLet's <strong>move <em>index.ts</em> to <em>src</em> and make the necessary changes to the npm scripts</strong>.</p>\n<p>Next, in the directory <em>src/routes</em>, place all <a href=\"/part4/structure_of_backend_application_introduction_to_testing\">routers</a>\nand modules which are responsible for specific resources like <strong><em>diaries</em></strong>.\nThis is a bit different than what we did in <a href=\"/part4\">part 4</a>,\nwhere we used the directory <em>src/controllers</em>.</p>\n<p>The router taking care of all diary endpoints is in <em>src/routes/diaries.ts</em> and looks like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> express <span class=\"token keyword\">from</span> <span class=\"token string\">'express'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> router <span class=\"token operator\">=</span> express<span class=\"token punctuation\">.</span><span class=\"token function\">Router</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nrouter<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">_req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Fetching all diaries!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nrouter<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">_req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Saving a diary!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> router<span class=\"token punctuation\">;</span></code></pre></div>\n<p>We'll route all requests to prefix <strong><em>/api/diaries</em></strong> to that specific router in <em>index.ts</em></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> express <span class=\"token keyword\">from</span> <span class=\"token string\">'express'</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">import</span> diaryRouter <span class=\"token keyword\">from</span> <span class=\"token string\">'./routes/diaries'</span><span class=\"token punctuation\">;</span></span><span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">express</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>express<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token constant\">PORT</span> <span class=\"token operator\">=</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/ping'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">_req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'someone pinged here'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">'pong'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"gatsby-highlight-code-line\">app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/diaries'</span><span class=\"token punctuation\">,</span> diaryRouter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token constant\">PORT</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Server running on port </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token constant\">PORT</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>And now, if we make an HTTP GET request to <a href=\"http://localhost:3000/api/diaries\">http://localhost:3000/api/diaries</a>, we should see the message: <code class=\"language-text\">Fetching all diaries!</code></p>\n<p>Next, let's serve the seed data (found <a href=\"https://github.com/comp227/misc/blob/main/diaryentries.json\">here</a>) from the app.\nWe will fetch the data and save it to <em>data/diaries.json</em>.</p>\n<p>We won't be writing the code for the actual data manipulations in the router.\nWe will create a <strong>service</strong> that takes care of the data manipulation instead.\nIt is *common practice to separate the <strong>business logic</strong> from the router code into modules*, which are quite often called <strong>services</strong>.\nThe name service originates from <a href=\"https://en.wikipedia.org/wiki/Domain-driven_design\">Domain-driven design</a>\nand was made popular by the <a href=\"https://spring.io/\">Spring</a> framework.</p>\n<p>Let's create a <em>src/services</em> directory and\nplace the <em>diaryService.ts</em> file in it.\nThe file contains two functions for fetching and saving diary entries:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> diaryData <span class=\"token keyword\">from</span> <span class=\"token string\">'../../data/diaries.json'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getEntries</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> diaryData<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">addDiary</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{</span>\n  getEntries<span class=\"token punctuation\">,</span>\n  addDiary\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>But something is not right:</p>\n<picture><img src=\"/static/7070a3e0d8b6c9f24415ec126d4a98f9/5a190/17c.png\" alt=\"vscode asking to consider using resolveJsonModule since can&#x27;t find module\" srcset=\"/static/7070a3e0d8b6c9f24415ec126d4a98f9/772e8/17c.png 200w,\n/static/7070a3e0d8b6c9f24415ec126d4a98f9/e17e5/17c.png 400w,\n/static/7070a3e0d8b6c9f24415ec126d4a98f9/5a190/17c.png 800w,\n/static/7070a3e0d8b6c9f24415ec126d4a98f9/c1b63/17c.png 1200w,\n/static/7070a3e0d8b6c9f24415ec126d4a98f9/27e9a/17c.png 1253w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>The hint says we might want to use <code class=\"language-text\">resolveJsonModule</code>.\nLet's uncomment it out in our tsconfig (line 38):</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"compilerOptions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"target\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ES6\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"outDir\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"./build/\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"module\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"commonjs\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"strict\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"noUnusedLocals\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"noUnusedParameters\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"noImplicitReturns\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"noFallthroughCasesInSwitch\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"esModuleInterop\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token property\">\"resolveJsonModule\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span></span>  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>And our problem is solved.</p>\n<p>Earlier, we observed how the compiler decided a variable's type by the value it was assigned.\nSimilarly, the compiler can interpret large data sets consisting of objects and arrays.\nDue to this, <strong><em>the compiler warns us if we suspiciously handle our JSON data</em></strong>.\nFor example, if we are handling a <code class=\"language-text\">Fraction[]</code> that only has a <code class=\"language-text\">numerator</code> and <code class=\"language-text\">denominator</code>,\nand we try to add an object that is missing a <code class=\"language-text\">denominator</code>, or has type conflicts\n(for example, the <code class=\"language-text\">numerator</code> has a <code class=\"language-text\">string</code> instead of a <code class=\"language-text\">number</code>),\nthe compiler can give us a warning.</p>\n<p>While the TypeScript compiler helps prevent most unwanted behavior, it's still safer if we define data types ourselves.</p>\n<p>Currently, we have a basic working TypeScript express app, but <strong>with barely any <em>typings</em> in the code</strong>.\nSince we know what type of data should be accepted for the <em><code class=\"language-text\">weather</code></em> and <em><code class=\"language-text\">visibility</code></em> fields,\nthere is no reason for us not to include their types in the code.</p>\n<p>Let's create a file for our types, <em>src/types.ts</em>, where we'll define all our types for this project.</p>\n<p>First, let's type the <code class=\"language-text\">Weather</code> and <code class=\"language-text\">Visibility</code> values using a <a href=\"https://www.typescriptlang.org/docs/handbook/advanced-types.html#union-types\">union type</a> of the allowed strings:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> type Weather <span class=\"token operator\">=</span> <span class=\"token string\">'sunny'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'rainy'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'cloudy'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'windy'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'stormy'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> type Visibility <span class=\"token operator\">=</span> <span class=\"token string\">'great'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'good'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'ok'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'poor'</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>And, from there, we can continue by creating a <code class=\"language-text\">DiaryEntry</code> type, which will be an <a href=\"https://www.typescriptlang.org/docs/handbook/2/everyday-types.html#interfaces\"><code class=\"language-text\">interface</code></a>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">DiaryEntry</span> <span class=\"token punctuation\">{</span>\n  id<span class=\"token operator\">:</span> number<span class=\"token punctuation\">;</span>\n  date<span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n  weather<span class=\"token operator\">:</span> Weather<span class=\"token punctuation\">;</span>\n  visibility<span class=\"token operator\">:</span> Visibility<span class=\"token punctuation\">;</span>\n  comment<span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>We can now try to type our imported JSON:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> diaryData <span class=\"token keyword\">from</span> <span class=\"token string\">'../../data/diaries.json'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> DiaryEntry <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'../types'</span><span class=\"token punctuation\">;</span></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> diaries<span class=\"token operator\">:</span> DiaryEntry<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> diaryData<span class=\"token punctuation\">;</span></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> getEntries <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> DiaryEntry<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">return</span> diaries<span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">addDiary</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{</span>\n  getEntries<span class=\"token punctuation\">,</span>\n  addDiary\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>But since the JSON already has its values declared, assigning a type for the data set results in an error:</p>\n<picture><img src=\"/static/d150c7365fb295a0f19c852253693b6a/5a190/19b.png\" alt=\"vscode showing string not assignable to weather error\" srcset=\"/static/d150c7365fb295a0f19c852253693b6a/772e8/19b.png 200w,\n/static/d150c7365fb295a0f19c852253693b6a/e17e5/19b.png 400w,\n/static/d150c7365fb295a0f19c852253693b6a/5a190/19b.png 800w,\n/static/d150c7365fb295a0f19c852253693b6a/c1b63/19b.png 1200w,\n/static/d150c7365fb295a0f19c852253693b6a/4cdc7/19b.png 1327w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>The end of the error message reveals the problem: the <code class=\"language-text\">weather</code> fields are incompatible.\nIn <em>types.ts</em>, <code class=\"language-text\">DiaryEntry</code> specified <code class=\"language-text\">weather</code> to be of type <code class=\"language-text\">Weather</code>, but\nthe TypeScript compiler in <em>diaryService.ts</em> inferred its type to be <code class=\"language-text\">string</code>.</p>\n<p>We can fix the problem by doing a <a href=\"http://www.typescriptlang.org/docs/handbook/2/everyday-types.html#type-assertions\">type assertion</a>.\nAs we already <a href=\"/part8/first_steps_with_type_script#type-assertion\">mentioned</a> <strong><em>type assertions should be done only if we are certain we know what we are doing!</em></strong></p>\n<p>If we assert the type of the variable <code class=\"language-text\">diaryData</code> to be <code class=\"language-text\">DiaryEntry</code> with the keyword <code class=\"language-text\">as</code>, everything should work:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// ..</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>DiaryEntry<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'../types'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> diaries<span class=\"token operator\">:</span> DiaryEntry<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> diaryData <span class=\"token keyword\">as</span> DiaryEntry<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></span>\n<span class=\"token keyword\">const</span> getEntries <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> DiaryEntry<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"token comment\">// ..</span></code></pre></div>\n<p><strong><em>Only use type assertions as a last resort.</em></strong>\nThere is always the danger that we assert an unfit type to an object and cause a nasty runtime error.\nWhile the compiler trusts you to know what you are doing when using <code class=\"language-text\">as</code>, by doing this,\nwe are not using the full power of TypeScript <em>but relying on the coder to secure the code</em>.</p>\n<p>In our case, we could change how we export our data so we can type it within the data file.\nSince we cannot use typings in a JSON file, we should *convert the JSON file to a ts file <strong>diaries.ts*</strong> which exports the typed data like so:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> DiaryEntry <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"../src/types\"</span><span class=\"token punctuation\">;</span></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> diaryEntries<span class=\"token operator\">:</span> DiaryEntry<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span></span>  <span class=\"token punctuation\">[</span> \n    <span class=\"token punctuation\">{</span>\n        <span class=\"token string\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"date\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"2017-01-01\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"weather\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"rainy\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"visibility\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"poor\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"comment\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Pretty scary flight, I'm glad I'm alive\"</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> \n\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> diaryEntries<span class=\"token punctuation\">;</span></span></code></pre></div>\n<p>Now, when we import the array, the compiler interprets it correctly and the <code class=\"language-text\">weather</code> and <code class=\"language-text\">visibility</code> fields are understood right.\nThis means we can remove our intermediate variable <code class=\"language-text\">diaryData</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">import</span> diaries <span class=\"token keyword\">from</span> <span class=\"token string\">'../../data/diaries'</span><span class=\"token punctuation\">;</span></span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> DiaryEntry <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'../types'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> getEntries <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> DiaryEntry<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> diaries<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// ..</span></code></pre></div>\n<p>Notice that, if we want to be able to save entries without a certain field, e.g. <em>comment</em>,\nwe could set the type of the field as\n<a href=\"http://www.typescriptlang.org/docs/handbook/interfaces.html#optional-properties\">optional</a>\nby adding <code class=\"language-text\">?</code> to the type declaration:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">DiaryEntry</span> <span class=\"token punctuation\">{</span>\n  id<span class=\"token operator\">:</span> number<span class=\"token punctuation\">;</span>\n  date<span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n  weather<span class=\"token operator\">:</span> Weather<span class=\"token punctuation\">;</span>\n  visibility<span class=\"token operator\">:</span> Visibility<span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">  comment<span class=\"token operator\">?</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>However, <em>we will not make this change to <code class=\"language-text\">DiaryEntry</code> and continue to require <code class=\"language-text\">comment</code></em>.</p>\n<h3>Node and JSON modules</h3>\n<p>Please be aware of a potential problem when using the tsconfig\n<a href=\"https://www.typescriptlang.org/tsconfig#resolveJsonModule\">resolveJsonModule</a> option:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"compilerOptions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token property\">\"resolveJsonModule\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span></span>  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>According to the node documentation for <a href=\"https://nodejs.org/api/modules.html#modules_file_modules\">file modules</a>,\n<strong><em>node will try to resolve modules in order of extensions</em></strong>:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"> <span class=\"token punctuation\">[</span><span class=\"token string\">\"js\"</span>, <span class=\"token string\">\"json\"</span>, <span class=\"token string\">\"node\"</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>In addition to that, by default, <em>ts-node</em> and <em>ts-node-dev</em> extend the list of possible node module extensions to:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"> <span class=\"token punctuation\">[</span><span class=\"token string\">\"js\"</span>, <span class=\"token string\">\"json\"</span>, <span class=\"token string\">\"node\"</span>, <span class=\"token string\">\"ts\"</span>, <span class=\"token string\">\"tsx\"</span><span class=\"token punctuation\">]</span></code></pre></div>\n<blockquote>\n<p><strong>FYI:</strong>: The validity of <em>.js</em>, <em>.json</em> and <em>.node</em> files as modules in TypeScript depend on environment configuration,\nincluding <strong><em>tsconfig</em></strong> options such as <code class=\"language-text\">allowJs</code> and <code class=\"language-text\">resolveJsonModule</code>.</p>\n</blockquote>\n<p>Consider a flat folder structure containing files:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">  ├── myModule.json\n  └── myModule.ts</code></pre></div>\n<p>In TypeScript, with the <code class=\"language-text\">resolveJsonModule</code> option set to true, the file <em>myModule.json</em> becomes a valid node module.\nNow, imagine a scenario where we wish to take the file <em>myModule.ts</em> into use:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> myModule <span class=\"token keyword\">from</span> <span class=\"token string\">\"./myModule\"</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Looking closely at the order of node module extensions:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"> <span class=\"token punctuation\">[</span><span class=\"token string\">\"js\"</span>, <span class=\"token string\">\"json\"</span>, <span class=\"token string\">\"node\"</span>, <span class=\"token string\">\"ts\"</span>, <span class=\"token string\">\"tsx\"</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p><strong>We notice that the <em>.json</em> file extension takes precedence over <em>.ts</em> and so <em>myModule.json</em> will be imported and not <em>myModule.ts</em></strong>.</p>\n<p>To avoid time-eating bugs, <strong>use unique filenames for all files</strong>.</p>\n<h3>Utility Types</h3>\n<p>Sometimes, we might want to use a particular type modification.\nFor example, consider a page for listing some data, some of which is sensitive and some of which is non-sensitive.\nWe might want to be sure that no sensitive data is used or displayed.\nWe could <strong><em>pick</em></strong> the fields of a type we allow to be used to enforce this.\nWe can do that by using the utility type <a href=\"https://www.typescriptlang.org/docs/handbook/utility-types.html#picktype-keys\"><code class=\"language-text\">Pick</code></a>.</p>\n<p>In our project, we should consider that Tails might want to create a listing of all his diary entries <strong>excluding</strong> the comment field since, during a very scary flight,\nhe might end up writing something he wouldn't necessarily want to show anyone else.</p>\n<blockquote>\n<p><em>I don't know how kind Tails would be to Knuckles.</em></p>\n</blockquote>\n<p>The <a href=\"https://www.typescriptlang.org/docs/handbook/utility-types.html#picktype-keys\"><code class=\"language-text\">Pick</code></a> utility type\nallows us to choose which fields of an existing type we want to use.\n<code class=\"language-text\">Pick</code> can be used to either construct a completely new type or to inform a function what it should return on runtime.\nUtility types are a special kind of type, but they can be used just like regular types.</p>\n<p>In our case, to create a censored version of the <code class=\"language-text\">DiaryEntry</code> for public displays, we can use <code class=\"language-text\">Pick</code> in the function declaration:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> getNonSensitiveEntries <span class=\"token operator\">=</span>\n  <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Pick<span class=\"token operator\">&lt;</span>DiaryEntry<span class=\"token punctuation\">,</span> <span class=\"token string\">'id'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'date'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'weather'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'visibility'</span><span class=\"token operator\">></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>and the compiler would expect the function to return an array of values of the modified <code class=\"language-text\">DiaryEntry</code> type, which includes only the four selected fields.</p>\n<p>In this case, we want to exclude only one field, so it would be even better to use the <a href=\"https://www.typescriptlang.org/docs/handbook/utility-types.html#omittype-keys\"><code class=\"language-text\">Omit</code></a>\nutility type, which we can use to declare which fields to exclude:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> getNonSensitiveEntries <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Omit<span class=\"token operator\">&lt;</span>DiaryEntry<span class=\"token punctuation\">,</span> <span class=\"token string\">'comment'</span><span class=\"token operator\">></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>To improve the readability, we define a <a href=\"https://www.typescriptlang.org/docs/handbook/2/everyday-types.html#type-aliases\"><strong>type alias</strong></a> <code class=\"language-text\">NonSensitiveDiaryEntry</code> in the file <em>types.ts</em>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> type NonSensitiveDiaryEntry <span class=\"token operator\">=</span> Omit<span class=\"token operator\">&lt;</span>DiaryEntry<span class=\"token punctuation\">,</span> <span class=\"token string\">'comment'</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>The code becomes now much more clear and more descriptive:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> diaries <span class=\"token keyword\">from</span> <span class=\"token string\">'../../data/entries'</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> NonSensitiveDiaryEntry<span class=\"token punctuation\">,</span> DiaryEntry <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'../types'</span><span class=\"token punctuation\">;</span></span>\n<span class=\"token keyword\">const</span> getEntries <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> DiaryEntry<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> diaries<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> getNonSensitiveEntries <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> NonSensitiveDiaryEntry<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span>  <span class=\"token keyword\">return</span> diaries<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">addDiary</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{</span>\n  getEntries<span class=\"token punctuation\">,</span>\n<span class=\"gatsby-highlight-code-line\">  getNonSensitiveEntries<span class=\"token punctuation\">,</span></span>  addDiary\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>One thing in our application is a cause for concern.\nIn <code class=\"language-text\">getNonSensitiveEntries</code>, <strong>we are returning the complete diary entries, and <em>no error is given</em> despite typing!</strong></p>\n<p>This happens because <a href=\"http://www.typescriptlang.org/docs/handbook/type-compatibility.html\">TypeScript only checks</a>\nwhether we have all of the required fields or not, but <strong><em>excess fields are not prohibited</em></strong>.\nIn our case, this means that it is <strong>not prohibited</strong> to return an object of type <code class=\"language-text\">DiaryEntry[]</code>, but <em>if we were to try to access the <code class=\"language-text\">comment</code> field,\nit would not be possible because we would be accessing a field that TypeScript is unaware of</em> (even though it exists).</p>\n<p>Unfortunately, this can lead to unwanted behavior if you are not aware of what you are doing;\nthe situation is valid as far as TypeScript is concerned, but you are most likely allowing use that is not wanted.\nIf we were now to return all of the diary entries from the <code class=\"language-text\">getNonSensitiveEntries</code> function to the frontend,\nwe would be <strong><em>leaking the unwanted fields to the requesting browser</em></strong> - even though our types seem to imply otherwise!</p>\n<p>Because TypeScript doesn't modify the actual data but only its type, <strong><em>we need to exclude the fields ourselves</em></strong>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> diaries <span class=\"token keyword\">from</span> <span class=\"token string\">'../../data/entries.ts'</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> NonSensitiveDiaryEntry<span class=\"token punctuation\">,</span> DiaryEntry <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'../types'</span>\n\n<span class=\"token keyword\">const</span> getEntries <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> DiaryEntry<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> diaries\n<span class=\"token punctuation\">}</span>\n\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> getNonSensitiveEntries <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> NonSensitiveDiaryEntry<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">return</span> diaries<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> id<span class=\"token punctuation\">,</span> date<span class=\"token punctuation\">,</span> weather<span class=\"token punctuation\">,</span> visibility <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    id<span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">    date<span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">    weather<span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">    visibility<span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">addDiary</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{</span>\n  getEntries<span class=\"token punctuation\">,</span>\n  getNonSensitiveEntries<span class=\"token punctuation\">,</span>\n  addDiary\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>If we now try to return this data with the basic <em>DiaryEntry</em> type, i.e. if we type the function like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> getNonSensitiveEntries <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> DiaryEntry<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></code></pre></div>\n<p>we would get the following error:</p>\n<picture><img src=\"/static/8cdb4acd05f9b03ddaab9870e0036fe7/5a190/22b.png\" alt=\"vs code error - comment is declared here\" srcset=\"/static/8cdb4acd05f9b03ddaab9870e0036fe7/772e8/22b.png 200w,\n/static/8cdb4acd05f9b03ddaab9870e0036fe7/e17e5/22b.png 400w,\n/static/8cdb4acd05f9b03ddaab9870e0036fe7/5a190/22b.png 800w,\n/static/8cdb4acd05f9b03ddaab9870e0036fe7/c1b63/22b.png 1200w,\n/static/8cdb4acd05f9b03ddaab9870e0036fe7/d2f5c/22b.png 1363w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<blockquote>\n<p>If we kept <code class=\"language-text\">DiaryEntry</code>'s <em><code class=\"language-text\">comment</code></em> field optional (using the <code class=\"language-text\">?</code> operator), no error would appear.</p>\n</blockquote>\n<p>Again, the last line of the error message is the most helpful one.\n<strong>Let's change it back to <code class=\"language-text\">NonSensitiveDiaryEntry</code>.</strong></p>\n<p>Utility types include many handy tools,\nand it is worth it to take some time to study <a href=\"https://www.typescriptlang.org/docs/handbook/utility-types.html\">the documentation</a>.</p>\n<p>Finally, we can complete the route which returns all diary entries:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> express <span class=\"token keyword\">from</span> <span class=\"token string\">'express'</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">import</span> diaryService <span class=\"token keyword\">from</span> <span class=\"token string\">'../services/diaryService'</span><span class=\"token punctuation\">;</span></span>\n<span class=\"token keyword\">const</span> router <span class=\"token operator\">=</span> express<span class=\"token punctuation\">.</span><span class=\"token function\">Router</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nrouter<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">_req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>diaryService<span class=\"token punctuation\">.</span><span class=\"token function\">getNonSensitiveEntries</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nrouter<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">_req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Saving a diary!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> router<span class=\"token punctuation\">;</span></code></pre></div>\n<p>The response is what we expect it to be:</p>\n<picture><img src=\"/static/8422bbc90518eac3dc4f6cc7c0ab9882/5a190/26.png\" alt=\"browser api/diaries shows three json objects\" srcset=\"/static/8422bbc90518eac3dc4f6cc7c0ab9882/772e8/26.png 200w,\n/static/8422bbc90518eac3dc4f6cc7c0ab9882/e17e5/26.png 400w,\n/static/8422bbc90518eac3dc4f6cc7c0ab9882/5a190/26.png 800w,\n/static/8422bbc90518eac3dc4f6cc7c0ab9882/c1b63/26.png 1200w,\n/static/8422bbc90518eac3dc4f6cc7c0ab9882/b4cdf/26.png 1417w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n</div>\n<div class=\"tasks\">\n<h3>Exercises 8.10-8.11</h3>\n<p>Similarly to Tails' flight service, Patientia will not use a real database\nbut instead use hardcoded data that is in the files <a href=\"https://github.com/comp227/misc/blob/main/diagnoses.ts\">diagnoses.ts</a>\nand <a href=\"https://github.com/comp227/misc/blob/main/patients.ts\">patients.ts</a>.\nGet the files and store those in a directory called <em>data</em> in your project.\nAll data modification can be done in runtime memory, so during this part, it is <em>not necessary to write to a file</em>.</p>\n<h4>8.10: Patientia backend, Step 3</h4>\n<p>Create a type <code class=\"language-text\">Diagnosis</code> and use it to create endpoint <strong><em>/api/diagnoses</em></strong> for fetching all diagnoses with HTTP GET.</p>\n<p>Structure your code properly by using meaningfully-named directories and files.</p>\n<blockquote>\n<p><strong>Notice</strong> that <em>diagnoses</em> may or may not contain the field <code class=\"language-text\">latin</code>.\nYou might want to use <a href=\"https://www.typescriptlang.org/docs/handbook/2/everyday-types.html#optional-properties\">optional properties</a> in the type definition.</p>\n</blockquote>\n<h4>8.11: Patientia backend, Step 4</h4>\n<p>Create data type <code class=\"language-text\">Patient</code> and set up the GET endpoint <strong><em>/api/patients</em></strong> which returns all patients to the frontend, excluding field <code class=\"language-text\">ssn</code>.\nUse a <a href=\"https://www.typescriptlang.org/docs/handbook/utility-types.html\">utility type</a>\nto make sure you are selecting and returning only the wanted fields.</p>\n<p>In this exercise, you may assume that field <code class=\"language-text\">gender</code> has type <code class=\"language-text\">string</code>.</p>\n<p>Try the endpoint with your browser and ensure that <code class=\"language-text\">ssn</code> is not included in the response:</p>\n<picture><img src=\"/static/7df91958cb00313a0da7832ed72f3e5a/5a190/22g.png\" alt=\"api/patients browser shows no ssn in patients json\" srcset=\"/static/7df91958cb00313a0da7832ed72f3e5a/772e8/22g.png 200w,\n/static/7df91958cb00313a0da7832ed72f3e5a/e17e5/22g.png 400w,\n/static/7df91958cb00313a0da7832ed72f3e5a/5a190/22g.png 800w,\n/static/7df91958cb00313a0da7832ed72f3e5a/0f246/22g.png 1118w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>After creating the endpoint, ensure that the <em>frontend</em> shows the list of patients:</p>\n<picture><img src=\"/static/3b2b91dc869b4aabdd94721b5ba3006e/5a190/22h.png\" alt=\"browser showing list of patients\" srcset=\"/static/3b2b91dc869b4aabdd94721b5ba3006e/772e8/22h.png 200w,\n/static/3b2b91dc869b4aabdd94721b5ba3006e/e17e5/22h.png 400w,\n/static/3b2b91dc869b4aabdd94721b5ba3006e/5a190/22h.png 800w,\n/static/3b2b91dc869b4aabdd94721b5ba3006e/c1b63/22h.png 1200w,\n/static/3b2b91dc869b4aabdd94721b5ba3006e/29007/22h.png 1600w,\n/static/3b2b91dc869b4aabdd94721b5ba3006e/c263c/22h.png 1631w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n</div>\n<div class=\"content\">\n<h3>Preventing an accidental undefined result</h3>\n<p>Let's extend the backend to support fetching one specific entry with an HTTP GET request to route <strong><em>api/diaries/:id</em></strong>.</p>\n<p>Let's extend the <code class=\"language-text\">DiaryService</code> with a <code class=\"language-text\">findById</code> function:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// ...</span>\n\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> findById <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>id<span class=\"token operator\">:</span> number<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token parameter\">DiaryEntry</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">return</span> diaries<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">d</span> <span class=\"token operator\">=></span> d<span class=\"token punctuation\">.</span>id <span class=\"token operator\">===</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{</span>\n  getEntries<span class=\"token punctuation\">,</span>\n  getNonSensitiveEntries<span class=\"token punctuation\">,</span>\n  addDiary<span class=\"token punctuation\">,</span>\n<span class=\"gatsby-highlight-code-line\">  findById</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>But once again, a new problem emerges:</p>\n<picture><img src=\"/static/e37e399ad34ca3ec49bad453bfa91710/5a190/23e.png\" alt=\"vscode error cant assign undefined to DiaryEntry\" srcset=\"/static/e37e399ad34ca3ec49bad453bfa91710/772e8/23e.png 200w,\n/static/e37e399ad34ca3ec49bad453bfa91710/e17e5/23e.png 400w,\n/static/e37e399ad34ca3ec49bad453bfa91710/5a190/23e.png 800w,\n/static/e37e399ad34ca3ec49bad453bfa91710/0f67e/23e.png 921w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>The issue is that there is no guarantee that an entry with the specified id can be found.\nThankfully Typescript made us aware of this problem before running the code.\nA comparable Javascript solution would not raise any warnings.\nIn the worst-case scenario,\nwe could have ended up returning an <code class=\"language-text\">undefined</code> object instead of informing the user about the specified entry not being found.</p>\n<p>In these cases, we must decide what the <strong><em>return value</em></strong> should be if an object is not found, and how to handle that case.\nThe array's <code class=\"language-text\">find</code> method returns <code class=\"language-text\">undefined</code> if the object is not found, and this is fine.\nWe can solve our problem by typing the return value as follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> findById <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>id<span class=\"token operator\">:</span> number<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> DiaryEntry <span class=\"token operator\">|</span> <span class=\"token parameter\"><span class=\"token keyword\">undefined</span></span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span>  <span class=\"token keyword\">return</span> diaries<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">d</span> <span class=\"token operator\">=></span> d<span class=\"token punctuation\">.</span>id <span class=\"token operator\">===</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> </code></pre></div>\n<p>The route handler in <em>diaries.ts</em> is the following:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// ...</span>\n\nrouter<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/:id'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> diary <span class=\"token operator\">=</span> diaryService<span class=\"token punctuation\">.</span><span class=\"token function\">findById</span><span class=\"token punctuation\">(</span><span class=\"token function\">Number</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>diary<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>diary<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">sendStatus</span><span class=\"token punctuation\">(</span><span class=\"token number\">404</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// ...</span></code></pre></div>\n<h3>Adding a new diary</h3>\n<p>Let's start building the HTTP POST endpoint for adding new flight entries.\nThe new entries should have the same type as the existing data.</p>\n<p>The code handling of the response looks as follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">router<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>date<span class=\"token punctuation\">,</span> weather<span class=\"token punctuation\">,</span> visibility<span class=\"token punctuation\">,</span> comment<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> addedEntry <span class=\"token operator\">=</span> diaryService<span class=\"token punctuation\">.</span><span class=\"token function\">addDiary</span><span class=\"token punctuation\">(</span>\n    date<span class=\"token punctuation\">,</span>\n    weather<span class=\"token punctuation\">,</span>\n    visibility<span class=\"token punctuation\">,</span>\n    comment<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span>addedEntry<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>The corresponding method in <code class=\"language-text\">diaryService</code> looks like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>\n  NonSensitiveDiaryEntry<span class=\"token punctuation\">,</span>\n  DiaryEntry<span class=\"token punctuation\">,</span>\n<span class=\"gatsby-highlight-code-line\">  Visibility<span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">  Weather</span><span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'../types'</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token keyword\">const</span> addDiary <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n    date<span class=\"token operator\">:</span> string<span class=\"token punctuation\">,</span> weather<span class=\"token operator\">:</span> Weather<span class=\"token punctuation\">,</span> visibility<span class=\"token operator\">:</span> Visibility<span class=\"token punctuation\">,</span> comment<span class=\"token operator\">:</span> string\n  <span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token parameter\">DiaryEntry</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token keyword\">const</span> newDiaryEntry <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    id<span class=\"token operator\">:</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>diaries<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">d</span> <span class=\"token operator\">=></span> d<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n    date<span class=\"token punctuation\">,</span>\n    weather<span class=\"token punctuation\">,</span>\n    visibility<span class=\"token punctuation\">,</span>\n    comment<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  diaries<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>newDiaryEntry<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> newDiaryEntry<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>As you can see, the <code class=\"language-text\">addDiary</code> function is becoming quite hard to read now that we have all the fields as separate parameters.\nIt might be better to just <em>send the data as an object <code class=\"language-text\">{}</code></em> to the function:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">router<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>date<span class=\"token punctuation\">,</span> weather<span class=\"token punctuation\">,</span> visibility<span class=\"token punctuation\">,</span> comment<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> addedEntry <span class=\"token operator\">=</span> diaryService<span class=\"token punctuation\">.</span><span class=\"token function\">addDiary</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span></span>    date<span class=\"token punctuation\">,</span>\n    weather<span class=\"token punctuation\">,</span>\n    visibility<span class=\"token punctuation\">,</span>\n    comment<span class=\"token punctuation\">,</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span>addedEntry<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>But wait, <em>what is the type of this object?</em>\nIt is not exactly a <code class=\"language-text\">DiaryEntry</code>, since it is still missing the <code class=\"language-text\">id</code> field.\nIt may be useful <strong><em>to create a new type, <code class=\"language-text\">NewDiaryEntry</code></em></strong>, for an entry that hasn't been saved yet.\nLet's create that in <em>types.ts</em> using the existing <code class=\"language-text\">DiaryEntry</code> type and the <a href=\"https://www.typescriptlang.org/docs/handbook/utility-types.html#omittype-keys\"><code class=\"language-text\">Omit</code></a> utility type:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> type NewDiaryEntry <span class=\"token operator\">=</span> Omit<span class=\"token operator\">&lt;</span>DiaryEntry<span class=\"token punctuation\">,</span> <span class=\"token string\">'id'</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Now we can use the new type in our DiaryService,\nand destructure the new entry object when creating an entry to be saved:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> DiaryEntry<span class=\"token punctuation\">,</span> NonSensitiveDiaryEntry<span class=\"token punctuation\">,</span> NewDiaryEntry <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'../types'</span><span class=\"token punctuation\">;</span></span>\n<span class=\"token comment\">// ...</span>\n\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> addDiary <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>entry<span class=\"token operator\">:</span> NewDiaryEntry<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token parameter\">DiaryEntry</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span>  <span class=\"token keyword\">const</span> newDiaryEntry <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    id<span class=\"token operator\">:</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>diaries<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">d</span> <span class=\"token operator\">=></span> d<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token operator\">...</span>entry</span>  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  diaries<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>newDiaryEntry<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> newDiaryEntry<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Now the code looks much cleaner!</p>\n<blockquote>\n<p>While the code looks better we still have some complaints in <em>diaries.ts</em>:</p>\n<picture><img src=\"/static/de0dafdbb8f6975cae36246a6bd56717/5a190/43.png\" alt=\"vscode error unsafe assignment of any value\" srcset=\"/static/de0dafdbb8f6975cae36246a6bd56717/772e8/43.png 200w,\n/static/de0dafdbb8f6975cae36246a6bd56717/e17e5/43.png 400w,\n/static/de0dafdbb8f6975cae36246a6bd56717/5a190/43.png 800w,\n/static/de0dafdbb8f6975cae36246a6bd56717/000c7/43.png 1137w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>The cause is the ESlint rule\n<a href=\"https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/no-unsafe-assignment.md\">@typescript-eslint/no-unsafe-assignment</a>\nthat prevents us from assigning the fields of a request body to variables.</p>\n<p>For the time being, let us just ignore the ESlint rule from the whole file by adding the following as the first line of <em>diaries.ts</em>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/* eslint-disable @typescript-eslint/no-unsafe-assignment */</span></code></pre></div>\n</blockquote>\n<p>Now the application is ready to receive HTTP POST requests for new diary entries of the correct type!</p>\n<h3>Proofing requests</h3>\n<p>There are plenty of things that can go wrong when we accept data from outside sources.\nApplications rarely work completely on their own, and we are forced to live with the fact that <strong>data from sources outside of our system <em>cannot be fully trusted</em></strong>.\nWhen we receive data from an outside source, there is no way it can already be typed when we receive it.\nWe must decide how to handle the uncertainty that comes with this.</p>\n<p>The disabled ESlint rule was hinting to us that the following assignment is risky:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> newDiaryEntry <span class=\"token operator\">=</span> diaryService<span class=\"token punctuation\">.</span><span class=\"token function\">addDiary</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  date<span class=\"token punctuation\">,</span>\n  weather<span class=\"token punctuation\">,</span>\n  visibility<span class=\"token punctuation\">,</span>\n  comment<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>We want some assurance that the object in a POST request has the correct type.\nLet's define a function <code class=\"language-text\">toNewDiaryEntry</code> that receives the request body as a parameter and returns a properly-typed <code class=\"language-text\">NewDiaryEntry</code> object.\nThe function shall be defined further below in the file <em>src/utils.ts</em>.</p>\n<p>Here's how the <em>diaries.ts</em> routes that function:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">import</span> toNewDiaryEntry <span class=\"token keyword\">from</span> <span class=\"token string\">'../utils'</span><span class=\"token punctuation\">;</span></span>\n<span class=\"token comment\">// ...</span>\n\nrouter<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">const</span> newDiaryEntry <span class=\"token operator\">=</span> <span class=\"token function\">toNewDiaryEntry</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">const</span> addedEntry <span class=\"token operator\">=</span> diaryService<span class=\"token punctuation\">.</span><span class=\"token function\">addDiary</span><span class=\"token punctuation\">(</span>newDiaryEntry<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>    res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span>addedEntry<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token operator\">:</span> unknown<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> errorMessage <span class=\"token operator\">=</span> <span class=\"token string\">'Something went wrong.'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>error <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      errorMessage <span class=\"token operator\">+=</span> <span class=\"token string\">' Error: '</span> <span class=\"token operator\">+</span> error<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">400</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>errorMessage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>We can now also <strong>remove the first line that ignores the ESlint rule <em>no-unsafe-assignment</em></strong>.</p>\n<p>Since we are now writing secure code and trying to ensure that we are getting exactly the data we want from the requests,\nwe should get started with parsing and validating each field we are expecting to receive.</p>\n<p><em>util.ts</em> and <code class=\"language-text\">toNewDiaryEntry</code> resemble this:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> NewDiaryEntry <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./types'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> toNewDiaryEntry <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>object<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token parameter\">NewDiaryEntry</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> newEntry<span class=\"token operator\">:</span> NewDiaryEntry <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> newEntry<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> toNewDiaryEntry<span class=\"token punctuation\">;</span></code></pre></div>\n<p>The function should <em>parse each field and make sure that the return value is exactly of type <code class=\"language-text\">NewDiaryEntry</code></em>.\nThis means we should check each field separately.</p>\n<p>Once again, we have a type issue: <em>what is the type of the parameter <code class=\"language-text\">object</code>?</em>\nSince the <code class=\"language-text\">object</code> <strong>is</strong> the body of a request, Express has typed it as <code class=\"language-text\">any</code>.\nSince the idea of this function is to map fields of <code class=\"language-text\">unknown</code> type to fields of the correct type and check whether they are defined as expected,\nthis might be the rare case where we <strong>want to allow the <code class=\"language-text\">any</code> type</strong>.</p>\n<p>However, if we type the object as <code class=\"language-text\">any</code>, ESlint complains about that:</p>\n<picture><img src=\"/static/3eb9de5fad27618276ad1c1cd28eb8b1/5a190/61new.png\" alt=\"vscode eslint showing object should be typed something non-any and that its defined but never used\" srcset=\"/static/3eb9de5fad27618276ad1c1cd28eb8b1/772e8/61new.png 200w,\n/static/3eb9de5fad27618276ad1c1cd28eb8b1/e17e5/61new.png 400w,\n/static/3eb9de5fad27618276ad1c1cd28eb8b1/5a190/61new.png 800w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>We could ignore the lint rule but a better idea is to follow one of the editor's context actions and <strong><em>set the parameter type to <code class=\"language-text\">unknown</code></em></strong>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> NewDiaryEntry <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./types'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> toNewDiaryEntry <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>object<span class=\"token operator\">:</span> unknown<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token parameter\">NewDiaryEntry</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span>  <span class=\"token keyword\">const</span> newEntry<span class=\"token operator\">:</span> NewDiaryEntry <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> newEntry<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> toNewDiaryEntry<span class=\"token punctuation\">;</span></code></pre></div>\n<p><a href=\"https://www.typescriptlang.org/docs/handbook/2/functions.html#unknown\"><strong>unknown</strong></a> is the ideal type for our kind of situation of input validation,\nsince we don't yet need to define the type to match <code class=\"language-text\">any</code> type, but can first verify the type and then confirm the expected type.\nWith the use of <code class=\"language-text\">unknown</code>, we also don't need to worry about the <code class=\"language-text\">@typescript-eslint/no-explicit-any</code> ESlint rule, since we are not using <code class=\"language-text\">any</code>.\nHowever, we may still need to use <code class=\"language-text\">any</code> when:</p>\n<ul>\n<li>we are not yet sure about the type and</li>\n<li>we need to access properties of an <code class=\"language-text\">any</code> object to validate or type-check the property values themselves.</li>\n</ul>\n<blockquote>\n<h4>A sidenote about reducing the number of errors while generating code</h4>\n<p>*If you are like me and hate having code in a broken state for a long time due to incomplete typing, you could start <strong>faking</strong> the function:*</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> toNewDiaryEntry <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>object<span class=\"token operator\">:</span> unknown<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token parameter\">NewDiaryEntry</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\n console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>object<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// no more unused object error</span>\n <span class=\"token keyword\">const</span> newEntry<span class=\"token operator\">:</span> NewDiaryEntry <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n   weather<span class=\"token operator\">:</span> <span class=\"token string\">'cloudy'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// fake the return value</span>\n   visibility<span class=\"token operator\">:</span> <span class=\"token string\">'great'</span><span class=\"token punctuation\">,</span>\n   date<span class=\"token operator\">:</span> <span class=\"token string\">'2022-1-1'</span><span class=\"token punctuation\">,</span>\n   comment<span class=\"token operator\">:</span> <span class=\"token string\">'fake news'</span>\n <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n <span class=\"token keyword\">return</span> newEntry<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><em>So before the real data and types are ready to use, I'm just returning here something that has the right type.\nThe code continues to work and I feel less uninhibited rage.</em></p>\n</blockquote>\n<h3>Type guards</h3>\n<p>Let's create parsers for each of the fields of the parameter <em><code class=\"language-text\">object: unknown</code></em>.</p>\n<p>To validate the <code class=\"language-text\">comment</code> field, let's check that it exists and that it is a <code class=\"language-text\">string</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> parseComment <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>comment<span class=\"token operator\">:</span> unknown<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token parameter\">string</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>comment <span class=\"token operator\">||</span> <span class=\"token operator\">!</span><span class=\"token function\">isString</span><span class=\"token punctuation\">(</span>comment<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Incorrect or missing comment'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> comment<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">parseComment</code> gets a parameter of type <code class=\"language-text\">unknown</code> and returns it as type <code class=\"language-text\">string</code> if it exists and is of the right type.</p>\n<p>We validate the <code class=\"language-text\">comment</code> via the <code class=\"language-text\">isString</code> function:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> isString <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>text<span class=\"token operator\">:</span> unknown<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> text is <span class=\"token parameter\">string</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">typeof</span> text <span class=\"token operator\">===</span> <span class=\"token string\">'string'</span> <span class=\"token operator\">||</span> text <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>The function is a so-called <a href=\"https://www.typescriptlang.org/docs/handbook/2/narrowing.html#using-type-predicates\"><strong>type guard</strong></a>.\nThat means it is a function that returns a boolean <em>and</em> has a <strong>type predicate</strong> as the return type.\nIn our case, the type predicate is:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">text is string</code></pre></div>\n<p>The general form of a type predicate is <strong><em><code class=\"language-text\">parameterName is Type</code></em></strong> where the <em><code class=\"language-text\">parameterName</code></em> is the name of the function parameter and <em><code class=\"language-text\">Type</code></em> is the targeted type.</p>\n<p>If the type guard function returns true, the TypeScript compiler knows that the tested variable has the type that was defined in the type predicate.</p>\n<p>Before the type guard is called, the actual type of the variable <code class=\"language-text\">comment</code> is not known:</p>\n<picture><img src=\"/static/ca98fde496026fb7830262b11a878877/5a190/28e-21.png\" alt=\"vscode hovering over isString(comment) shows type unknown\" srcset=\"/static/ca98fde496026fb7830262b11a878877/772e8/28e-21.png 200w,\n/static/ca98fde496026fb7830262b11a878877/e17e5/28e-21.png 400w,\n/static/ca98fde496026fb7830262b11a878877/5a190/28e-21.png 800w,\n/static/ca98fde496026fb7830262b11a878877/3534c/28e-21.png 808w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>But after the call, if the code proceeds past the exception (that is, the type guard returned true),\nthen the compiler knows that <code class=\"language-text\">comment</code> is of type <code class=\"language-text\">string</code>:</p>\n<picture><img src=\"/static/572a5568c01431f6681db50e27f34564/5a190/29e-21.png\" alt=\"vscode hovering over return comment shows type string\" srcset=\"/static/572a5568c01431f6681db50e27f34564/772e8/29e-21.png 200w,\n/static/572a5568c01431f6681db50e27f34564/e17e5/29e-21.png 400w,\n/static/572a5568c01431f6681db50e27f34564/5a190/29e-21.png 800w,\n/static/572a5568c01431f6681db50e27f34564/27b7a/29e-21.png 804w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>The use of a type guard that returns a type predicate is one way to do <a href=\"https://www.typescriptlang.org/docs/handbook/2/narrowing.html\"><strong>type narrowing</strong></a>,\nthat is, to give a variable a more strict or accurate type.\nAs we will soon see there are also other kinds of <a href=\"https://www.typescriptlang.org/docs/handbook/2/narrowing.html\">type guards</a> available.</p>\n<blockquote>\n<h4>Important: testing if something is a string</h4>\n<p><em>Why do we have two conditions in the string type guard?</em></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> isString <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>text<span class=\"token operator\">:</span> unknown<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> text is <span class=\"token parameter\">string</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\"> <span class=\"token keyword\">return</span> <span class=\"token keyword\">typeof</span> text <span class=\"token operator\">===</span> <span class=\"token string\">'string'</span> <span class=\"token operator\">||</span> text <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">}</span></code></pre></div>\n<p><em>Would it not be enough to write the guard like this?</em></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> isString <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>text<span class=\"token operator\">:</span> unknown<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> text is <span class=\"token parameter\">string</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">return</span> <span class=\"token keyword\">typeof</span> text <span class=\"token operator\">===</span> <span class=\"token string\">'string'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>*Most likely, the simpler form is good enough for all practical purposes.\nHowever, if we want to be sure, <strong><em>both conditions are needed</em></strong>.\nThere are two different ways to create string objects in JavaScript.\nBoth work a bit differently when compared to the <code class=\"language-text\">typeof</code> and <code class=\"language-text\">instanceof</code> operators:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> <span class=\"token string\">\"I'm a string primitive\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> b <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"I'm a String Object\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">typeof</span> a<span class=\"token punctuation\">;</span> <span class=\"token operator\">--</span><span class=\"token operator\">></span> returns <span class=\"token string\">'string'</span>\n<span class=\"token keyword\">typeof</span> b<span class=\"token punctuation\">;</span> <span class=\"token operator\">--</span><span class=\"token operator\">></span> returns <span class=\"token string\">'object'</span>\na <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">--</span><span class=\"token operator\">></span> returns <span class=\"token boolean\">false</span>\nb <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">--</span><span class=\"token operator\">></span> returns <span class=\"token boolean\">true</span></code></pre></div>\n<p>However, <em>it is unlikely that anyone would create a <code class=\"language-text\">string</code> with a constructor function</em>.\nMost likely the simpler version of the type guard would be just fine.</p>\n</blockquote>\n<p>Next, let's consider the <code class=\"language-text\">date</code> field.\nParsing and validating the date object is pretty similar to what we did with comments.\nSince TypeScript doesn't know a type for a date, we need to treat it as a <code class=\"language-text\">string</code>.\nWe should however still use JavaScript-level validation to check whether the date format is acceptable.</p>\n<p>Let's add the following:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> isDate <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>date<span class=\"token operator\">:</span> string<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token parameter\">boolean</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">Boolean</span><span class=\"token punctuation\">(</span>Date<span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> parseDate <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>date<span class=\"token operator\">:</span> unknown<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token parameter\">string</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>date <span class=\"token operator\">||</span> <span class=\"token operator\">!</span><span class=\"token function\">isString</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token operator\">!</span><span class=\"token function\">isDate</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Incorrect or missing date: '</span> <span class=\"token operator\">+</span> date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> date<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>The code is nothing special.\nThe only thing is that we can't use a type predicate-based type guard here since a date in this case is only considered to be a <code class=\"language-text\">string</code>.\nNotice that even though the <code class=\"language-text\">parseDate</code> function accepts the <code class=\"language-text\">date</code> variable as <code class=\"language-text\">unknown</code> after we check the type with <code class=\"language-text\">isString</code>, then its type is set as a <code class=\"language-text\">string</code>,\nwhich is why we can give the variable to the <code class=\"language-text\">isDate</code> function requiring a <code class=\"language-text\">string</code> without any problems.</p>\n<p>Finally, we are ready to move on to the last two types, <code class=\"language-text\">Weather</code> and <code class=\"language-text\">Visibility</code>.</p>\n<p>We would like the validation and parsing to work as follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> parseWeather <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>weather<span class=\"token operator\">:</span> unknown<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token parameter\">Weather</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>weather <span class=\"token operator\">||</span> <span class=\"token operator\">!</span><span class=\"token function\">isString</span><span class=\"token punctuation\">(</span>weather<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token operator\">!</span><span class=\"token function\">isWeather</span><span class=\"token punctuation\">(</span>weather<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Incorrect or missing weather: '</span> <span class=\"token operator\">+</span> weather<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> weather<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>The question is: how can we validate that the string is of a specific form?\nOne possible way to write the type guard would be this:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> isWeather <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>str<span class=\"token operator\">:</span> string<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> str is <span class=\"token parameter\">Weather</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'sunny'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'rainy'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'cloudy'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'stormy'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>This would work OK.\nHowever, the list of possible values for <code class=\"language-text\">Weather</code> would not automatically stay in sync with <em>types.ts</em> <code class=\"language-text\">Weather</code> definitions if we were to change them.\nThis is not good.\nWe want just <strong><em>one source for all possible weather types</em></strong>.</p>\n<h3>Enum</h3>\n<p>In this case, a better solution would be to improve the actual <code class=\"language-text\">Weather</code> type.\nInstead of a type alias, we should use the TypeScript <a href=\"https://www.typescriptlang.org/docs/handbook/enums.html\"><strong><code class=\"language-text\">enum</code></strong></a>,\nwhich allows us to use the actual values in our code at runtime, not only in the compilation phase.</p>\n<p>Let us redefine the type <code class=\"language-text\">Weather</code> as follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">enum</span> Weather <span class=\"token punctuation\">{</span>\n  Sunny <span class=\"token operator\">=</span> <span class=\"token string\">'sunny'</span><span class=\"token punctuation\">,</span>\n  Rainy <span class=\"token operator\">=</span> <span class=\"token string\">'rainy'</span><span class=\"token punctuation\">,</span>\n  Cloudy <span class=\"token operator\">=</span> <span class=\"token string\">'cloudy'</span><span class=\"token punctuation\">,</span>\n  Stormy <span class=\"token operator\">=</span> <span class=\"token string\">'stormy'</span><span class=\"token punctuation\">,</span>\n  Windy <span class=\"token operator\">=</span> <span class=\"token string\">'windy'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Now we can check that a string is one of the accepted values, and the type guard can be written like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> isWeather <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>param<span class=\"token operator\">:</span> string<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> param is <span class=\"token parameter\">Weather</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span>Weather<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">v</span> <span class=\"token operator\">=></span> v<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span>param<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Notice that *we need to call <code class=\"language-text\">toString</code> on the enum's values to do the comparison, which is why we do the mapping.</p>\n<p>One issue arises after these changes.\nThe values we were assigning to <code class=\"language-text\">weather</code> are throwing errors.\nEven in our data file <em>data/entries.ts</em>:</p>\n<picture><img src=\"/static/921135f1fe736c56e63c1693a6e881ef/5a190/30.png\" alt=\"vscode error rainy is not assignable to type Weather\" srcset=\"/static/921135f1fe736c56e63c1693a6e881ef/772e8/30.png 200w,\n/static/921135f1fe736c56e63c1693a6e881ef/e17e5/30.png 400w,\n/static/921135f1fe736c56e63c1693a6e881ef/5a190/30.png 800w,\n/static/921135f1fe736c56e63c1693a6e881ef/bf433/30.png 971w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>This is because <em>we cannot just assume a <code class=\"language-text\">string</code> is an <code class=\"language-text\">enum</code></em>.</p>\n<p>We can fix this by mapping the initial data elements to the <code class=\"language-text\">DiaryEntry</code> type with the <code class=\"language-text\">toNewDiaryEntry</code> function:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> DiaryEntry <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"../src/types\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> toNewDiaryEntry <span class=\"token keyword\">from</span> <span class=\"token string\">\"../src/utils\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span>\n      <span class=\"token string\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"date\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"2017-01-01\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"weather\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"rainy\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"visibility\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"poor\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"comment\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Pretty scary flight, I'm glad I'm alive\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">const</span> diaryEntries<span class=\"token operator\">:</span> DiaryEntry <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">obj</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> entry <span class=\"token operator\">=</span> <span class=\"token function\">toNewDiaryEntry</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> DiaryEntry<span class=\"token punctuation\">;</span>\n  entry<span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> entry<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> diaryEntries<span class=\"token punctuation\">;</span></code></pre></div>\n<p>Notice that since <code class=\"language-text\">toNewDiaryEntry</code> returns an object of type <code class=\"language-text\">NewDiaryEntry</code>,\nwe need to assert it to be <code class=\"language-text\">DiaryEntry</code> with the <a href=\"http://www.typescriptlang.org/docs/handbook/basic-types.html#type-assertions\"><strong><code class=\"language-text\">as</code></strong></a> operator.</p>\n<p>Enums are typically used when there is a set of predetermined values that are not expected to change in the future.\nUsually, enums are used for much tighter unchanging values (for example, weekdays, months, cardinal directions),\nbut they are a viable option here since they offer us an excellent way to validate our incoming values.</p>\n<p>We still need to give the same treatment to <code class=\"language-text\">Visibility</code>.\nThe enum looks as follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">enum</span> Visibility <span class=\"token punctuation\">{</span>\n  Great <span class=\"token operator\">=</span> <span class=\"token string\">'great'</span><span class=\"token punctuation\">,</span>\n  Good <span class=\"token operator\">=</span> <span class=\"token string\">'good'</span><span class=\"token punctuation\">,</span>\n  Ok <span class=\"token operator\">=</span> <span class=\"token string\">'ok'</span><span class=\"token punctuation\">,</span>\n  Poor <span class=\"token operator\">=</span> <span class=\"token string\">'poor'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The type guard and the parser for <em>utils.ts</em> are below:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>NewDiaryEntry<span class=\"token punctuation\">,</span> Weather<span class=\"token punctuation\">,</span> Visibility<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./types'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// ...</span>\n\n<span class=\"token keyword\">const</span> isVisibility <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>param<span class=\"token operator\">:</span> string<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> param is <span class=\"token parameter\">Visibility</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span>Visibility<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">v</span> <span class=\"token operator\">=></span> v<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span>param<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> parseVisibility <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>visibility<span class=\"token operator\">:</span> unknown<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token parameter\">Visibility</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>visibility <span class=\"token operator\">||</span> <span class=\"token operator\">!</span><span class=\"token function\">isString</span><span class=\"token punctuation\">(</span>visibility<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token operator\">!</span><span class=\"token function\">isVisibility</span><span class=\"token punctuation\">(</span>visibility<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Incorrect or missing visibility: '</span> <span class=\"token operator\">+</span> visibility<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> visibility<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>And finally, we can finalize the <code class=\"language-text\">toNewDiaryEntry</code> function that takes care of validating and parsing the fields of the POST body.\nThere is however one more thing to take care of.\nIf we try to access the fields of the parameter <code class=\"language-text\">object</code> as follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> toNewDiaryEntry <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>object<span class=\"token operator\">:</span> unknown<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token parameter\">NewDiaryEntry</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> newEntry<span class=\"token operator\">:</span> NewDiaryEntry <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    comment<span class=\"token operator\">:</span> <span class=\"token function\">parseComment</span><span class=\"token punctuation\">(</span>object<span class=\"token punctuation\">.</span>comment<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    date<span class=\"token operator\">:</span> <span class=\"token function\">parseDate</span><span class=\"token punctuation\">(</span>object<span class=\"token punctuation\">.</span>date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    weather<span class=\"token operator\">:</span> <span class=\"token function\">parseWeather</span><span class=\"token punctuation\">(</span>object<span class=\"token punctuation\">.</span>weather<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    visibility<span class=\"token operator\">:</span> <span class=\"token function\">parseVisibility</span><span class=\"token punctuation\">(</span>object<span class=\"token punctuation\">.</span>visibility<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> newEntry<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>we notice that the code does not compile.\nThis is because the <a href=\"https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-0.html#new-unknown-top-type\"><code class=\"language-text\">unknown</code></a> type\ndoes not allow any operations, so accessing the fields is not possible.</p>\n<p>We can again fix the problem by type narrowing.\nLet's introduce two more type guards, the first checks that the parameter <code class=\"language-text\">object</code> exists and it has the type <code class=\"language-text\">object</code>.\nAfter this the second type guard uses the <a href=\"https://www.typescriptlang.org/docs/handbook/2/narrowing.html#the-in-operator-narrowing\"><code class=\"language-text\">in</code></a>\noperator to ensure that the object has all the desired fields:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> toNewDiaryEntry <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>object<span class=\"token operator\">:</span> unknown<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token parameter\">NewDiaryEntry</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token operator\">!</span>object <span class=\"token operator\">||</span> <span class=\"token keyword\">typeof</span> object <span class=\"token operator\">!==</span> <span class=\"token string\">'object'</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Incorrect or missing data'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'comment'</span> <span class=\"token keyword\">in</span> object <span class=\"token operator\">&amp;&amp;</span> <span class=\"token string\">'date'</span> <span class=\"token keyword\">in</span> object <span class=\"token operator\">&amp;&amp;</span> <span class=\"token string\">'weather'</span> <span class=\"token keyword\">in</span> object <span class=\"token operator\">&amp;&amp;</span> <span class=\"token string\">'visibility'</span> <span class=\"token keyword\">in</span> object<span class=\"token punctuation\">)</span>  <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> newEntry<span class=\"token operator\">:</span> NewDiaryEntry <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      weather<span class=\"token operator\">:</span> <span class=\"token function\">parseWeather</span><span class=\"token punctuation\">(</span>object<span class=\"token punctuation\">.</span>weather<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      visibility<span class=\"token operator\">:</span> <span class=\"token function\">parseVisibility</span><span class=\"token punctuation\">(</span>object<span class=\"token punctuation\">.</span>visibility<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      date<span class=\"token operator\">:</span> <span class=\"token function\">parseDate</span><span class=\"token punctuation\">(</span>object<span class=\"token punctuation\">.</span>date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      comment<span class=\"token operator\">:</span> <span class=\"token function\">parseComment</span><span class=\"token punctuation\">(</span>object<span class=\"token punctuation\">.</span>comment<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  \n    <span class=\"token keyword\">return</span> newEntry<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Incorrect data: some fields are missing'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>If the guard does not evaluate to <code class=\"language-text\">true</code>, an exception is thrown.</p>\n<p>The use of the operator <code class=\"language-text\">in</code> guarantees that the <strong><em>fields exist in the object</em></strong>.\nBecause of that, the <em>existence checks are no longer needed</em>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> parseVisibility <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>visibility<span class=\"token operator\">:</span> unknown<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token parameter\">Visibility</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// check !visibility removed:</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">isString</span><span class=\"token punctuation\">(</span>visibility<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token operator\">!</span><span class=\"token function\">isVisibility</span><span class=\"token punctuation\">(</span>visibility<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Incorrect visibility: '</span> <span class=\"token operator\">+</span> visibility<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> visibility<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>If a field, e.g. <em>comment</em> would be optional, the type narrowing should take that into account,\nand the operator <a href=\"https://www.typescriptlang.org/docs/handbook/2/narrowing.html#the-in-operator-narrowing\"><code class=\"language-text\">in</code></a>\ncould not be used quite as we did here, since the <em>in</em> test requires the field to be present.</p>\n<p>If we now try to create a new diary entry with invalid or missing fields, we are getting an appropriate error message:</p>\n<picture><img src=\"/static/6b052e38be1593da91d2160c6af53a8b/5a190/30b.png\" alt=\"postman showing 400 bad request with incorrect or missing visibility - awesome\" srcset=\"/static/6b052e38be1593da91d2160c6af53a8b/772e8/30b.png 200w,\n/static/6b052e38be1593da91d2160c6af53a8b/e17e5/30b.png 400w,\n/static/6b052e38be1593da91d2160c6af53a8b/5a190/30b.png 800w,\n/static/6b052e38be1593da91d2160c6af53a8b/c1b63/30b.png 1200w,\n/static/6b052e38be1593da91d2160c6af53a8b/e8d6f/30b.png 1273w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>The source code of the application can be found on <a href=\"https://github.com/comp227/flight-diary\">GitHub</a>.</p>\n</div>\n<div class=\"tasks\">\n<h3>Exercises 8.12-8.13</h3>\n<h4>8.12: Patientia backend, Step 5</h4>\n<p>Create a POST endpoint <strong><em>/api/patients</em></strong> for adding patients.\nEnsure that you can add patients also from the frontend.\nYou can create unique ids of type <code class=\"language-text\">string</code> using the <a href=\"https://github.com/uuidjs/uuid\"><code class=\"language-text\">uuid</code></a> library:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> v1 <span class=\"token keyword\">as</span> uuid <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'uuid'</span>\n<span class=\"token keyword\">const</span> id <span class=\"token operator\">=</span> <span class=\"token function\">uuid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h4>8.13: Patientia backend, Step 6</h4>\n<p>Set up safe parsing, validation and type guards to the POST <strong><em>/api/patients</em></strong> request.</p>\n<p>Refactor the <code class=\"language-text\">gender</code> field to use an <a href=\"http://www.typescriptlang.org/docs/handbook/enums.html\">enum type</a>.</p>\n</div>","frontmatter":{"mainImage":{"publicURL":"/static/ed8ae98c5d885b4d1928a681eefbe7c4/part-8.svg"},"part":8,"letter":"c","lang":"en"}}},"pageContext":{"part":8,"letter":"c","lang":"en"}}}