{"componentChunkName":"component---src-templates-content-template-js","path":"/part8/working_with_an_existing_codebase","result":{"data":{"markdownRemark":{"html":"<div class=\"content\">\n<h3>Working with an existing codebase</h3>\n<p>When you dive into an existing codebase for the first time, you should seek an overview of its conventions and structures.\nYou can start this research by reading the <em>README.md</em> in the root of the repository.\nUsually, the README contains a brief description of the application and the requirements for using it, as well as how to start it for development.\nIf the README is not available or poorly written, you can take a peek at the <em>package.json</em>.\nYou also should start the application and click around to verify you have a functional development environment.</p>\n<p>You can also browse the folder structure to get some insight into the application's functionality and/or the architecture used.\nThese are not always clear, and the developers might have chosen a way to organize code that is not familiar to you.\nThe patientia frontend you cloned <a href=\"/part8/typing_an_express_app#exercises-8-8-8-9\">previously</a> will be used in the rest of this part and is organized, feature-wise.\nYou can see what pages the application has, and some general components, e.g. modals and state.\nKeep in mind that the features may have different scopes.\nFor example, <strong><em>modals</em></strong> are visible UI-level components\nwhereas the <strong><em>state</em></strong> is comparable to business logic and keeps the data organized under the hood for the rest of the app to use.</p>\n<p>TypeScript provides types for what kind of data structures, functions, components, and state to expect.\nYou can try looking for <em>types.ts</em> or something similar to get started.\nIDEs can be a big help and simply highlighting variables and parameters can provide quite a lot of insight.\nAll this naturally depends on how types are used in the project.</p>\n<p>If the project has unit, integration or end-to-end tests, reading those is most likely beneficial.\n<em>Test cases are your most important tool when refactoring or adding new features to the application.</em>\nYou want to make sure not to break any existing features when hammering around the code.\nTypeScript can also give you guidance with argument and return types when changing the code.</p>\n<p>Remember that reading code is a skill in itself, so don't worry if you don't understand the code on your first readthrough.\nThe code may have a lot of corner cases, and pieces of logic may have been added here and there throughout its development cycle.\nIt is hard to imagine what kind of problems the previous developer has wrestled with.\nThink of it all like <a href=\"https://en.wikipedia.org/wiki/Dendrochronology#Growth_rings\">growth rings in trees</a>.\nUnderstanding everything requires digging deep into the code and business domain requirements.\nThe more code you read, the better you will be at understanding it.\nYou will most likely read far more code than you are going to produce throughout your life.</p>\n<h3>Patientia frontend</h3>\n<p>It's time to get our hands dirty finalizing the frontend for the backend we built in <a href=\"/part8/typing_an_express_app#exercises-8-8-8-9\">exercises 8.8.-8.13</a>.\nWe will also add some new features to the backend for finishing the app.</p>\n<p>Before diving into the code, let's start both the frontend and the backend.</p>\n<p>If all goes well, you should see a patient listing page.\nIt fetches a list of patients from our backend, and renders it to the screen as a simple table.\nThere is also a button for creating new patients on the backend.\nAs we are using mock data instead of a database, the data will not persist - closing the backend will delete all the data we have added.\nUI design has not been a strong point of the creators, so let's disregard the UI for now.</p>\n<p>After verifying that everything works, we can start studying the code.\nAll of the interesting stuff resides in the <em>src</em> folder.\nFor your convenience, there is already a <em>types.ts</em> file for basic types used in the app, which you will have to extend or refactor in the exercises.</p>\n<p>In principle, we could use the same types for both backend and frontend,\nbut usually, <em>the frontend has different data structures and use cases for the data</em>, which causes the types to be different.\nFor example, the frontend has a state and may want to keep data in objects or maps whereas the backend uses an array.\nThe frontend might also not need all the fields of a data object saved in the backend, and it may need to add some new fields to use for rendering.</p>\n<p>The folder structure looks as follows:</p>\n<picture><img src=\"/static/06c376228ceb6838daa3c135c5810653/5a190/34new.png\" alt=\"vscode folder structure for patientia\" srcset=\"/static/06c376228ceb6838daa3c135c5810653/772e8/34new.png 200w,\n/static/06c376228ceb6838daa3c135c5810653/e17e5/34new.png 400w,\n/static/06c376228ceb6838daa3c135c5810653/5a190/34new.png 800w,\n/static/06c376228ceb6838daa3c135c5810653/c1b63/34new.png 1200w,\n/static/06c376228ceb6838daa3c135c5810653/99375/34new.png 1525w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Besides the component <code class=\"language-text\">App</code>, there are currently three main components:\n<code class=\"language-text\">AddPatientModal</code> and <code class=\"language-text\">PatientListPage</code> which are both defined in a directory, and a component <code class=\"language-text\">HealthRatingBar</code> defined in a file.\nIf a component has some subcomponents not used elsewhere in the app, some suggest defining that component and its subcomponents in a directory.\nFor example, the <em>src/AddPatientModal</em> folder currently houses two components:</p>\n<ul>\n<li><code class=\"language-text\">AddPatientModal</code> defined in <em>index.tsx</em></li>\n<li><code class=\"language-text\">AddPatientForm</code> a subcomponent of <code class=\"language-text\">AddPatientModal</code> defined in <em>AddPatientForm.tsx</em>.</li>\n</ul>\n<p>There is nothing very surprising in the code.\nThe state and communication with the backend are implemented with the <code class=\"language-text\">useState</code> hook and Axios, similar to the tasks app in the previous section.\n<a href=\"/part7/more_about_styles#material-ui\">Material UI</a> is used to style the app and the navigation structure is implemented with\n<a href=\"/part7/react_router\">React Router</a>,\nboth familiar to us from part 7 of the course.</p>\n<p>From the typing point of view, there are a couple of interesting things.\nComponent <code class=\"language-text\">App</code> passes the function <code class=\"language-text\">setPatients</code> as a prop to the component <code class=\"language-text\">PatientListPage</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>patients<span class=\"token punctuation\">,</span> setPatients<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> useState<span class=\"token operator\">&lt;</span>Patient<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n  <span class=\"token comment\">// ...</span>\n  \n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">\"App\"</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Router<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>Container<span class=\"token operator\">></span>\n          <span class=\"token operator\">&lt;</span>Routes<span class=\"token operator\">></span>\n            <span class=\"token comment\">// ...</span>\n            <span class=\"token operator\">&lt;</span>Route path<span class=\"token operator\">=</span><span class=\"token string\">\"/\"</span> element<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>\n              <span class=\"token operator\">&lt;</span>PatientListPage\n                patients<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>patients<span class=\"token punctuation\">}</span>\n<span class=\"gatsby-highlight-code-line\">                setPatients<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>setPatients<span class=\"token punctuation\">}</span></span>              <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">}</span> \n            <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n          <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Routes<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Container<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Router<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>To keep the TypeScript compiler happy, the props are typed as follows in <em>src/PatientListPage/index.tsx</em>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Props</span> <span class=\"token punctuation\">{</span>\n  patients <span class=\"token operator\">:</span> Patient<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  setPatients<span class=\"token operator\">:</span> React<span class=\"token punctuation\">.</span>Dispatch<span class=\"token operator\">&lt;</span>React<span class=\"token punctuation\">.</span>SetStateAction<span class=\"token operator\">&lt;</span>Patient<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">>></span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">PatientListPage</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> patients<span class=\"token punctuation\">,</span> setPatients <span class=\"token punctuation\">}</span> <span class=\"token operator\">:</span> Props</span> <span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> \n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>So the function <code class=\"language-text\">setPatients</code> has type <em>React.Dispatch&#x3C;React.SetStateAction&#x3C;Patient[]>></em>.\nWe can see the type in the editor when we hover over the function:</p>\n<picture><img src=\"/static/8c898b9745dc9d4f83367d521212d2e8/5a190/73new.png\" alt=\"vscode showing Patient array as type for setPatients\" srcset=\"/static/8c898b9745dc9d4f83367d521212d2e8/772e8/73new.png 200w,\n/static/8c898b9745dc9d4f83367d521212d2e8/e17e5/73new.png 400w,\n/static/8c898b9745dc9d4f83367d521212d2e8/5a190/73new.png 800w,\n/static/8c898b9745dc9d4f83367d521212d2e8/7388e/73new.png 1104w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<blockquote>\n<p>The <a href=\"https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/basic_type_example#basic-prop-types-examples\">React TypeScript cheatsheet's code blocks for <code class=\"language-text\">AppProps</code></a>\nhave some nice lists for typical prop types.\nUse that cheatsheet later to help find the correct types for props that are not obvious.</p>\n</blockquote>\n<p><code class=\"language-text\">PatientListPage</code> passes four props to the component <code class=\"language-text\">AddPatientModal</code>\nTwo of these props are functions.\nHere's the relevant code.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">PatientListPage</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> patients<span class=\"token punctuation\">,</span> setPatients <span class=\"token punctuation\">}</span> <span class=\"token operator\">:</span> Props</span> <span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>modalOpen<span class=\"token punctuation\">,</span> setModalOpen<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> useState<span class=\"token operator\">&lt;</span>boolean<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>error<span class=\"token punctuation\">,</span> setError<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> useState<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// ...</span>\n\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> closeModal <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token parameter\"><span class=\"token keyword\">void</span></span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span>    <span class=\"token function\">setModalOpen</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">setError</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">submitNewPatient</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">values<span class=\"token operator\">:</span> PatientFormValues</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span>    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// ...</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">\"App\"</span><span class=\"token operator\">></span>\n      <span class=\"token comment\">// ...</span>\n      <span class=\"token operator\">&lt;</span>AddPatientModal\n        modalOpen<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>modalOpen<span class=\"token punctuation\">}</span>\n<span class=\"gatsby-highlight-code-line\">        onSubmit<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>submitNewPatient<span class=\"token punctuation\">}</span></span>        error<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>error<span class=\"token punctuation\">}</span>\n<span class=\"gatsby-highlight-code-line\">        onClose<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>closeModal<span class=\"token punctuation\">}</span></span>      <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Let us have a look how these are typed.\nThe types, in <em>AddPatientModal/index.tsx</em> look like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Props</span> <span class=\"token punctuation\">{</span>\n  modalOpen<span class=\"token operator\">:</span> boolean<span class=\"token punctuation\">;</span>\n  <span class=\"token function-variable function\">onClose</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function-variable function\">onSubmit</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">values<span class=\"token operator\">:</span> PatientFormValues</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> Promise<span class=\"token operator\">&lt;</span><span class=\"token keyword\">void</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n  error<span class=\"token operator\">?</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">AddPatientModal</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> modalOpen<span class=\"token punctuation\">,</span> onClose<span class=\"token punctuation\">,</span> onSubmit<span class=\"token punctuation\">,</span> error <span class=\"token punctuation\">}</span><span class=\"token operator\">:</span> Props</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">onClose</code> is just a function that takes no parameters, and does not return anything, so the type is:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span></code></pre></div>\n<p>The type of <code class=\"language-text\">onSubmit</code> is a bit more interesting, it has one parameter that has the type <code class=\"language-text\">PatientFormValues</code>.\nThe return value of the function is <code class=\"language-text\">Promise&lt;void&gt;</code>.\nSo again the function type is written with the arrow syntax:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">(</span><span class=\"token parameter\">values<span class=\"token operator\">:</span> PatientFormValues</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> Promise<span class=\"token operator\">&lt;</span><span class=\"token keyword\">void</span><span class=\"token operator\">></span></code></pre></div>\n<p>The return value of an <code class=\"language-text\">async</code> function is a\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function#return_value\">promise</a>\nwith the value that the function returns.\nOur function does not return anything so the correct return type is just <code class=\"language-text\">Promise&lt;void&gt;</code>.</p>\n</div>\n<div class=\"tasks\">\n<h3>Exercises 8.20-8.21</h3>\n<p>We will soon add a new type for our app, <code class=\"language-text\">Entry</code>, which represents a lightweight patient journal entry.\nIt consists of a journal text, i.e. a <code class=\"language-text\">description</code>, a creation date, information regarding the specialist who created it and possible diagnosis codes.\nDiagnosis codes map to the ICD-10 codes returned from the <strong><em>/api/diagnoses</em></strong> endpoint.\nOur naive implementation will be that a patient has an array of entries.</p>\n<p>Before going into this, let us do some preparatory work.</p>\n<h4>8.20: Patientia, step 1</h4>\n<p>Create an endpoint <strong><em>/api/patients/:id</em></strong> to the backend that returns all of the patient information for one patient,\nincluding the array of patient entries that is still empty for all the patients.\nFor the time being, expand the backend types as follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// eslint-disable-next-line @typescript-eslint/no-empty-interface</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Entry</span> <span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Patient</span> <span class=\"token punctuation\">{</span>\n  id<span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n  name<span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n  dateOfBirth<span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n  ssn<span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n  gender<span class=\"token operator\">:</span> Gender<span class=\"token punctuation\">;</span>\n  occupation<span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">  entries<span class=\"token operator\">:</span> Entry<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">}</span>\n\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">export</span> type NonSensitivePatient <span class=\"token operator\">=</span> Omit<span class=\"token operator\">&lt;</span>Patient<span class=\"token punctuation\">,</span> <span class=\"token string\">'ssn'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'entries'</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span></span></code></pre></div>\n<p>The response should look as follows:</p>\n<picture><img src=\"/static/e910d497dd97ca2a7eae8562942e0067/5a190/38a.png\" alt=\"browser showing entries blank array when accessing patient\" srcset=\"/static/e910d497dd97ca2a7eae8562942e0067/772e8/38a.png 200w,\n/static/e910d497dd97ca2a7eae8562942e0067/e17e5/38a.png 400w,\n/static/e910d497dd97ca2a7eae8562942e0067/5a190/38a.png 800w,\n/static/e910d497dd97ca2a7eae8562942e0067/681f1/38a.png 899w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<h4>8.21: Patientia, step 2</h4>\n<p>Create a page for showing a patient's full information in the frontend.</p>\n<p>The user should be able to access a patient's information by clicking the patient's name.</p>\n<p>Fetch the data from the endpoint created in the previous exercise.</p>\n<p>You may use <a href=\"https://material-ui.com/\">MaterialUI</a> for the new components but that is up to you since our main focus now is TypeScript.</p>\n<p>You might want to have a look at <a href=\"/part7/react_router\">part 7</a> if you don't yet have a grasp on how the <a href=\"https://reactrouter.com/en/main/start/tutorial\">React Router</a> works.</p>\n<p>The result could look like this:</p>\n<picture><img src=\"/static/a387c3ff98ee2f11960559045b37605e/5a190/39x.png\" alt=\"browser showing patientia with one patient\" srcset=\"/static/a387c3ff98ee2f11960559045b37605e/772e8/39x.png 200w,\n/static/a387c3ff98ee2f11960559045b37605e/e17e5/39x.png 400w,\n/static/a387c3ff98ee2f11960559045b37605e/5a190/39x.png 800w,\n/static/a387c3ff98ee2f11960559045b37605e/51ed8/39x.png 1021w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>The example uses <a href=\"https://mui.com/components/material-icons/\">Material UI Icons</a> to represent genders.</p>\n</div>\n<div class=\"content\">\n<h3>Full entries</h3>\n<p>In <a href=\"/part8/typing_an_express_app#exercises-8-10-8-11\">exercise 8.10</a>\nwe implemented an endpoint for fetching information about various diagnoses, but we are still not using that endpoint at all.\nSince we now have a page for viewing a patient's information, it would be nice to expand our data a bit.\nLet's add an <code class=\"language-text\">Entry</code> field to our patient data so that a patient's data contains their medical entries, including possible diagnoses.</p>\n<p>Let's ditch our old patient seed data from the backend and start using <a href=\"https://github.com/comp227/misc/blob/main/patients-full.ts\">this expanded format</a>.</p>\n<p>Let's also start fleshing out our empty <code class=\"language-text\">Entry</code> in <em>types.ts</em> based on the data we have.</p>\n<p>If we take a closer look at the data, we can see that the entries are quite different from one another.\nFor example, let's take a look at the first two entries:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n  id<span class=\"token operator\">:</span> <span class=\"token string\">'d811e46d-70b3-4d90-b090-4535c7cf8fb1'</span><span class=\"token punctuation\">,</span>\n  date<span class=\"token operator\">:</span> <span class=\"token string\">'2015-01-02'</span><span class=\"token punctuation\">,</span>\n  type<span class=\"token operator\">:</span> <span class=\"token string\">'Hospital'</span><span class=\"token punctuation\">,</span>\n  specialist<span class=\"token operator\">:</span> <span class=\"token string\">'Eggman'</span><span class=\"token punctuation\">,</span>\n  diagnosisCodes<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'S62.5'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  description<span class=\"token operator\">:</span>\n    <span class=\"token string\">\"Healing time appr. 2 weeks. patient doesn't remember how he got the injury.\"</span><span class=\"token punctuation\">,</span>\n  discharge<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    date<span class=\"token operator\">:</span> <span class=\"token string\">'2015-01-16'</span><span class=\"token punctuation\">,</span>\n    criteria<span class=\"token operator\">:</span> <span class=\"token string\">'Hand has healed.'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token operator\">...</span>\n<span class=\"token punctuation\">{</span>\n  id<span class=\"token operator\">:</span> <span class=\"token string\">'fcd59fa6-c4b4-4fec-ac4d-df4fe1f85f62'</span><span class=\"token punctuation\">,</span>\n  date<span class=\"token operator\">:</span> <span class=\"token string\">'2019-08-05'</span><span class=\"token punctuation\">,</span>\n  type<span class=\"token operator\">:</span> <span class=\"token string\">'OccupationalHealthcare'</span><span class=\"token punctuation\">,</span>\n  specialist<span class=\"token operator\">:</span> <span class=\"token string\">'Eggman'</span><span class=\"token punctuation\">,</span>\n  employerName<span class=\"token operator\">:</span> <span class=\"token string\">'SNPP'</span><span class=\"token punctuation\">,</span>\n  diagnosisCodes<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'Z57.1'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Z74.3'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'M51.2'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  description<span class=\"token operator\">:</span>\n    <span class=\"token string\">'Patient mistakenly found himself in a nuclear plant waste site without protection gear. Very minor radiation poisoning. '</span><span class=\"token punctuation\">,</span>\n  sickLeave<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    startDate<span class=\"token operator\">:</span> <span class=\"token string\">'2019-08-05'</span><span class=\"token punctuation\">,</span>\n    endDate<span class=\"token operator\">:</span> <span class=\"token string\">'2019-08-28'</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Immediately, we can see that while the first few fields are the same, the first entry has a <code class=\"language-text\">discharge</code> field and the second entry has <code class=\"language-text\">employerName</code> and <code class=\"language-text\">sickLeave</code> fields.\nAll the entries seem to have some fields in common, but some fields are entry-specific.</p>\n<p>When looking at the <code class=\"language-text\">type</code>, we can see that there are three kinds of entries:</p>\n<ol>\n<li><code class=\"language-text\">OccupationalHealthcare</code></li>\n<li><code class=\"language-text\">Hospital</code></li>\n<li><code class=\"language-text\">HealthCheck</code></li>\n</ol>\n<p>This indicates we need three separate types.\nSince they all have some fields in common, we might just want to create a base entry interface that we can extend with the different fields in each type.</p>\n<p>When looking at the data, it seems that the fields <code class=\"language-text\">id</code>, <code class=\"language-text\">description</code>, <code class=\"language-text\">date</code> and <code class=\"language-text\">specialist</code> are something that can be found in each entry.\nOn top of that, it seems that <code class=\"language-text\">diagnosisCodes</code> is only found in one <code class=\"language-text\">OccupationalHealthcare</code> and one <code class=\"language-text\">Hospital</code> type entry.\nSince it is not always used even in those types of entries, it is safe to assume that the field is optional.\nWe could consider adding it to the <code class=\"language-text\">HealthCheck</code> type as well\nsince it might just not be used in these specific entries.</p>\n<p>So our <code class=\"language-text\">BaseEntry</code> from which each type could be extended would be the following:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">BaseEntry</span> <span class=\"token punctuation\">{</span>\n  id<span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n  description<span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n  date<span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n  specialist<span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n  diagnosisCodes<span class=\"token operator\">?</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>If we want to finetune it a bit further, since we already have a <code class=\"language-text\">Diagnosis</code> type defined in the backend,\nwe may want to refer to the code field of the <code class=\"language-text\">Diagnosis</code> type directly in case its type ever changes.\nWe can do that like so:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">BaseEntry</span> <span class=\"token punctuation\">{</span>\n  id<span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n  description<span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n  date<span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n  specialist<span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n  diagnosisCodes<span class=\"token operator\">?</span><span class=\"token operator\">:</span> Diagnosis<span class=\"token punctuation\">[</span><span class=\"token string\">'code'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>We could define an array with the syntax <code class=\"language-text\">Array&lt;Type&gt;</code> instead of defining it <code class=\"language-text\">Type[]</code>\n(as mentioned <a href=\"/part8/first_steps_with_type_script/#the-alternative-array-syntax\">earlier</a>.\nIn this particular case, writing <code class=\"language-text\">Diagnosis[&#39;code&#39;][]</code> starts to look a bit strange so we will decide to use the alternative syntax\n(that is also recommended by the ESlint rule <a href=\"https://typescript-eslint.io/rules/array-type/#array-simple\">array-simple</a>):</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">BaseEntry</span> <span class=\"token punctuation\">{</span>\n  id<span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n  description<span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n  date<span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n  specialist<span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">  diagnosisCodes<span class=\"token operator\">?</span><span class=\"token operator\">:</span> Array<span class=\"token operator\">&lt;</span>Diagnosis<span class=\"token punctuation\">[</span><span class=\"token string\">'code'</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>Now that we have the <code class=\"language-text\">BaseEntry</code> defined in <em>types.ts</em>, we can start creating the extended entry types we will actually be using.\nLet's start by creating the <code class=\"language-text\">HealthCheckEntry</code> type.</p>\n<p>Entries of type <code class=\"language-text\">HealthCheck</code> contain the field <code class=\"language-text\">HealthCheckRating</code>, which is an integer from 0 to 3, zero meaning <code class=\"language-text\">Healthy</code> and 3 meaning <code class=\"language-text\">CriticalRisk</code>.\nThis is a perfect case for an enum definition.\nWith these specifications we could write a <code class=\"language-text\">HealthCheckEntry</code> type definition like so:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">enum</span> HealthCheckRating <span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"Healthy\"</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"LowRisk\"</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"HighRisk\"</span> <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"CriticalRisk\"</span> <span class=\"token operator\">=</span> <span class=\"token number\">3</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">HealthCheckEntry</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">BaseEntry</span> <span class=\"token punctuation\">{</span>\n  type<span class=\"token operator\">:</span> <span class=\"token string\">\"HealthCheck\"</span><span class=\"token punctuation\">;</span>\n  healthCheckRating<span class=\"token operator\">:</span> HealthCheckRating<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Now we only need to create the <code class=\"language-text\">OccupationalHealthcareEntry</code> and <code class=\"language-text\">HospitalEntry</code> types so we can combine them in a union and export them as an Entry type like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> type Entry <span class=\"token operator\">=</span>\n  <span class=\"token operator\">|</span> HospitalEntry\n  <span class=\"token operator\">|</span> OccupationalHealthcareEntry\n  <span class=\"token operator\">|</span> HealthCheckEntry<span class=\"token punctuation\">;</span></code></pre></div>\n<h3>Omit with unions</h3>\n<p>An important point concerning unions is that, when you use them with <code class=\"language-text\">Omit</code> to exclude a property, it works in a possibly unexpected way.\nSuppose we want to remove the <code class=\"language-text\">id</code> from each <code class=\"language-text\">Entry</code>.\nWe could think of using</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">Omit<span class=\"token operator\">&lt;</span>Entry<span class=\"token punctuation\">,</span> <span class=\"token string\">'id'</span><span class=\"token operator\">></span></code></pre></div>\n<p>but <a href=\"https://github.com/microsoft/TypeScript/issues/42680\">it wouldn't work as we might expect</a>.\nIn fact, the *resulting type would only contain the common properties, <strong>but not the ones they don't share*</strong>.\nA possible workaround is to define a special <code class=\"language-text\">Omit</code>-like function to deal with such situations:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// Define special omit for unions</span>\n<span class=\"token keyword\">type</span> UnionOmit<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">K</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">string</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">symbol</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">unknown</span> <span class=\"token operator\">?</span> Omit<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">K</span><span class=\"token operator\">></span> <span class=\"token operator\">:</span> <span class=\"token builtin\">never</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Define Entry without the 'id' property</span>\n<span class=\"token keyword\">type</span> EntryWithoutId <span class=\"token operator\">=</span> UnionOmit<span class=\"token operator\">&lt;</span>Entry<span class=\"token punctuation\">,</span> <span class=\"token string\">'id'</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span></code></pre></div>\n</div>\n<div class=\"tasks\">\n<h3>Exercises 8.22-8.29</h3>\n<p>Now we are ready to put the finishing touches to the app!</p>\n<h4>8.22: Patientia, step 3</h4>\n<p>Define the types <code class=\"language-text\">OccupationalHealthcareEntry</code> and <code class=\"language-text\">HospitalEntry</code> so that those conform with the example data.\nEnsure that your backend returns the entries properly when you go to an individual patient's route:</p>\n<picture><img src=\"/static/16f10b56d176d7c0319eb4d99e819865/5a190/40.png\" alt=\"browser showing entries json data properly for patient\" srcset=\"/static/16f10b56d176d7c0319eb4d99e819865/772e8/40.png 200w,\n/static/16f10b56d176d7c0319eb4d99e819865/e17e5/40.png 400w,\n/static/16f10b56d176d7c0319eb4d99e819865/5a190/40.png 800w,\n/static/16f10b56d176d7c0319eb4d99e819865/c1b63/40.png 1200w,\n/static/16f10b56d176d7c0319eb4d99e819865/68947/40.png 1281w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Use types properly in the backend!\nFor now, there is no need to do a proper validation for all the fields of the entries in the backend,\nit is enough e.g. to check that the field <code class=\"language-text\">type</code> has a correct value.</p>\n<h4>8.23: Patientia, step 4</h4>\n<p>Extend a patient's page in the frontend to list the <code class=\"language-text\">date</code>, <code class=\"language-text\">description</code> and <code class=\"language-text\">diagnoseCodes</code> of the patient's entries.</p>\n<p>You can use the same type definition for an <code class=\"language-text\">Entry</code> in the frontend.\nFor these exercises, it is enough to just copy/paste the definitions from the backend to the frontend.</p>\n<p>Your solution could look like this:</p>\n<picture><img src=\"/static/5c0a13155f9587db9422877f127d2139/5a190/41.png\" alt=\"browser showing list of diagnosis codes for patient\" srcset=\"/static/5c0a13155f9587db9422877f127d2139/772e8/41.png 200w,\n/static/5c0a13155f9587db9422877f127d2139/e17e5/41.png 400w,\n/static/5c0a13155f9587db9422877f127d2139/5a190/41.png 800w,\n/static/5c0a13155f9587db9422877f127d2139/c1b63/41.png 1200w,\n/static/5c0a13155f9587db9422877f127d2139/985a9/41.png 1512w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<h4>8.24: Patientia, step 5</h4>\n<p>Fetch and add diagnoses to the application state from the <strong><em>/api/diagnoses</em></strong> endpoint.\nUse the new diagnosis data to show the descriptions for patient's diagnosis codes:</p>\n<picture><img src=\"/static/7fa27cc5c24fc30c2293fef6c7a80307/5a190/42.png\" alt=\"browser showing list of codes and their descriptions for patient \" srcset=\"/static/7fa27cc5c24fc30c2293fef6c7a80307/772e8/42.png 200w,\n/static/7fa27cc5c24fc30c2293fef6c7a80307/e17e5/42.png 400w,\n/static/7fa27cc5c24fc30c2293fef6c7a80307/5a190/42.png 800w,\n/static/7fa27cc5c24fc30c2293fef6c7a80307/c1b63/42.png 1200w,\n/static/7fa27cc5c24fc30c2293fef6c7a80307/f02b9/42.png 1554w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<h4>8.25: Patientia, step 6</h4>\n<p>Extend the entry listing on the patient's page to include the Entry's details with a new component\nthat shows the rest of the information of the patient's entries distinguishing different types from each other.</p>\n<p>You could use eg. <a href=\"https://mui.com/components/material-icons/\">Icons</a> or some other <a href=\"https://mui.com/\">Material UI</a> component to get appropriate visuals for your listing.</p>\n<p>You should use a <em>switch case</em>-based rendering and <strong>exhaustive type checking</strong> so that no cases can be forgotten.</p>\n<p>Like this:</p>\n<picture><img src=\"/static/96f9ae7c2949abd862663adb72441ae0/5a190/35c.png\" alt=\"vscode showing error for healthCheckEntry not being assignable to type never\" srcset=\"/static/96f9ae7c2949abd862663adb72441ae0/772e8/35c.png 200w,\n/static/96f9ae7c2949abd862663adb72441ae0/e17e5/35c.png 400w,\n/static/96f9ae7c2949abd862663adb72441ae0/5a190/35c.png 800w,\n/static/96f9ae7c2949abd862663adb72441ae0/c1b63/35c.png 1200w,\n/static/96f9ae7c2949abd862663adb72441ae0/e4611/35c.png 1298w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>The resulting entries in the listing <em>could</em> look something like this:</p>\n<picture><img src=\"/static/453e5382991ce1390c6dbfded45f8dc7/5a190/36x.png\" alt=\"browser showing list of entries and their details in a nicer format\" srcset=\"/static/453e5382991ce1390c6dbfded45f8dc7/772e8/36x.png 200w,\n/static/453e5382991ce1390c6dbfded45f8dc7/e17e5/36x.png 400w,\n/static/453e5382991ce1390c6dbfded45f8dc7/5a190/36x.png 800w,\n/static/453e5382991ce1390c6dbfded45f8dc7/c1b63/36x.png 1200w,\n/static/453e5382991ce1390c6dbfded45f8dc7/29007/36x.png 1600w,\n/static/453e5382991ce1390c6dbfded45f8dc7/7e117/36x.png 1715w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<h4>8.26: Patientia, step 7</h4>\n<p>We have established that patients can have different kinds of entries.\nWe don't yet have any way of adding entries to patients in our app, so, at the moment, it is pretty useless as an electronic medical record.</p>\n<p>Your next task is to add endpoint <strong><em>/api/patients/:id/entries</em></strong> to your backend, through which you can POST an entry for a patient.</p>\n<p>Remember that we have different kinds of entries in our app, so our backend should support all those types and check that at least all required fields are given for each type.</p>\n<p>In this exercise you quite likely need to remember <a href=\"/part8/working_with_an_existing_codebase#omit-with-unions\">this trick</a>.</p>\n<p>You may assume that the diagnostic codes are sent in a correct form and use eg. the following kind of parser to extract those from the request body:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> parseDiagnosisCodes <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>object<span class=\"token operator\">:</span> unknown<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Array<span class=\"token operator\">&lt;</span>Diagnosis<span class=\"token punctuation\">[</span><span class=\"token string\">'code'</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span> <span class=\"token operator\">=></span>  <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>object <span class=\"token operator\">||</span> <span class=\"token keyword\">typeof</span> object <span class=\"token operator\">!==</span> <span class=\"token string\">'object'</span> <span class=\"token operator\">||</span> <span class=\"token operator\">!</span><span class=\"token punctuation\">(</span><span class=\"token string\">'diagnosisCodes'</span> <span class=\"token keyword\">in</span> object<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// we will just trust the data to be in correct form</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">as</span> Array<span class=\"token operator\">&lt;</span>Diagnosis<span class=\"token punctuation\">[</span><span class=\"token string\">'code'</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> object<span class=\"token punctuation\">.</span>diagnosisCodes <span class=\"token keyword\">as</span> Array<span class=\"token operator\">&lt;</span>Diagnosis<span class=\"token punctuation\">[</span><span class=\"token string\">'code'</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h4>8.27: Patientia, step 8</h4>\n<p>Now that our backend supports adding entries, we want to add the corresponding functionality to the frontend.\nIn this exercise, you should add a form for adding an entry to a patient.\nAn intuitive place for accessing the form would be on a patient's page.</p>\n<p>In this exercise, it is enough to <strong>support <em>one</em> entry type</strong>.\nAll the fields in the form can be just plain text inputs, so it is up to user to enter valid values.</p>\n<p>Upon a successful submit, the new entry should be added to the correct patient and the patient's entries on the patient page should be updated to contain the new entry.</p>\n<p>Your form might look something like this:</p>\n<picture><img src=\"/static/3f5c2c4b03b81a8cc16421d0335e4ce9/5a190/74new.png\" alt=\"Patientia new healthcheck entry form\" srcset=\"/static/3f5c2c4b03b81a8cc16421d0335e4ce9/772e8/74new.png 200w,\n/static/3f5c2c4b03b81a8cc16421d0335e4ce9/e17e5/74new.png 400w,\n/static/3f5c2c4b03b81a8cc16421d0335e4ce9/5a190/74new.png 800w,\n/static/3f5c2c4b03b81a8cc16421d0335e4ce9/66caf/74new.png 853w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>If user enters invalid values to the form and backend rejects the addition, show a proper error message to user</p>\n<picture><img src=\"/static/3a71d3da824372223da37f94e35d9cca/5a190/75new.png\" alt=\"browser showing healthCheckRating incorrect 15 error\" srcset=\"/static/3a71d3da824372223da37f94e35d9cca/772e8/75new.png 200w,\n/static/3a71d3da824372223da37f94e35d9cca/e17e5/75new.png 400w,\n/static/3a71d3da824372223da37f94e35d9cca/5a190/75new.png 800w,\n/static/3a71d3da824372223da37f94e35d9cca/6c745/75new.png 893w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<h4>8.28: Patientia, step 9</h4>\n<p>Extend your solution so that it supports <strong>all the entry types</strong></p>\n<h4>8.29: Patientia, step 10</h4>\n<p>Improve the entry creation forms so that it makes hard to enter incorrect dates, diagnosis codes and health rating.</p>\n<p>Your improved form might look something like this:</p>\n<picture><img src=\"/static/73c7becee3f9addd18bcd923b3855f4e/5a190/76new.png\" alt=\"patientia showing fancy calendar ui\" srcset=\"/static/73c7becee3f9addd18bcd923b3855f4e/772e8/76new.png 200w,\n/static/73c7becee3f9addd18bcd923b3855f4e/e17e5/76new.png 400w,\n/static/73c7becee3f9addd18bcd923b3855f4e/5a190/76new.png 800w,\n/static/73c7becee3f9addd18bcd923b3855f4e/136a2/76new.png 884w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Diagnosis codes are now set with Material UI\n<a href=\"https://mui.com/material-ui/react-select/#multiple-select\">multiple select</a> and dates with\n<a href=\"https://mui.com/x/react-date-pickers/getting-started/#NativePickers.tsx\">a Native Picker</a> or the HTML\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/date\"><code class=\"language-text\">input</code></a> tag.</p>\n</div>","frontmatter":{"mainImage":{"publicURL":"/static/ed8ae98c5d885b4d1928a681eefbe7c4/part-8.svg"},"part":8,"letter":"e","lang":"en"}}},"pageContext":{"part":8,"letter":"e","lang":"en"}}}